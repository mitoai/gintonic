// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function opt_map(m, o) {
  if (o !== undefined) {
    return Js_primitive.some(Curry._1(m, Js_primitive.valFromOption(o)));
  }
  
}

function o_to_list(o) {
  if (o !== undefined) {
    return /* :: */[
            Js_primitive.valFromOption(o),
            /* [] */0
          ];
  } else {
    return /* [] */0;
  }
}

function o_fold_right(f, o) {
  var partial_arg = o_to_list(o);
  return (function (param) {
      return List.fold_right(f, partial_arg, param);
    });
}

function assoc_filter(a1, l) {
  var folder = function (e, acc) {
    if (e[0] === a1) {
      return /* :: */[
              e[1],
              acc
            ];
    } else {
      return acc;
    }
  };
  return List.fold_right(folder, l, /* [] */0);
}

function assoc_opt(a, l) {
  try {
    return Js_primitive.some(List.assoc(a, l));
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return undefined;
    } else {
      throw exn;
    }
  }
}

function find_opt(a, l) {
  try {
    return Js_primitive.some(List.find(a, l));
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return undefined;
    } else {
      throw exn;
    }
  }
}

function get_opt(a) {
  return (function (param) {
      return find_opt((function (m) {
                    return m === a;
                  }), param);
    });
}

function flatten(_l) {
  while(true) {
    var l = _l;
    if (l) {
      var match = l[0];
      if (match !== undefined) {
        return /* :: */[
                Js_primitive.valFromOption(match),
                flatten(l[1])
              ];
      } else {
        _l = l[1];
        continue ;
      }
    } else {
      return /* [] */0;
    }
  };
}

function identity(a) {
  return a;
}

exports.opt_map = opt_map;
exports.o_to_list = o_to_list;
exports.o_fold_right = o_fold_right;
exports.assoc_filter = assoc_filter;
exports.assoc_opt = assoc_opt;
exports.find_opt = find_opt;
exports.get_opt = get_opt;
exports.flatten = flatten;
exports.identity = identity;
/* No side effect */
