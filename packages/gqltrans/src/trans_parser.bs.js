// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("Trans_parser.MenhirBasics.Error");

function flat(l) {
  if (l !== undefined) {
    return l;
  } else {
    return /* [] */0;
  }
}

function _menhir_goto_enum_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* EnumTypeTransformation */Block.__(4, [_v]);
  return _menhir_goto_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_name(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  switch (_menhir_s) {
    case 25 : 
        var _v_001 = /* alias */_menhir_stack[2];
        var _v$1 = /* record */[
          /* name */_v,
          _v_001
        ];
        return _menhir_goto_field_selector(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$1);
    case 29 : 
    case 30 : 
        exit = 2;
        break;
    case 33 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  2010,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number") {
          switch (_tok) {
            case 19 : 
                var _menhir_env$1 = _menhir_discard(_menhir_env);
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                if (typeof _tok$1 === "number") {
                  switch (_tok$1) {
                    case 0 : 
                        return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 1 : 
                        return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 2 : 
                        return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 3 : 
                        return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 4 : 
                        return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 5 : 
                        return _menhir_run41(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 6 : 
                        return _menhir_run42(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 10 : 
                        return _menhir_run43(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 11 : 
                        return _menhir_run44(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 12 : 
                        return _menhir_run46(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 13 : 
                        return _menhir_run47(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 15 : 
                        return _menhir_run48(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 16 : 
                        return _menhir_run52(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 17 : 
                        return _menhir_run54(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 18 : 
                        return _menhir_run56(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    case 21 : 
                        return _menhir_run57(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                    default:
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "trans_parser.ml",
                                2062,
                                16
                              ]
                            ];
                      }
                      _menhir_env$1[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32);
                  }
                } else {
                  switch (_tok$1.tag | 0) {
                    case 0 : 
                        return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32, _tok$1[0]);
                    case 1 : 
                        return _menhir_run45(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32, _tok$1[0]);
                    case 2 : 
                        return _menhir_run53(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32, _tok$1[0]);
                    case 3 : 
                        return _menhir_run55(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32, _tok$1[0]);
                    case 4 : 
                        return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */32, _tok$1[0]);
                    
                  }
                }
            case 7 : 
            case 13 : 
            case 14 : 
            case 15 : 
            case 20 : 
            case 22 : 
                exit$1 = 3;
                break;
            default:
              return _menhir_goto_option_default_value_(_menhir_env, _menhir_stack$1, undefined);
          }
        } else {
          switch (_tok.tag | 0) {
            case 2 : 
            case 3 : 
                exit$1 = 3;
                break;
            default:
              return _menhir_goto_option_default_value_(_menhir_env, _menhir_stack$1, undefined);
          }
        }
        if (exit$1 === 3) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    2075,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 35 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1985,
                  10
                ]
              ];
        }
        var _tok$2 = _menhir_env[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$2 === "number") {
          switch (_tok$2) {
            case 7 : 
            case 8 : 
            case 13 : 
            case 15 : 
            case 19 : 
            case 20 : 
                exit$2 = 3;
                break;
            case 22 : 
                return _menhir_reduce1(_menhir_env, _menhir_stack$1);
            default:
              exit$2 = 4;
          }
        } else {
          switch (_tok$2.tag | 0) {
            case 2 : 
            case 3 : 
                exit$2 = 3;
                break;
            default:
              exit$2 = 4;
          }
        }
        switch (exit$2) {
          case 3 : 
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "trans_parser.ml",
                        2001,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          case 4 : 
              var _v$2 = /* record */[
                /* name */_v,
                /* alias */undefined
              ];
              return _menhir_goto_field_selector(_menhir_env, _menhir_stack, _menhir_s, _v$2);
          
        }
        break;
    case 39 : 
        var _v_001$1 = /* alias */_menhir_stack[2];
        var _v$3 = /* record */[
          /* name */_v,
          _v_001$1
        ];
        return _menhir_goto_type_selector(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$3);
    case 1 : 
    case 3 : 
    case 5 : 
    case 6 : 
    case 8 : 
    case 9 : 
    case 15 : 
    case 18 : 
    case 20 : 
    case 21 : 
    case 38 : 
    case 40 : 
        exit = 1;
        break;
    case 0 : 
    case 2 : 
    case 4 : 
    case 7 : 
    case 10 : 
    case 11 : 
    case 12 : 
    case 13 : 
    case 14 : 
    case 16 : 
    case 17 : 
    case 19 : 
    case 22 : 
    case 23 : 
    case 24 : 
    case 26 : 
    case 27 : 
    case 28 : 
    case 31 : 
    case 32 : 
    case 34 : 
    case 36 : 
    case 37 : 
    case 41 : 
        return _menhir_fail(/* () */0);
    
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1947,
                  10
                ]
              ];
        }
        var _tok$3 = _menhir_env[/* _menhir_token */2];
        var exit$3 = 0;
        if (typeof _tok$3 === "number") {
          switch (_tok$3) {
            case 3 : 
            case 15 : 
            case 20 : 
                exit$3 = 4;
                break;
            case 22 : 
                return _menhir_reduce1(_menhir_env, _menhir_stack$1);
            default:
              exit$3 = 3;
          }
        } else {
          switch (_tok$3.tag | 0) {
            case 0 : 
            case 4 : 
                exit$3 = 4;
                break;
            default:
              exit$3 = 3;
          }
        }
        switch (exit$3) {
          case 3 : 
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "trans_parser.ml",
                        1963,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          case 4 : 
              var _v$4 = /* record */[
                /* name */_v,
                /* alias */undefined
              ];
              return _menhir_goto_type_selector(_menhir_env, _menhir_stack, _menhir_s, _v$4);
          
        }
        break;
    case 2 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  2084,
                  10
                ]
              ];
        }
        var _tok$4 = _menhir_env[/* _menhir_token */2];
        var exit$4 = 0;
        if (typeof _tok$4 === "number" && _tok$4 >= 22) {
          var _menhir_env$2 = _menhir_discard(_menhir_env);
          var _tok$5 = _menhir_env$2[/* _menhir_token */2];
          if (typeof _tok$5 === "number") {
            switch (_tok$5) {
              case 0 : 
                  return _menhir_run36(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 1 : 
                  return _menhir_run37(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 2 : 
                  return _menhir_run38(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 3 : 
                  return _menhir_run39(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 4 : 
                  return _menhir_run40(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 5 : 
                  return _menhir_run41(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 6 : 
                  return _menhir_run42(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 10 : 
                  return _menhir_run43(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 11 : 
                  return _menhir_run44(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 12 : 
                  return _menhir_run46(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 13 : 
                  return _menhir_run47(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 15 : 
                  return _menhir_run48(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 16 : 
                  return _menhir_run52(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 17 : 
                  return _menhir_run54(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 18 : 
                  return _menhir_run56(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              case 21 : 
                  return _menhir_run57(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
              default:
                if (_menhir_env$2[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "trans_parser.ml",
                          2136,
                          16
                        ]
                      ];
                }
                _menhir_env$2[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28);
            }
          } else {
            switch (_tok$5.tag | 0) {
              case 0 : 
                  return _menhir_run26(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28, _tok$5[0]);
              case 1 : 
                  return _menhir_run45(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28, _tok$5[0]);
              case 2 : 
                  return _menhir_run53(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28, _tok$5[0]);
              case 3 : 
                  return _menhir_run55(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28, _tok$5[0]);
              case 4 : 
                  return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState51 */28, _tok$5[0]);
              
            }
          }
        } else {
          exit$4 = 3;
        }
        if (exit$4 === 3) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    2140,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    
  }
}

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env[/* _menhir_lexer */0];
  var lexbuf = _menhir_env[/* _menhir_lexbuf */1];
  var _tok = Curry._1(lexer, lexbuf);
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token */_tok,
          /* _menhir_error */false
        ];
}

function _menhir_run15(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "input");
}

function _menhir_fail(param) {
  Printf.fprintf(Pervasives.stderr, /* Format */[
        /* String_literal */Block.__(11, [
            "Internal failure -- please contact the parser generator's developers.\n",
            /* Flush */Block.__(10, [/* End_of_format */0])
          ]),
        "Internal failure -- please contact the parser generator's developers.\n%!"
      ]);
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "trans_parser.ml",
          2311,
          4
        ]
      ];
}

function _menhir_run8(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "schema");
}

function _menhir_run14(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "interface");
}

function _menhir_errorcase(_menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var exit = 0;
    if (_menhir_s >= 32) {
      switch (_menhir_s - 32 | 0) {
        case 1 : 
        case 3 : 
        case 4 : 
        case 5 : 
        case 6 : 
        case 7 : 
        case 8 : 
            exit = 1;
            break;
        case 0 : 
        case 2 : 
        case 9 : 
            throw $$Error;
        
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      __menhir_s = _menhir_stack[1];
      __menhir_stack = _menhir_stack[0];
      continue ;
    }
    
  };
}

function _menhir_run9(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "scalar");
}

function _menhir_run11(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "null");
}

function _menhir_run12(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, _v);
}

function _menhir_run10(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "query");
}

function _menhir_goto_option_description_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  switch (_menhir_s) {
    case 11 : 
    case 13 : 
        exit = 3;
        break;
    case 16 : 
    case 26 : 
    case 34 : 
        exit = 2;
        break;
    case 24 : 
    case 36 : 
        exit = 1;
        break;
    case 0 : 
    case 1 : 
    case 2 : 
    case 3 : 
    case 4 : 
    case 5 : 
    case 6 : 
    case 7 : 
    case 8 : 
    case 9 : 
    case 10 : 
    case 12 : 
    case 14 : 
    case 15 : 
    case 17 : 
    case 18 : 
    case 19 : 
    case 20 : 
    case 21 : 
    case 22 : 
    case 23 : 
    case 25 : 
    case 27 : 
    case 28 : 
    case 29 : 
    case 30 : 
    case 31 : 
    case 32 : 
    case 33 : 
    case 35 : 
    case 37 : 
    case 38 : 
    case 39 : 
    case 40 : 
    case 41 : 
        return _menhir_fail(/* () */0);
    
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  2320,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number") {
          switch (_tok) {
            case 0 : 
                return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 1 : 
                return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 2 : 
                return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 3 : 
                return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 4 : 
                return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 5 : 
                return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 6 : 
                return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 10 : 
                return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 11 : 
                return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 12 : 
                return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 16 : 
                return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 17 : 
                return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 18 : 
                return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            case 21 : 
                return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
            default:
              exit$1 = 4;
          }
        } else if (_tok.tag === 1) {
          return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState29 */35, _tok[0]);
        } else {
          exit$1 = 4;
        }
        if (exit$1 === 4) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    2354,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState29 */35);
        }
        break;
    case 2 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  2360,
                  10
                ]
              ];
        }
        var _tok$1 = _menhir_env[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$1 === "number") {
          switch (_tok$1) {
            case 0 : 
                return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 1 : 
                return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 2 : 
                return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 3 : 
                return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 4 : 
                return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 5 : 
                return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 6 : 
                return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 10 : 
                return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 11 : 
                return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 12 : 
                return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 16 : 
                return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 17 : 
                return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 18 : 
                return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            case 21 : 
                return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
            default:
              exit$2 = 4;
          }
        } else if (_tok$1.tag === 1) {
          return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState33 */33, _tok$1[0]);
        } else {
          exit$2 = 4;
        }
        if (exit$2 === 4) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    2394,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState33 */33);
        }
        break;
    case 3 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  2400,
                  10
                ]
              ];
        }
        var _tok$2 = _menhir_env[/* _menhir_token */2];
        var exit$3 = 0;
        if (typeof _tok$2 === "number") {
          switch (_tok$2) {
            case 0 : 
                return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 1 : 
                return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 3 : 
                return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 4 : 
                return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 5 : 
                return _menhir_run41(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 6 : 
                return _menhir_run42(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 10 : 
                return _menhir_run43(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 12 : 
                return _menhir_run46(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 16 : 
                return _menhir_run52(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 17 : 
                return _menhir_run54(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            case 21 : 
                return _menhir_run57(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
            default:
              exit$3 = 4;
          }
        } else if (_tok$2.tag === 1) {
          return _menhir_run45(_menhir_env, _menhir_stack$1, /* MenhirState113 */12, _tok$2[0]);
        } else {
          exit$3 = 4;
        }
        if (exit$3 === 4) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    2428,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState113 */12);
        }
        break;
    
  }
}

function _menhir_goto_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  if (_menhir_s >= 27) {
    switch (_menhir_s - 27 | 0) {
      case 1 : 
          var _v_000 = /* name */_menhir_stack[2];
          var _v$1 = /* record */[
            _v_000,
            /* value */_v
          ];
          var _menhir_stack_000 = _menhir_stack[0];
          var _menhir_stack_001 = _menhir_stack[1];
          var _menhir_stack$2 = /* tuple */[
            _menhir_stack_000,
            _menhir_stack_001,
            _v$1
          ];
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    2185,
                    10
                  ]
                ];
          }
          var _tok = _menhir_env[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok === "number") {
            switch (_tok) {
              case 0 : 
                  return _menhir_run3(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 1 : 
                  return _menhir_run4(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 2 : 
                  return _menhir_run5(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 3 : 
                  return _menhir_run6(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 4 : 
                  return _menhir_run7(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 5 : 
                  return _menhir_run8(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 6 : 
                  return _menhir_run9(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 9 : 
                  return _menhir_reduce32(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 10 : 
                  return _menhir_run10(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 11 : 
                  return _menhir_run11(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 12 : 
                  return _menhir_run13(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 16 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 17 : 
                  return _menhir_run15(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 18 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              case 21 : 
                  return _menhir_run17(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
              default:
                exit$1 = 2;
            }
          } else if (_tok.tag === 1) {
            return _menhir_run12(_menhir_env, _menhir_stack$2, /* MenhirState49 */29, _tok[0]);
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      2221,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState49 */29);
          }
          break;
      case 0 : 
      case 4 : 
          exit = 1;
          break;
      case 5 : 
          var _v$2 = _v;
          return _menhir_goto_option_default_value_(_menhir_env, _menhir_stack, _v$2);
      case 2 : 
      case 3 : 
      case 6 : 
      case 7 : 
      case 8 : 
      case 9 : 
      case 10 : 
      case 11 : 
      case 12 : 
      case 13 : 
      case 14 : 
          return _menhir_fail(/* () */0);
      
    }
  } else {
    return _menhir_fail(/* () */0);
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              2227,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env[/* _menhir_token */2];
    if (typeof _tok$1 === "number") {
      switch (_tok$1) {
        case 0 : 
            return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 1 : 
            return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 2 : 
            return _menhir_run38(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 3 : 
            return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 4 : 
            return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 5 : 
            return _menhir_run41(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 6 : 
            return _menhir_run42(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 7 : 
            return _menhir_reduce34(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 10 : 
            return _menhir_run43(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 11 : 
            return _menhir_run44(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 12 : 
            return _menhir_run46(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 13 : 
            return _menhir_run47(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 15 : 
            return _menhir_run48(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 16 : 
            return _menhir_run52(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 17 : 
            return _menhir_run54(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 18 : 
            return _menhir_run56(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        case 21 : 
            return _menhir_run57(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
        default:
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    2275,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState66 */27);
      }
    } else {
      switch (_tok$1.tag | 0) {
        case 0 : 
            return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState66 */27, _tok$1[0]);
        case 1 : 
            return _menhir_run45(_menhir_env, _menhir_stack$1, /* MenhirState66 */27, _tok$1[0]);
        case 2 : 
            return _menhir_run53(_menhir_env, _menhir_stack$1, /* MenhirState66 */27, _tok$1[0]);
        case 3 : 
            return _menhir_run55(_menhir_env, _menhir_stack$1, /* MenhirState66 */27, _tok$1[0]);
        case 4 : 
            return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState66 */27, _tok$1[0]);
        
      }
    }
  }
  
}

function _menhir_run7(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "subscription");
}

function _menhir_run6(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "transform");
}

function _menhir_run4(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "type");
}

function _menhir_run3(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "union");
}

function _menhir_run13(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "mutation");
}

function _menhir_run16(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "false");
}

function _menhir_run17(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "enum");
}

function _menhir_run5(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "true");
}

function _menhir_goto_operation_type_definition(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "trans_parser.ml",
            1916,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 4 : 
          return _menhir_run91(_menhir_env, _menhir_stack$1, /* MenhirState94 */22);
      case 9 : 
          var _v$1 = /* :: */[
            _v,
            /* [] */0
          ];
          var _menhir_env$1 = _menhir_env;
          var __menhir_stack = _menhir_stack;
          var __menhir_s = _menhir_s;
          var __v = _v$1;
          while(true) {
            var _v$2 = __v;
            var _menhir_s$1 = __menhir_s;
            var _menhir_stack$2 = __menhir_stack;
            if (_menhir_s$1 !== 22) {
              if (_menhir_s$1 !== 23) {
                return _menhir_fail(/* () */0);
              } else {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "trans_parser.ml",
                          1090,
                          10
                        ]
                      ];
                }
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                var exit$1 = 0;
                if (typeof _tok$1 === "number" && _tok$1 === 9) {
                  var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                  var _v$3 = /* SchemaTransformation */Block.__(1, [_v$2]);
                  return _menhir_goto_transformation(_menhir_env$2, _menhir_stack$2[0], _menhir_stack$2[1], _v$3);
                } else {
                  exit$1 = 1;
                }
                if (exit$1 === 1) {
                  if (_menhir_env$1[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "trans_parser.ml",
                            1128,
                            12
                          ]
                        ];
                  }
                  _menhir_env$1[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, _menhir_s$1);
                }
                
              }
            } else {
              var _v_000 = _menhir_stack$2[2];
              var _v$4 = /* :: */[
                _v_000,
                _v$2
              ];
              __v = _v$4;
              __menhir_s = _menhir_stack$2[1];
              __menhir_stack = _menhir_stack$2[0];
              continue ;
            }
          };
      case 10 : 
          return _menhir_run92(_menhir_env, _menhir_stack$1, /* MenhirState94 */22);
      case 12 : 
          return _menhir_run93(_menhir_env, _menhir_stack$1, /* MenhirState94 */22);
      case 0 : 
      case 1 : 
      case 2 : 
      case 3 : 
      case 5 : 
      case 6 : 
      case 7 : 
      case 8 : 
      case 11 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 16 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 21 : 
      case 22 : 
          exit = 1;
          break;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              1936,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState94 */22);
  }
  
}

function _menhir_run27(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* BlockStringValue */Block.__(1, [_v]);
  return _menhir_goto_string_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run38(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, /* BooleanValue */Block.__(3, [true]));
}

function _menhir_run53(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* IntValue */Block.__(0, [Caml_format.caml_int32_of_string(_v)]);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run43(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "query");
}

function _menhir_run46(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "mutation");
}

function _menhir_run42(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "scalar");
}

function _menhir_run52(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "interface");
}

function _menhir_run57(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "enum");
}

function _menhir_reduce32(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 29) {
      if (_menhir_s$1 !== 30) {
        return _menhir_fail(/* () */0);
      } else {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  960,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 9) {
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _v$1 = /* ObjectValue */Block.__(6, [_v]);
          return _menhir_goto_value(_menhir_env$2, _menhir_stack$1[0], _menhir_stack$1[1], _v$1);
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    996,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$2 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$2;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_run37(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "type");
}

function _menhir_run40(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "subscription");
}

function _menhir_run26(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* StringValue */Block.__(0, [_v]);
  return _menhir_goto_string_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run45(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, _v);
}

function _menhir_run48(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 1 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 2 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 3 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 4 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 5 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 6 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 9 : 
          return _menhir_reduce32(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 10 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 11 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 12 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 16 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 17 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 18 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      case 21 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              1652,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState48 */30);
  }
  
}

function _menhir_run44(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, /* NullValue */0);
}

function _menhir_run36(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "union");
}

function _menhir_run55(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* FloatValue */Block.__(1, [_v]);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run41(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "schema");
}

function _menhir_run47(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    if (typeof _tok === "number") {
      switch (_tok) {
        case 0 : 
            return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 1 : 
            return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 2 : 
            return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 3 : 
            return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 4 : 
            return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 5 : 
            return _menhir_run41(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 6 : 
            return _menhir_run42(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 7 : 
            return _menhir_reduce34(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 10 : 
            return _menhir_run43(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 11 : 
            return _menhir_run44(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 12 : 
            return _menhir_run46(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 13 : 
            __menhir_s = /* MenhirState47 */31;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
        case 15 : 
            return _menhir_run48(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 16 : 
            return _menhir_run52(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 17 : 
            return _menhir_run54(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 18 : 
            return _menhir_run56(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        case 21 : 
            return _menhir_run57(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
        default:
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1609,
                    8
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31);
      }
    } else {
      switch (_tok.tag | 0) {
        case 0 : 
            return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31, _tok[0]);
        case 1 : 
            return _menhir_run45(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31, _tok[0]);
        case 2 : 
            return _menhir_run53(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31, _tok[0]);
        case 3 : 
            return _menhir_run55(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31, _tok[0]);
        case 4 : 
            return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState47 */31, _tok[0]);
        
      }
    }
  };
}

function _menhir_run54(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "input");
}

function _menhir_run56(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, /* BooleanValue */Block.__(3, [false]));
}

function _menhir_run39(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "transform");
}

function _menhir_reduce34(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 27) {
      if (_menhir_s$1 !== 31) {
        return _menhir_fail(/* () */0);
      } else {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  896,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 7) {
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _v$1 = /* ListValue */Block.__(5, [_v]);
          return _menhir_goto_value(_menhir_env$2, _menhir_stack$1[0], _menhir_stack$1[1], _v$1);
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    932,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$2 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$2;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_goto_option_default_value_(_menhir_env, _menhir_stack, _v) {
  var match = _menhir_stack[0];
  var _menhir_s = match[1];
  var _menhir_stack$1 = match[0];
  var _v_000 = /* description */match[2];
  var _v_001 = /* name */_menhir_stack[2];
  var _v$1 = /* record */[
    _v_000,
    _v_001,
    /* value */_v
  ];
  var _menhir_stack$2 = /* tuple */[
    _menhir_stack$1,
    _menhir_s,
    _v$1
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "trans_parser.ml",
            1497,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 8 : 
      case 9 : 
          exit = 2;
          break;
      case 7 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 19 : 
      case 20 : 
      case 22 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce73(_menhir_env, _menhir_stack$2, /* MenhirState75 */26);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run26(_menhir_env, _menhir_stack$2, /* MenhirState75 */26, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run27(_menhir_env, _menhir_stack$2, /* MenhirState75 */26, _tok[0]);
      default:
        return _menhir_reduce73(_menhir_env, _menhir_stack$2, /* MenhirState75 */26);
    }
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1517,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState75 */26);
    case 2 : 
        var _v$2 = /* :: */[
          _v$1,
          /* [] */0
        ];
        var _menhir_env$1 = _menhir_env;
        var __menhir_stack = _menhir_stack$1;
        var __menhir_s = _menhir_s;
        var __v = _v$2;
        while(true) {
          var _v$3 = __v;
          var _menhir_s$1 = __menhir_s;
          var _menhir_stack$3 = __menhir_stack;
          if (_menhir_s$1 !== 16) {
            if (_menhir_s$1 !== 26) {
              if (_menhir_s$1 !== 34) {
                return _menhir_fail(/* () */0);
              } else {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "trans_parser.ml",
                          769,
                          10
                        ]
                      ];
                }
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                var exit$1 = 0;
                if (typeof _tok$1 === "number" && _tok$1 === 8) {
                  var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                  var _v$4 = _v$3;
                  return _menhir_goto_option_arguments_(_menhir_env$2, _menhir_stack$3, _v$4);
                } else {
                  exit$1 = 1;
                }
                if (exit$1 === 1) {
                  if (_menhir_env$1[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "trans_parser.ml",
                            802,
                            12
                          ]
                        ];
                  }
                  _menhir_env$1[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$1, _menhir_stack$3, _menhir_s$1);
                }
                
              }
            } else {
              var _v_000$1 = _menhir_stack$3[2];
              var _v$5 = /* :: */[
                _v_000$1,
                _v$3
              ];
              __v = _v$5;
              __menhir_s = _menhir_stack$3[1];
              __menhir_stack = _menhir_stack$3[0];
              continue ;
            }
          } else {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      823,
                      10
                    ]
                  ];
            }
            var _tok$2 = _menhir_env$1[/* _menhir_token */2];
            var exit$2 = 0;
            if (typeof _tok$2 === "number" && _tok$2 === 9) {
              var _menhir_env$3 = _menhir_discard(_menhir_env$1);
              var _v$6 = _v$3;
              return _menhir_goto_option_input_fields_transformation_(_menhir_env$3, _menhir_stack$3[0], _menhir_stack$3[1], _v$6);
            } else {
              exit$2 = 1;
            }
            if (exit$2 === 1) {
              if (_menhir_env$1[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "trans_parser.ml",
                        859,
                        12
                      ]
                    ];
              }
              _menhir_env$1[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env$1, _menhir_stack$3, _menhir_s$1);
            }
            
          }
        };
    
  }
}

function _menhir_goto_option_fields_transformation_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s >= 8) {
    if (_menhir_s !== 19) {
      if (_menhir_s !== 37) {
        return _menhir_fail(/* () */0);
      } else {
        var match = _menhir_stack[0];
        var a_001 = /* selector */_menhir_stack[2];
        var a_002 = /* fields */flat(_v);
        var a = /* record */[
          /* description */undefined,
          a_001,
          a_002
        ];
        return _menhir_goto_object_type_transformation(_menhir_env, match[0], match[1], a);
      }
    } else {
      var match$1 = _menhir_stack[0];
      var a_001$1 = /* selector */_menhir_stack[2];
      var a_002$1 = /* fields */flat(_v);
      var a$1 = /* record */[
        /* description */undefined,
        a_001$1,
        a_002$1
      ];
      return _menhir_goto_interface_type_transformation(_menhir_env, match$1[0], match$1[1], a$1);
    }
  } else if (_menhir_s !== 4) {
    if (_menhir_s >= 7) {
      var match$2 = _menhir_stack[0];
      var a_000 = /* description */match$2[2];
      var a_001$2 = /* selector */_menhir_stack[2];
      var a_002$2 = /* fields */flat(_v);
      var a$2 = /* record */[
        a_000,
        a_001$2,
        a_002$2
      ];
      return _menhir_goto_object_type_transformation(_menhir_env, match$2[0], match$2[1], a$2);
    } else {
      return _menhir_fail(/* () */0);
    }
  } else {
    var match$3 = _menhir_stack[0];
    var a_000$1 = /* description */match$3[2];
    var a_001$3 = /* selector */_menhir_stack[2];
    var a_002$3 = /* fields */flat(_v);
    var a$3 = /* record */[
      a_000$1,
      a_001$3,
      a_002$3
    ];
    return _menhir_goto_interface_type_transformation(_menhir_env, match$3[0], match$3[1], a$3);
  }
}

function _menhir_run93(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_operation_type_definition(_menhir_env$1, _menhir_stack, _menhir_s, /* Mutation */1);
}

function _menhir_run91(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_operation_type_definition(_menhir_env$1, _menhir_stack, _menhir_s, /* Subscription */2);
}

function _menhir_run92(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_operation_type_definition(_menhir_env$1, _menhir_stack, _menhir_s, /* Query */0);
}

function _menhir_goto_enum_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var switcher = _menhir_s - 27 | 0;
  if (switcher > 5 || switcher < 0) {
    if (switcher !== -15) {
      return _menhir_fail(/* () */0);
    } else {
      var _menhir_s$1 = _menhir_stack[1];
      var _menhir_stack$1 = _menhir_stack[0];
      var _v_000 = /* description */_menhir_stack[2];
      var _v$1 = /* record */[
        _v_000,
        /* value */_v
      ];
      var _menhir_stack$2 = /* tuple */[
        _menhir_stack$1,
        _menhir_s$1,
        _v$1
      ];
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "trans_parser.ml",
                1045,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number") {
        switch (_tok) {
          case 9 : 
              var _v$2 = /* :: */[
                _v$1,
                /* [] */0
              ];
              var _menhir_env$1 = _menhir_env;
              var __menhir_stack = _menhir_stack$1;
              var __menhir_s = _menhir_s$1;
              var __v = _v$2;
              while(true) {
                var _v$3 = __v;
                var _menhir_s$2 = __menhir_s;
                var _menhir_stack$3 = __menhir_stack;
                switch (_menhir_s$2) {
                  case 11 : 
                      var _v_000$1 = _menhir_stack$3[2];
                      var _v$4 = /* :: */[
                        _v_000$1,
                        _v$3
                      ];
                      __v = _v$4;
                      __menhir_s = _menhir_stack$3[1];
                      __menhir_stack = _menhir_stack$3[0];
                      continue ;
                  case 12 : 
                      return _menhir_fail(/* () */0);
                  case 13 : 
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "trans_parser.ml",
                                519,
                                10
                              ]
                            ];
                      }
                      var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                      var exit$1 = 0;
                      if (typeof _tok$1 === "number" && _tok$1 === 9) {
                        var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                        var _v$5 = _v$3;
                        return _menhir_goto_option_enum_values_transformation_(_menhir_env$2, _menhir_stack$3[0], _menhir_stack$3[1], _v$5);
                      } else {
                        exit$1 = 1;
                      }
                      if (exit$1 === 1) {
                        if (_menhir_env$1[/* _menhir_error */3]) {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                /* tuple */[
                                  "trans_parser.ml",
                                  555,
                                  12
                                ]
                              ];
                        }
                        _menhir_env$1[/* _menhir_error */3] = true;
                        return _menhir_errorcase(_menhir_env$1, _menhir_stack$3, _menhir_s$2);
                      }
                      break;
                  default:
                    return _menhir_fail(/* () */0);
                }
              };
          case 0 : 
          case 1 : 
          case 3 : 
          case 4 : 
          case 5 : 
          case 6 : 
          case 10 : 
          case 12 : 
          case 16 : 
          case 17 : 
          case 21 : 
              return _menhir_reduce73(_menhir_env, _menhir_stack$2, /* MenhirState117 */11);
          default:
            exit = 1;
        }
      } else {
        switch (_tok.tag | 0) {
          case 0 : 
              return _menhir_run26(_menhir_env, _menhir_stack$2, /* MenhirState117 */11, _tok[0]);
          case 1 : 
              return _menhir_reduce73(_menhir_env, _menhir_stack$2, /* MenhirState117 */11);
          case 4 : 
              return _menhir_run27(_menhir_env, _menhir_stack$2, /* MenhirState117 */11, _tok[0]);
          default:
            exit = 1;
        }
      }
      if (exit === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1065,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState117 */11);
      }
      
    }
  } else if (switcher === 3 || switcher === 2) {
    return _menhir_fail(/* () */0);
  } else {
    var _v$6 = /* EnumValue */Block.__(4, [_v]);
    return _menhir_goto_value(_menhir_env, _menhir_stack, _menhir_s, _v$6);
  }
}

function _menhir_goto_option_input_fields_transformation_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s !== 2) {
    if (_menhir_s !== 17) {
      return _menhir_fail(/* () */0);
    } else {
      var match = _menhir_stack[0];
      var _v_001 = /* selector */_menhir_stack[2];
      var _v_002 = /* fields */flat(_v);
      var _v$1 = /* record */[
        /* description */undefined,
        _v_001,
        _v_002
      ];
      return _menhir_goto_input_object_type_transformation(_menhir_env, match[0], match[1], _v$1);
    }
  } else {
    var match$1 = _menhir_stack[0];
    var _v_000 = /* description */match$1[2];
    var _v_001$1 = /* selector */_menhir_stack[2];
    var _v_002$1 = /* fields */flat(_v);
    var _v$2 = /* record */[
      _v_000,
      _v_001$1,
      _v_002$1
    ];
    return _menhir_goto_input_object_type_transformation(_menhir_env, match$1[0], match$1[1], _v$2);
  }
}

function _menhir_goto_option_enum_values_transformation_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s !== 14) {
    if (_menhir_s !== 0) {
      return _menhir_fail(/* () */0);
    } else {
      var match = _menhir_stack[0];
      var _v_000 = /* description */match[2];
      var _v_001 = /* selector */_menhir_stack[2];
      var _v_002 = /* values */flat(_v);
      var _v$1 = /* record */[
        _v_000,
        _v_001,
        _v_002
      ];
      return _menhir_goto_enum_type_transformation(_menhir_env, match[0], match[1], _v$1);
    }
  } else {
    var match$1 = _menhir_stack[0];
    var _v_001$1 = /* selector */_menhir_stack[2];
    var _v_002$1 = /* values */flat(_v);
    var _v$2 = /* record */[
      /* description */undefined,
      _v_001$1,
      _v_002$1
    ];
    return _menhir_goto_enum_type_transformation(_menhir_env, match$1[0], match$1[1], _v$2);
  }
}

function _menhir_reduce73(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_description_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_input_object_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* InputObjectTypeTransformation */Block.__(5, [_v]);
  return _menhir_goto_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* TypeTransformation */Block.__(0, [_v]);
  return _menhir_goto_transformation(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_option_arguments_(_menhir_env, _menhir_stack, _v) {
  var match = _menhir_stack[0];
  var _menhir_s = match[1];
  var _menhir_stack$1 = match[0];
  var _v_000 = /* description */match[2];
  var _v_001 = /* selector */_menhir_stack[2];
  var _v_002 = /* arguments */flat(_v);
  var _v$1 = /* record */[
    _v_000,
    _v_001,
    _v_002
  ];
  var _menhir_stack$2 = /* tuple */[
    _menhir_stack$1,
    _menhir_s,
    _v$1
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "trans_parser.ml",
            626,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 9 : 
          var _v$2 = /* :: */[
            _v$1,
            /* [] */0
          ];
          var _menhir_env$1 = _menhir_env;
          var __menhir_stack = _menhir_stack$1;
          var __menhir_s = _menhir_s;
          var __v = _v$2;
          while(true) {
            var _v$3 = __v;
            var _menhir_s$1 = __menhir_s;
            var _menhir_stack$3 = __menhir_stack;
            if (_menhir_s$1 !== 24) {
              if (_menhir_s$1 !== 36) {
                return _menhir_fail(/* () */0);
              } else {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "trans_parser.ml",
                          276,
                          10
                        ]
                      ];
                }
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                var exit$1 = 0;
                if (typeof _tok$1 === "number" && _tok$1 === 9) {
                  var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                  var _v$4 = _v$3;
                  return _menhir_goto_option_fields_transformation_(_menhir_env$2, _menhir_stack$3[0], _menhir_stack$3[1], _v$4);
                } else {
                  exit$1 = 1;
                }
                if (exit$1 === 1) {
                  if (_menhir_env$1[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "trans_parser.ml",
                            312,
                            12
                          ]
                        ];
                  }
                  _menhir_env$1[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$1, _menhir_stack$3, _menhir_s$1);
                }
                
              }
            } else {
              var _v_000$1 = _menhir_stack$3[2];
              var _v$5 = /* :: */[
                _v_000$1,
                _v$3
              ];
              __v = _v$5;
              __menhir_s = _menhir_stack$3[1];
              __menhir_stack = _menhir_stack$3[0];
              continue ;
            }
          };
      case 7 : 
      case 8 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 19 : 
      case 20 : 
      case 22 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce73(_menhir_env, _menhir_stack$2, /* MenhirState85 */24);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run26(_menhir_env, _menhir_stack$2, /* MenhirState85 */24, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run27(_menhir_env, _menhir_stack$2, /* MenhirState85 */24, _tok[0]);
      default:
        return _menhir_reduce73(_menhir_env, _menhir_stack$2, /* MenhirState85 */24);
    }
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              646,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState85 */24);
  }
  
}

function _menhir_goto_object_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* ObjectTypeTransformation */Block.__(1, [_v]);
  return _menhir_goto_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_interface_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* InterfaceTypeTransformation */Block.__(2, [_v]);
  return _menhir_goto_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_string_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var exit = 0;
  switch (_menhir_s) {
    case 27 : 
    case 28 : 
    case 31 : 
    case 32 : 
        exit = 2;
        break;
    case 0 : 
    case 1 : 
    case 2 : 
    case 3 : 
    case 4 : 
    case 5 : 
    case 6 : 
    case 7 : 
    case 8 : 
    case 9 : 
    case 12 : 
    case 14 : 
    case 15 : 
    case 17 : 
    case 18 : 
    case 19 : 
    case 20 : 
    case 21 : 
    case 22 : 
    case 23 : 
    case 25 : 
    case 29 : 
    case 30 : 
    case 33 : 
    case 35 : 
    case 37 : 
    case 38 : 
    case 39 : 
    case 40 : 
        return _menhir_fail(/* () */0);
    case 10 : 
    case 11 : 
    case 13 : 
    case 16 : 
    case 24 : 
    case 26 : 
    case 34 : 
    case 36 : 
    case 41 : 
        exit = 1;
        break;
    
  }
  switch (exit) {
    case 1 : 
        var _menhir_stack$1 = /* tuple */[
          _menhir_stack,
          _menhir_s,
          _v
        ];
        var exit$1 = 0;
        switch (_menhir_s) {
          case 11 : 
          case 13 : 
          case 16 : 
          case 24 : 
          case 26 : 
          case 34 : 
          case 36 : 
              exit$1 = 3;
              break;
          case 0 : 
          case 1 : 
          case 2 : 
          case 3 : 
          case 4 : 
          case 5 : 
          case 6 : 
          case 7 : 
          case 8 : 
          case 9 : 
          case 12 : 
          case 14 : 
          case 15 : 
          case 17 : 
          case 18 : 
          case 19 : 
          case 20 : 
          case 21 : 
          case 22 : 
          case 23 : 
          case 25 : 
          case 27 : 
          case 28 : 
          case 29 : 
          case 30 : 
          case 31 : 
          case 32 : 
          case 33 : 
          case 35 : 
          case 37 : 
          case 38 : 
          case 39 : 
          case 40 : 
              return _menhir_fail(/* () */0);
          case 10 : 
          case 41 : 
              exit$1 = 4;
              break;
          
        }
        switch (exit$1) {
          case 3 : 
              var _v$1 = _v;
              return _menhir_goto_option_description_(_menhir_env, _menhir_stack, _menhir_s, _v$1);
          case 4 : 
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "trans_parser.ml",
                        2736,
                        14
                      ]
                    ];
              }
              var _tok = _menhir_env[/* _menhir_token */2];
              var exit$2 = 0;
              if (typeof _tok === "number" && _tok === 3) {
                var _menhir_env$1 = _menhir_discard(_menhir_env);
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                var exit$3 = 0;
                if (typeof _tok$1 === "number") {
                  switch (_tok$1) {
                    case 0 : 
                        var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                        var _tok$2 = _menhir_env$2[/* _menhir_token */2];
                        var exit$4 = 0;
                        if (typeof _tok$2 === "number") {
                          switch (_tok$2) {
                            case 0 : 
                                return _menhir_run3(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 1 : 
                                return _menhir_run4(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 2 : 
                                return _menhir_run5(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 3 : 
                                return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 4 : 
                                return _menhir_run7(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 5 : 
                                return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 6 : 
                                return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 10 : 
                                return _menhir_run10(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 11 : 
                                return _menhir_run11(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 12 : 
                                return _menhir_run13(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 16 : 
                                return _menhir_run14(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 17 : 
                                return _menhir_run15(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 18 : 
                                return _menhir_run16(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            case 21 : 
                                return _menhir_run17(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                            default:
                              exit$4 = 7;
                          }
                        } else if (_tok$2.tag === 1) {
                          return _menhir_run12(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9, _tok$2[0]);
                        } else {
                          exit$4 = 7;
                        }
                        if (exit$4 === 7) {
                          if (_menhir_env$2[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "trans_parser.ml",
                                    2982,
                                    24
                                  ]
                                ];
                          }
                          _menhir_env$2[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState133 */9);
                        }
                        break;
                    case 1 : 
                        var _menhir_env$3 = _menhir_discard(_menhir_env$1);
                        var _tok$3 = _menhir_env$3[/* _menhir_token */2];
                        var exit$5 = 0;
                        if (typeof _tok$3 === "number") {
                          switch (_tok$3) {
                            case 0 : 
                                return _menhir_run3(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 1 : 
                                return _menhir_run4(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 2 : 
                                return _menhir_run5(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 3 : 
                                return _menhir_run6(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 4 : 
                                return _menhir_run7(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 5 : 
                                return _menhir_run8(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 6 : 
                                return _menhir_run9(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 10 : 
                                return _menhir_run10(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 11 : 
                                return _menhir_run11(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 12 : 
                                return _menhir_run13(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 16 : 
                                return _menhir_run14(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 17 : 
                                return _menhir_run15(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 18 : 
                                return _menhir_run16(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            case 21 : 
                                return _menhir_run17(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                            default:
                              exit$5 = 7;
                          }
                        } else if (_tok$3.tag === 1) {
                          return _menhir_run12(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8, _tok$3[0]);
                        } else {
                          exit$5 = 7;
                        }
                        if (exit$5 === 7) {
                          if (_menhir_env$3[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "trans_parser.ml",
                                    2942,
                                    24
                                  ]
                                ];
                          }
                          _menhir_env$3[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState135 */8);
                        }
                        break;
                    case 6 : 
                        var _menhir_env$4 = _menhir_discard(_menhir_env$1);
                        var _tok$4 = _menhir_env$4[/* _menhir_token */2];
                        var exit$6 = 0;
                        if (typeof _tok$4 === "number") {
                          switch (_tok$4) {
                            case 0 : 
                                return _menhir_run3(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 1 : 
                                return _menhir_run4(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 2 : 
                                return _menhir_run5(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 3 : 
                                return _menhir_run6(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 4 : 
                                return _menhir_run7(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 5 : 
                                return _menhir_run8(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 6 : 
                                return _menhir_run9(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 10 : 
                                return _menhir_run10(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 11 : 
                                return _menhir_run11(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 12 : 
                                return _menhir_run13(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 16 : 
                                return _menhir_run14(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 17 : 
                                return _menhir_run15(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 18 : 
                                return _menhir_run16(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            case 21 : 
                                return _menhir_run17(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                            default:
                              exit$6 = 7;
                          }
                        } else if (_tok$4.tag === 1) {
                          return _menhir_run12(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6, _tok$4[0]);
                        } else {
                          exit$6 = 7;
                        }
                        if (exit$6 === 7) {
                          if (_menhir_env$4[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "trans_parser.ml",
                                    2902,
                                    24
                                  ]
                                ];
                          }
                          _menhir_env$4[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$4, _menhir_stack$1, /* MenhirState138 */6);
                        }
                        break;
                    case 16 : 
                        var _menhir_env$5 = _menhir_discard(_menhir_env$1);
                        var _tok$5 = _menhir_env$5[/* _menhir_token */2];
                        var exit$7 = 0;
                        if (typeof _tok$5 === "number") {
                          switch (_tok$5) {
                            case 0 : 
                                return _menhir_run3(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 1 : 
                                return _menhir_run4(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 2 : 
                                return _menhir_run5(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 3 : 
                                return _menhir_run6(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 4 : 
                                return _menhir_run7(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 5 : 
                                return _menhir_run8(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 6 : 
                                return _menhir_run9(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 10 : 
                                return _menhir_run10(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 11 : 
                                return _menhir_run11(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 12 : 
                                return _menhir_run13(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 16 : 
                                return _menhir_run14(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 17 : 
                                return _menhir_run15(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 18 : 
                                return _menhir_run16(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            case 21 : 
                                return _menhir_run17(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                            default:
                              exit$7 = 7;
                          }
                        } else if (_tok$5.tag === 1) {
                          return _menhir_run12(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5, _tok$5[0]);
                        } else {
                          exit$7 = 7;
                        }
                        if (exit$7 === 7) {
                          if (_menhir_env$5[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "trans_parser.ml",
                                    2862,
                                    24
                                  ]
                                ];
                          }
                          _menhir_env$5[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$5, _menhir_stack$1, /* MenhirState140 */5);
                        }
                        break;
                    case 17 : 
                        var _menhir_env$6 = _menhir_discard(_menhir_env$1);
                        var _tok$6 = _menhir_env$6[/* _menhir_token */2];
                        var exit$8 = 0;
                        if (typeof _tok$6 === "number") {
                          switch (_tok$6) {
                            case 0 : 
                                return _menhir_run3(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 1 : 
                                return _menhir_run4(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 2 : 
                                return _menhir_run5(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 3 : 
                                return _menhir_run6(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 4 : 
                                return _menhir_run7(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 5 : 
                                return _menhir_run8(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 6 : 
                                return _menhir_run9(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 10 : 
                                return _menhir_run10(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 11 : 
                                return _menhir_run11(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 12 : 
                                return _menhir_run13(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 16 : 
                                return _menhir_run14(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 17 : 
                                return _menhir_run15(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 18 : 
                                return _menhir_run16(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            case 21 : 
                                return _menhir_run17(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                            default:
                              exit$8 = 7;
                          }
                        } else if (_tok$6.tag === 1) {
                          return _menhir_run12(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3, _tok$6[0]);
                        } else {
                          exit$8 = 7;
                        }
                        if (exit$8 === 7) {
                          if (_menhir_env$6[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "trans_parser.ml",
                                    2822,
                                    24
                                  ]
                                ];
                          }
                          _menhir_env$6[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$6, _menhir_stack$1, /* MenhirState143 */3);
                        }
                        break;
                    case 21 : 
                        var _menhir_env$7 = _menhir_discard(_menhir_env$1);
                        var _tok$7 = _menhir_env$7[/* _menhir_token */2];
                        var exit$9 = 0;
                        if (typeof _tok$7 === "number") {
                          switch (_tok$7) {
                            case 0 : 
                                return _menhir_run3(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 1 : 
                                return _menhir_run4(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 2 : 
                                return _menhir_run5(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 3 : 
                                return _menhir_run6(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 4 : 
                                return _menhir_run7(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 5 : 
                                return _menhir_run8(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 6 : 
                                return _menhir_run9(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 10 : 
                                return _menhir_run10(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 11 : 
                                return _menhir_run11(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 12 : 
                                return _menhir_run13(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 16 : 
                                return _menhir_run14(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 17 : 
                                return _menhir_run15(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 18 : 
                                return _menhir_run16(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            case 21 : 
                                return _menhir_run17(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                            default:
                              exit$9 = 7;
                          }
                        } else if (_tok$7.tag === 1) {
                          return _menhir_run12(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1, _tok$7[0]);
                        } else {
                          exit$9 = 7;
                        }
                        if (exit$9 === 7) {
                          if (_menhir_env$7[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "trans_parser.ml",
                                    2782,
                                    24
                                  ]
                                ];
                          }
                          _menhir_env$7[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$7, _menhir_stack$1, /* MenhirState146 */1);
                        }
                        break;
                    case 2 : 
                    case 3 : 
                    case 4 : 
                    case 5 : 
                    case 7 : 
                    case 8 : 
                    case 9 : 
                    case 10 : 
                    case 11 : 
                    case 12 : 
                    case 13 : 
                    case 14 : 
                    case 15 : 
                    case 18 : 
                    case 19 : 
                    case 20 : 
                    case 22 : 
                        exit$3 = 6;
                        break;
                    
                  }
                } else {
                  exit$3 = 6;
                }
                if (exit$3 === 6) {
                  if (_menhir_env$1[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "trans_parser.ml",
                            2986,
                            20
                          ]
                        ];
                  }
                  _menhir_env$1[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
                }
                
              } else {
                exit$2 = 5;
              }
              if (exit$2 === 5) {
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "trans_parser.ml",
                          2993,
                          16
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
              }
              break;
          
        }
        break;
    case 2 : 
        var _v$2 = /* StringValue */Block.__(2, [_v]);
        return _menhir_goto_value(_menhir_env, _menhir_stack, _menhir_s, _v$2);
    
  }
}

function _menhir_goto_field_selector(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "trans_parser.ml",
            1142,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 14 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$1[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 7 : 
              case 8 : 
              case 9 : 
              case 13 : 
              case 14 : 
              case 15 : 
              case 19 : 
              case 20 : 
              case 22 : 
                  exit$1 = 2;
                  break;
              default:
                return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState32 */34);
            }
          } else {
            switch (_tok$1.tag | 0) {
              case 0 : 
                  return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState32 */34, _tok$1[0]);
              case 2 : 
              case 3 : 
                  exit$1 = 2;
                  break;
              case 4 : 
                  return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState32 */34, _tok$1[0]);
              default:
                return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState32 */34);
            }
          }
          if (exit$1 === 2) {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      1158,
                      12
                    ]
                  ];
            }
            _menhir_env$1[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState32 */34);
          }
          break;
      case 7 : 
      case 8 : 
      case 13 : 
      case 15 : 
      case 19 : 
      case 20 : 
      case 22 : 
          exit = 1;
          break;
      default:
        return _menhir_goto_option_arguments_(_menhir_env, _menhir_stack$1, undefined);
    }
  } else {
    switch (_tok.tag | 0) {
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      default:
        return _menhir_goto_option_arguments_(_menhir_env, _menhir_stack$1, undefined);
    }
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              1171,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_reduce1(_menhir_env, _menhir_stack) {
  var _menhir_stack$1 = _menhir_stack[0];
  var _menhir_s = _menhir_stack[1];
  var _menhir_stack_002 = _menhir_stack[2];
  var _menhir_stack$2 = /* tuple */[
    _menhir_stack$1,
    _menhir_s,
    _menhir_stack_002
  ];
  var exit = 0;
  switch (_menhir_s) {
    case 35 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1248,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number" && _tok >= 22) {
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$1[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 0 : 
                  return _menhir_run3(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 1 : 
                  return _menhir_run4(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 2 : 
                  return _menhir_run5(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 3 : 
                  return _menhir_run6(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 4 : 
                  return _menhir_run7(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 5 : 
                  return _menhir_run8(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 6 : 
                  return _menhir_run9(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 10 : 
                  return _menhir_run10(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 11 : 
                  return _menhir_run11(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 12 : 
                  return _menhir_run13(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 16 : 
                  return _menhir_run14(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 17 : 
                  return _menhir_run15(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 18 : 
                  return _menhir_run16(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              case 21 : 
                  return _menhir_run17(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
              default:
                exit$2 = 3;
            }
          } else if (_tok$1.tag === 1) {
            return _menhir_run12(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25, _tok$1[0]);
          } else {
            exit$2 = 3;
          }
          if (exit$2 === 3) {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      1288,
                      16
                    ]
                  ];
            }
            _menhir_env$1[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, /* MenhirState81 */25);
          }
          
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1292,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, _menhir_s);
        }
        break;
    case 1 : 
    case 3 : 
    case 5 : 
    case 6 : 
    case 8 : 
    case 9 : 
    case 15 : 
    case 18 : 
    case 20 : 
    case 21 : 
    case 38 : 
    case 40 : 
        exit = 1;
        break;
    case 0 : 
    case 2 : 
    case 4 : 
    case 7 : 
    case 10 : 
    case 11 : 
    case 12 : 
    case 13 : 
    case 14 : 
    case 16 : 
    case 17 : 
    case 19 : 
    case 22 : 
    case 23 : 
    case 24 : 
    case 25 : 
    case 26 : 
    case 27 : 
    case 28 : 
    case 29 : 
    case 30 : 
    case 31 : 
    case 32 : 
    case 33 : 
    case 34 : 
    case 36 : 
    case 37 : 
    case 39 : 
    case 41 : 
        return _menhir_fail(/* () */0);
    
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              1195,
              10
            ]
          ];
    }
    var _tok$2 = _menhir_env[/* _menhir_token */2];
    var exit$3 = 0;
    if (typeof _tok$2 === "number" && _tok$2 >= 22) {
      var _menhir_env$2 = _menhir_discard(_menhir_env);
      var _tok$3 = _menhir_env$2[/* _menhir_token */2];
      var exit$4 = 0;
      if (typeof _tok$3 === "number") {
        switch (_tok$3) {
          case 0 : 
              return _menhir_run3(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 1 : 
              return _menhir_run4(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 2 : 
              return _menhir_run5(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 3 : 
              return _menhir_run6(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 4 : 
              return _menhir_run7(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 5 : 
              return _menhir_run8(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 6 : 
              return _menhir_run9(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 10 : 
              return _menhir_run10(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 11 : 
              return _menhir_run11(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 12 : 
              return _menhir_run13(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 16 : 
              return _menhir_run14(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 17 : 
              return _menhir_run15(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 18 : 
              return _menhir_run16(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          case 21 : 
              return _menhir_run17(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
          default:
            exit$4 = 3;
        }
      } else if (_tok$3.tag === 1) {
        return _menhir_run12(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39, _tok$3[0]);
      } else {
        exit$4 = 3;
      }
      if (exit$4 === 3) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1235,
                  16
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$2, /* MenhirState21 */39);
      }
      
    } else {
      exit$3 = 2;
    }
    if (exit$3 === 2) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "trans_parser.ml",
                1239,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$1, _menhir_s);
    }
    
  }
  
}

function _menhir_goto_type_selector(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  switch (_menhir_s) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1462,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number") {
          switch (_tok) {
            case 15 : 
                return _menhir_run112(_menhir_env, _menhir_stack$1, /* MenhirState147 */0);
            case 3 : 
            case 20 : 
                return _menhir_reduce75(_menhir_env, _menhir_stack$1, /* MenhirState147 */0);
            default:
              exit = 1;
          }
        } else {
          switch (_tok.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce75(_menhir_env, _menhir_stack$1, /* MenhirState147 */0);
            default:
              exit = 1;
          }
        }
        if (exit === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1470,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState147 */0);
        }
        break;
    case 3 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1448,
                  10
                ]
              ];
        }
        var _tok$1 = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok$1 === "number") {
          switch (_tok$1) {
            case 15 : 
                return _menhir_run105(_menhir_env, _menhir_stack$1, /* MenhirState144 */2);
            case 3 : 
            case 20 : 
                return _menhir_reduce79(_menhir_env, _menhir_stack$1, /* MenhirState144 */2);
            default:
              exit$1 = 1;
          }
        } else {
          switch (_tok$1.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce79(_menhir_env, _menhir_stack$1, /* MenhirState144 */2);
            default:
              exit$1 = 1;
          }
        }
        if (exit$1 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1456,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState144 */2);
        }
        break;
    case 5 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1434,
                  10
                ]
              ];
        }
        var _tok$2 = _menhir_env[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$2 === "number") {
          switch (_tok$2) {
            case 15 : 
                return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState141 */4);
            case 3 : 
            case 20 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState141 */4);
            default:
              exit$2 = 1;
          }
        } else {
          switch (_tok$2.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState141 */4);
            default:
              exit$2 = 1;
          }
        }
        if (exit$2 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1442,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState141 */4);
        }
        break;
    case 6 : 
        var _v_000 = /* description */_menhir_stack[2];
        var _v$1 = /* record */[
          _v_000,
          /* selector */_v
        ];
        return _menhir_goto_scalar_type_transformation(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$1);
    case 8 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1406,
                  10
                ]
              ];
        }
        var _tok$3 = _menhir_env[/* _menhir_token */2];
        var exit$3 = 0;
        if (typeof _tok$3 === "number") {
          switch (_tok$3) {
            case 15 : 
                return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState136 */7);
            case 3 : 
            case 20 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState136 */7);
            default:
              exit$3 = 1;
          }
        } else {
          switch (_tok$3.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState136 */7);
            default:
              exit$3 = 1;
          }
        }
        if (exit$3 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1414,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState136 */7);
        }
        break;
    case 9 : 
        var _v_000$1 = /* description */_menhir_stack[2];
        var _v$2 = /* record */[
          _v_000$1,
          /* selector */_v
        ];
        return _menhir_goto_union_type_transformation(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$2);
    case 15 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1378,
                  10
                ]
              ];
        }
        var _tok$4 = _menhir_env[/* _menhir_token */2];
        var exit$4 = 0;
        if (typeof _tok$4 === "number") {
          switch (_tok$4) {
            case 15 : 
                return _menhir_run112(_menhir_env, _menhir_stack$1, /* MenhirState111 */14);
            case 3 : 
            case 20 : 
                return _menhir_reduce75(_menhir_env, _menhir_stack$1, /* MenhirState111 */14);
            default:
              exit$4 = 1;
          }
        } else {
          switch (_tok$4.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce75(_menhir_env, _menhir_stack$1, /* MenhirState111 */14);
            default:
              exit$4 = 1;
          }
        }
        if (exit$4 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1386,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState111 */14);
        }
        break;
    case 18 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1364,
                  10
                ]
              ];
        }
        var _tok$5 = _menhir_env[/* _menhir_token */2];
        var exit$5 = 0;
        if (typeof _tok$5 === "number") {
          switch (_tok$5) {
            case 15 : 
                return _menhir_run105(_menhir_env, _menhir_stack$1, /* MenhirState104 */17);
            case 3 : 
            case 20 : 
                return _menhir_reduce79(_menhir_env, _menhir_stack$1, /* MenhirState104 */17);
            default:
              exit$5 = 1;
          }
        } else {
          switch (_tok$5.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce79(_menhir_env, _menhir_stack$1, /* MenhirState104 */17);
            default:
              exit$5 = 1;
          }
        }
        if (exit$5 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1372,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState104 */17);
        }
        break;
    case 20 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1350,
                  10
                ]
              ];
        }
        var _tok$6 = _menhir_env[/* _menhir_token */2];
        var exit$6 = 0;
        if (typeof _tok$6 === "number") {
          switch (_tok$6) {
            case 15 : 
                return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState101 */19);
            case 3 : 
            case 20 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState101 */19);
            default:
              exit$6 = 1;
          }
        } else {
          switch (_tok$6.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState101 */19);
            default:
              exit$6 = 1;
          }
        }
        if (exit$6 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1358,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState101 */19);
        }
        break;
    case 21 : 
        var _v$3 = /* record */[
          /* description */undefined,
          /* selector */_v
        ];
        return _menhir_goto_scalar_type_transformation(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$3);
    case 38 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "trans_parser.ml",
                  1322,
                  10
                ]
              ];
        }
        var _tok$7 = _menhir_env[/* _menhir_token */2];
        var exit$7 = 0;
        if (typeof _tok$7 === "number") {
          switch (_tok$7) {
            case 15 : 
                return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState24 */37);
            case 3 : 
            case 20 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState24 */37);
            default:
              exit$7 = 1;
          }
        } else {
          switch (_tok$7.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce77(_menhir_env, _menhir_stack$1, /* MenhirState24 */37);
            default:
              exit$7 = 1;
          }
        }
        if (exit$7 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "trans_parser.ml",
                    1330,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState24 */37);
        }
        break;
    case 40 : 
        var _v$4 = /* record */[
          /* description */undefined,
          /* selector */_v
        ];
        return _menhir_goto_union_type_transformation(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$4);
    case 0 : 
    case 2 : 
    case 4 : 
    case 7 : 
    case 10 : 
    case 11 : 
    case 12 : 
    case 13 : 
    case 14 : 
    case 16 : 
    case 17 : 
    case 19 : 
    case 22 : 
    case 23 : 
    case 24 : 
    case 25 : 
    case 26 : 
    case 27 : 
    case 28 : 
    case 29 : 
    case 30 : 
    case 31 : 
    case 32 : 
    case 33 : 
    case 34 : 
    case 35 : 
    case 36 : 
    case 37 : 
    case 39 : 
    case 41 : 
        return _menhir_fail(/* () */0);
    
  }
}

function _menhir_run1(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _tok$1 = _menhir_env$2[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 0 : 
                  return _menhir_run3(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 1 : 
                  return _menhir_run4(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 2 : 
                  return _menhir_run5(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 3 : 
                  return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 4 : 
                  return _menhir_run7(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 5 : 
                  return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 6 : 
                  return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 10 : 
                  return _menhir_run10(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 11 : 
                  return _menhir_run11(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 12 : 
                  return _menhir_run13(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 16 : 
                  return _menhir_run14(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 17 : 
                  return _menhir_run15(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 18 : 
                  return _menhir_run16(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              case 21 : 
                  return _menhir_run17(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
              default:
                exit$1 = 2;
            }
          } else if (_tok$1.tag === 1) {
            return _menhir_run12(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40, _tok$1[0]);
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (_menhir_env$2[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      3502,
                      12
                    ]
                  ];
            }
            _menhir_env$2[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */40);
          }
          break;
      case 1 : 
          var _menhir_env$3 = _menhir_discard(_menhir_env$1);
          var _tok$2 = _menhir_env$3[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$2 === "number") {
            switch (_tok$2) {
              case 0 : 
                  return _menhir_run3(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 1 : 
                  return _menhir_run4(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 2 : 
                  return _menhir_run5(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 3 : 
                  return _menhir_run6(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 4 : 
                  return _menhir_run7(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 5 : 
                  return _menhir_run8(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 6 : 
                  return _menhir_run9(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 10 : 
                  return _menhir_run10(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 11 : 
                  return _menhir_run11(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 12 : 
                  return _menhir_run13(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 16 : 
                  return _menhir_run14(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 17 : 
                  return _menhir_run15(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 18 : 
                  return _menhir_run16(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              case 21 : 
                  return _menhir_run17(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
              default:
                exit$2 = 2;
            }
          } else if (_tok$2.tag === 1) {
            return _menhir_run12(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38, _tok$2[0]);
          } else {
            exit$2 = 2;
          }
          if (exit$2 === 2) {
            if (_menhir_env$3[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      3462,
                      12
                    ]
                  ];
            }
            _menhir_env$3[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState23 */38);
          }
          break;
      case 5 : 
          var _menhir_env$4 = _menhir_discard(_menhir_env$1);
          var _tok$3 = _menhir_env$4[/* _menhir_token */2];
          var exit$3 = 0;
          if (typeof _tok$3 === "number" && _tok$3 === 15) {
            var _menhir_env$5 = _menhir_discard(_menhir_env$4);
            var _tok$4 = _menhir_env$5[/* _menhir_token */2];
            var exit$4 = 0;
            if (typeof _tok$4 === "number") {
              switch (_tok$4) {
                case 4 : 
                    return _menhir_run91(_menhir_env$5, _menhir_stack$1, /* MenhirState90 */23);
                case 10 : 
                    return _menhir_run92(_menhir_env$5, _menhir_stack$1, /* MenhirState90 */23);
                case 5 : 
                case 6 : 
                case 7 : 
                case 8 : 
                case 9 : 
                case 11 : 
                    exit$4 = 3;
                    break;
                case 12 : 
                    return _menhir_run93(_menhir_env$5, _menhir_stack$1, /* MenhirState90 */23);
                default:
                  exit$4 = 3;
              }
            } else {
              exit$4 = 3;
            }
            if (exit$4 === 3) {
              if (_menhir_env$5[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "trans_parser.ml",
                        3415,
                        16
                      ]
                    ];
              }
              _menhir_env$5[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env$5, _menhir_stack$1, /* MenhirState90 */23);
            }
            
          } else {
            exit$3 = 2;
          }
          if (exit$3 === 2) {
            if (_menhir_env$4[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      3419,
                      12
                    ]
                  ];
            }
            _menhir_env$4[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$4, _menhir_stack, _menhir_s);
          }
          break;
      case 6 : 
          var _menhir_env$6 = _menhir_discard(_menhir_env$1);
          var _tok$5 = _menhir_env$6[/* _menhir_token */2];
          var exit$5 = 0;
          if (typeof _tok$5 === "number") {
            switch (_tok$5) {
              case 0 : 
                  return _menhir_run3(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 1 : 
                  return _menhir_run4(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 2 : 
                  return _menhir_run5(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 3 : 
                  return _menhir_run6(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 4 : 
                  return _menhir_run7(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 5 : 
                  return _menhir_run8(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 6 : 
                  return _menhir_run9(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 10 : 
                  return _menhir_run10(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 11 : 
                  return _menhir_run11(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 12 : 
                  return _menhir_run13(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 16 : 
                  return _menhir_run14(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 17 : 
                  return _menhir_run15(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 18 : 
                  return _menhir_run16(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              case 21 : 
                  return _menhir_run17(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
              default:
                exit$5 = 2;
            }
          } else if (_tok$5.tag === 1) {
            return _menhir_run12(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21, _tok$5[0]);
          } else {
            exit$5 = 2;
          }
          if (exit$5 === 2) {
            if (_menhir_env$6[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      3393,
                      12
                    ]
                  ];
            }
            _menhir_env$6[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$6, _menhir_stack$1, /* MenhirState98 */21);
          }
          break;
      case 16 : 
          var _menhir_env$7 = _menhir_discard(_menhir_env$1);
          var _tok$6 = _menhir_env$7[/* _menhir_token */2];
          var exit$6 = 0;
          if (typeof _tok$6 === "number") {
            switch (_tok$6) {
              case 0 : 
                  return _menhir_run3(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 1 : 
                  return _menhir_run4(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 2 : 
                  return _menhir_run5(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 3 : 
                  return _menhir_run6(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 4 : 
                  return _menhir_run7(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 5 : 
                  return _menhir_run8(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 6 : 
                  return _menhir_run9(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 10 : 
                  return _menhir_run10(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 11 : 
                  return _menhir_run11(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 12 : 
                  return _menhir_run13(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 16 : 
                  return _menhir_run14(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 17 : 
                  return _menhir_run15(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 18 : 
                  return _menhir_run16(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              case 21 : 
                  return _menhir_run17(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
              default:
                exit$6 = 2;
            }
          } else if (_tok$6.tag === 1) {
            return _menhir_run12(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20, _tok$6[0]);
          } else {
            exit$6 = 2;
          }
          if (exit$6 === 2) {
            if (_menhir_env$7[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      3353,
                      12
                    ]
                  ];
            }
            _menhir_env$7[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$7, _menhir_stack$1, /* MenhirState100 */20);
          }
          break;
      case 17 : 
          var _menhir_env$8 = _menhir_discard(_menhir_env$1);
          var _tok$7 = _menhir_env$8[/* _menhir_token */2];
          var exit$7 = 0;
          if (typeof _tok$7 === "number") {
            switch (_tok$7) {
              case 0 : 
                  return _menhir_run3(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 1 : 
                  return _menhir_run4(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 2 : 
                  return _menhir_run5(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 3 : 
                  return _menhir_run6(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 4 : 
                  return _menhir_run7(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 5 : 
                  return _menhir_run8(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 6 : 
                  return _menhir_run9(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 10 : 
                  return _menhir_run10(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 11 : 
                  return _menhir_run11(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 12 : 
                  return _menhir_run13(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 16 : 
                  return _menhir_run14(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 17 : 
                  return _menhir_run15(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 18 : 
                  return _menhir_run16(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              case 21 : 
                  return _menhir_run17(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
              default:
                exit$7 = 2;
            }
          } else if (_tok$7.tag === 1) {
            return _menhir_run12(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18, _tok$7[0]);
          } else {
            exit$7 = 2;
          }
          if (exit$7 === 2) {
            if (_menhir_env$8[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      3313,
                      12
                    ]
                  ];
            }
            _menhir_env$8[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$8, _menhir_stack$1, /* MenhirState103 */18);
          }
          break;
      case 21 : 
          var _menhir_env$9 = _menhir_discard(_menhir_env$1);
          var _tok$8 = _menhir_env$9[/* _menhir_token */2];
          var exit$8 = 0;
          if (typeof _tok$8 === "number") {
            switch (_tok$8) {
              case 0 : 
                  return _menhir_run3(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 1 : 
                  return _menhir_run4(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 2 : 
                  return _menhir_run5(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 3 : 
                  return _menhir_run6(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 4 : 
                  return _menhir_run7(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 5 : 
                  return _menhir_run8(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 6 : 
                  return _menhir_run9(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 10 : 
                  return _menhir_run10(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 11 : 
                  return _menhir_run11(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 12 : 
                  return _menhir_run13(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 16 : 
                  return _menhir_run14(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 17 : 
                  return _menhir_run15(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 18 : 
                  return _menhir_run16(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              case 21 : 
                  return _menhir_run17(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
              default:
                exit$8 = 2;
            }
          } else if (_tok$8.tag === 1) {
            return _menhir_run12(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15, _tok$8[0]);
          } else {
            exit$8 = 2;
          }
          if (exit$8 === 2) {
            if (_menhir_env$9[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "trans_parser.ml",
                      3273,
                      12
                    ]
                  ];
            }
            _menhir_env$9[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$9, _menhir_stack$1, /* MenhirState110 */15);
          }
          break;
      case 2 : 
      case 3 : 
      case 4 : 
      case 7 : 
      case 8 : 
      case 9 : 
      case 10 : 
      case 11 : 
      case 12 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 22 : 
          exit = 1;
          break;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              3506,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_goto_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "trans_parser.ml",
            581,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 3 : 
          return _menhir_run1(_menhir_env, _menhir_stack$1, /* MenhirState123 */10);
      case 20 : 
          var _v$1 = /* :: */[
            _v,
            /* [] */0
          ];
          var _menhir_env$1 = _menhir_env;
          var __menhir_stack = _menhir_stack;
          var __menhir_s = _menhir_s;
          var __v = _v$1;
          while(true) {
            var _v$2 = __v;
            var _menhir_s$1 = __menhir_s;
            var _menhir_stack$2 = __menhir_stack;
            if (_menhir_s$1 !== 10) {
              if (_menhir_s$1 >= 41) {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "trans_parser.ml",
                          211,
                          10
                        ]
                      ];
                }
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                var exit$1 = 0;
                if (typeof _tok$1 === "number" && _tok$1 === 20) {
                  return /* record */[/* transformations */_v$2];
                } else {
                  exit$1 = 1;
                }
                if (exit$1 === 1) {
                  if (_menhir_env$1[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "trans_parser.ml",
                            260,
                            12
                          ]
                        ];
                  }
                  _menhir_env$1[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, _menhir_s$1);
                }
                
              } else {
                return _menhir_fail(/* () */0);
              }
            } else {
              var _v_000 = _menhir_stack$2[2];
              var _v$3 = /* :: */[
                _v_000,
                _v$2
              ];
              __v = _v$3;
              __menhir_s = _menhir_stack$2[1];
              __menhir_stack = _menhir_stack$2[0];
              continue ;
            }
          };
      default:
        exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState123 */10, _tok[0]);
      case 4 : 
          return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState123 */10, _tok[0]);
      default:
        exit = 1;
    }
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              601,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState123 */10);
  }
  
}

function _menhir_run25(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 7 : 
      case 8 : 
      case 9 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 19 : 
      case 20 : 
      case 22 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState25 */36);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState25 */36, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState25 */36, _tok[0]);
      default:
        return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState25 */36);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              741,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState25 */36);
  }
  
}

function _menhir_run105(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 7 : 
      case 8 : 
      case 9 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 19 : 
      case 20 : 
      case 22 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState105 */16);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState105 */16, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState105 */16, _tok[0]);
      default:
        return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState105 */16);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              698,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState105 */16);
  }
  
}

function _menhir_goto_union_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* UnionTypeTransformation */Block.__(3, [_v]);
  return _menhir_goto_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_reduce75(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_enum_values_transformation_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_run112(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
      case 1 : 
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
      case 10 : 
      case 12 : 
      case 16 : 
      case 17 : 
      case 21 : 
          return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState112 */13);
      default:
        exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState112 */13, _tok[0]);
      case 1 : 
          return _menhir_reduce73(_menhir_env$1, _menhir_stack$1, /* MenhirState112 */13);
      case 4 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState112 */13, _tok[0]);
      default:
        exit = 1;
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              672,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState112 */13);
  }
  
}

function _menhir_reduce77(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_fields_transformation_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_scalar_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* ScalarTypeTransformation */Block.__(0, [_v]);
  return _menhir_goto_type_transformation(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_reduce79(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_input_fields_transformation_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function $$document(lexer, lexbuf) {
  var _menhir_env = /* record */[
    /* _menhir_lexer */lexer,
    /* _menhir_lexbuf */lexbuf,
    /* _menhir_token : () */0,
    /* _menhir_error */false
  ];
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok === 3) {
      return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState0 */41);
    } else {
      exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack, /* MenhirState0 */41, _tok[0]);
      case 4 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack, /* MenhirState0 */41, _tok[0]);
      default:
        exit = 1;
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "trans_parser.ml",
              3606,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState0 */41);
  }
  
}

exports.$$Error = $$Error;
exports.$$document = $$document;
/* No side effect */
