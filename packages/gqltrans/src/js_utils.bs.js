// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Int32 = require("bs-platform/lib/js/int32.js");
var Gql_ast = require("./gql_ast.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function empty_to_null(encoder, a) {
  if (a) {
    return Curry._1(encoder, a);
  } else {
    return null;
  }
}

function name(n) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "Name"
              ],
              /* :: */[
                /* tuple */[
                  "value",
                  n
                ],
                /* [] */0
              ]
            ]);
}

function object_value(e, f) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "ObjectValue"
              ],
              /* :: */[
                /* tuple */[
                  "fields",
                  Json_encode.list((function (param) {
                          var e$1 = e;
                          var f = param;
                          return Json_encode.object_(/* :: */[
                                      /* tuple */[
                                        "kind",
                                        "ObjectField"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "name",
                                          name(f[/* name */0])
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "value",
                                            Curry._1(e$1, f[/* value */1])
                                          ],
                                          /* [] */0
                                        ]
                                      ]
                                    ]);
                        }), f)
                ],
                /* [] */0
              ]
            ]);
}

function list_value(e, vs) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "ListValue"
              ],
              /* :: */[
                /* tuple */[
                  "values",
                  Json_encode.list(e, vs)
                ],
                /* [] */0
              ]
            ]);
}

function variable(v) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "Variable"
              ],
              /* :: */[
                /* tuple */[
                  "name",
                  name(v)
                ],
                /* [] */0
              ]
            ]);
}

function int_value(i) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "IntValue"
              ],
              /* :: */[
                /* tuple */[
                  "value",
                  Int32.to_string(i)
                ],
                /* [] */0
              ]
            ]);
}

function float_value(v) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "FloatValue"
              ],
              /* :: */[
                /* tuple */[
                  "value",
                  v
                ],
                /* [] */0
              ]
            ]);
}

function boolean_value(v) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "BooleanValue"
              ],
              /* :: */[
                /* tuple */[
                  "value",
                  v
                ],
                /* [] */0
              ]
            ]);
}

function enum_value(v) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "EnumValue"
              ],
              /* :: */[
                /* tuple */[
                  "value",
                  v
                ],
                /* [] */0
              ]
            ]);
}

var null_value = Json_encode.object_(/* :: */[
      /* tuple */[
        "kind",
        "NullValue"
      ],
      /* [] */0
    ]);

function string_value(s) {
  if (s.tag) {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "kind",
                  "StringValue"
                ],
                /* :: */[
                  /* tuple */[
                    "value",
                    s[0]
                  ],
                  /* :: */[
                    /* tuple */[
                      "block",
                      true
                    ],
                    /* [] */0
                  ]
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "kind",
                  "StringValue"
                ],
                /* :: */[
                  /* tuple */[
                    "value",
                    s[0]
                  ],
                  /* :: */[
                    /* tuple */[
                      "block",
                      false
                    ],
                    /* [] */0
                  ]
                ]
              ]);
  }
}

function value(a) {
  if (typeof a === "number") {
    return null_value;
  } else {
    switch (a.tag | 0) {
      case 0 : 
          return variable(a[0]);
      case 1 : 
          return int_value(a[0]);
      case 2 : 
          return float_value(a[0]);
      case 3 : 
          return string_value(a[0]);
      case 4 : 
          return boolean_value(a[0]);
      case 5 : 
          return enum_value(a[0]);
      case 6 : 
          return list_value(value, a[0]);
      case 7 : 
          return object_value(value, a[0]);
      
    }
  }
}

function value_const(a) {
  if (typeof a === "number") {
    return null_value;
  } else {
    switch (a.tag | 0) {
      case 0 : 
          return int_value(a[0]);
      case 1 : 
          return float_value(a[0]);
      case 2 : 
          return string_value(a[0]);
      case 3 : 
          return boolean_value(a[0]);
      case 4 : 
          return enum_value(a[0]);
      case 5 : 
          return list_value(value_const, a[0]);
      case 6 : 
          return object_value(value_const, a[0]);
      
    }
  }
}

function argument(v, a) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "Argument"
              ],
              /* :: */[
                /* tuple */[
                  "name",
                  name(a[/* name */0])
                ],
                /* :: */[
                  /* tuple */[
                    "value",
                    Curry._1(v, a[/* value */1])
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function type_(t) {
  switch (t.tag | 0) {
    case 0 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "kind",
                      "NamedType"
                    ],
                    /* :: */[
                      /* tuple */[
                        "name",
                        name(t[0])
                      ],
                      /* [] */0
                    ]
                  ]);
    case 1 : 
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "kind",
                      "ListType"
                    ],
                    /* :: */[
                      /* tuple */[
                        "type",
                        type_(t[0])
                      ],
                      /* [] */0
                    ]
                  ]);
    case 2 : 
        var t$1 = t[0];
        var tmp;
        tmp = t$1.tag ? type_(/* NamedType */Block.__(0, [t$1[0]])) : type_(/* ListType */Block.__(1, [t$1[0]]));
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "kind",
                      "NonNullType"
                    ],
                    /* :: */[
                      /* tuple */[
                        "type",
                        tmp
                      ],
                      /* [] */0
                    ]
                  ]);
    
  }
}

function directive(v, a) {
  var param = a[/* arguments */1];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "Directive"
              ],
              /* :: */[
                /* tuple */[
                  "name",
                  name(a[/* name */0])
                ],
                /* :: */[
                  /* tuple */[
                    "value",
                    empty_to_null((function (param) {
                            return Json_encode.list((function (param) {
                                          return argument(v, param);
                                        }), param);
                          }), param)
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function input_value_definition(d) {
  var param = d[/* directives */4];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "InputValueDefinition"
              ],
              /* :: */[
                /* tuple */[
                  "description",
                  Json_encode.nullable(string_value, d[/* description */0])
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    name(d[/* name */1])
                  ],
                  /* :: */[
                    /* tuple */[
                      "type",
                      type_(d[/* tpe */2])
                    ],
                    /* :: */[
                      /* tuple */[
                        "defaultValue",
                        Json_encode.nullable(value_const, d[/* defaultValue */3])
                      ],
                      /* :: */[
                        /* tuple */[
                          "directives",
                          empty_to_null((function (param) {
                                  return Json_encode.list((function (param) {
                                                return directive(value_const, param);
                                              }), param);
                                }), param)
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function input_value_definitions(param) {
  return empty_to_null((function (param) {
                return Json_encode.list(input_value_definition, param);
              }), param);
}

function directive_location(l) {
  if (l.tag) {
    return name(Gql_ast.type_system_directive_location_to_name(l[0]));
  } else {
    return name(Gql_ast.executable_directive_location_to_name(l[0]));
  }
}

function directive_locations(param) {
  return empty_to_null((function (param) {
                return Json_encode.list(directive_location, param);
              }), param);
}

function named_type(n) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "NamedType"
              ],
              /* :: */[
                /* tuple */[
                  "name",
                  name(n)
                ],
                /* [] */0
              ]
            ]);
}

function named_types(param) {
  return empty_to_null((function (param) {
                return Json_encode.list(named_type, param);
              }), param);
}

function field_definition(f) {
  var param = f[/* directives */4];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "FieldDefinition"
              ],
              /* :: */[
                /* tuple */[
                  "description",
                  Json_encode.nullable(string_value, f[/* description */0])
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    name(f[/* name */1])
                  ],
                  /* :: */[
                    /* tuple */[
                      "arguments",
                      input_value_definitions(f[/* arguments */2])
                    ],
                    /* :: */[
                      /* tuple */[
                        "type",
                        type_(f[/* tpe */3])
                      ],
                      /* :: */[
                        /* tuple */[
                          "directives",
                          empty_to_null((function (param) {
                                  return Json_encode.list((function (param) {
                                                return directive(value_const, param);
                                              }), param);
                                }), param)
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function field_definitions(param) {
  return empty_to_null((function (param) {
                return Json_encode.list(field_definition, param);
              }), param);
}

function enum_value_definition(d) {
  var param = d[/* directives */2];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "EnumValueDefinition"
              ],
              /* :: */[
                /* tuple */[
                  "description",
                  Json_encode.nullable(string_value, d[/* description */0])
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    name(d[/* value */1])
                  ],
                  /* :: */[
                    /* tuple */[
                      "directives",
                      empty_to_null((function (param) {
                              return Json_encode.list((function (param) {
                                            return directive(value_const, param);
                                          }), param);
                            }), param)
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function enum_value_definitions(param) {
  return empty_to_null((function (param) {
                return Json_encode.list(enum_value_definition, param);
              }), param);
}

function operation_type(t) {
  switch (t) {
    case 0 : 
        return "query";
    case 1 : 
        return "mutation";
    case 2 : 
        return "subscription";
    
  }
}

function operation_type_definition(d) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "OperationTypeDefinition"
              ],
              /* :: */[
                /* tuple */[
                  "operation",
                  operation_type(d[/* operation */0])
                ],
                /* :: */[
                  /* tuple */[
                    "type",
                    named_type(d[/* tpe */1])
                  ],
                  /* [] */0
                ]
              ]
            ]);
}

function operation_type_definitions(param) {
  return Json_encode.list(operation_type_definition, param);
}

function variable_definition(def) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "VariableDefinition"
              ],
              /* :: */[
                /* tuple */[
                  "variable",
                  variable(def[/* variable */0])
                ],
                /* :: */[
                  /* tuple */[
                    "type",
                    type_(def[/* tpe */1])
                  ],
                  /* :: */[
                    /* tuple */[
                      "defaultValue",
                      Json_encode.nullable(value_const, def[/* defaultValue */2])
                    ],
                    /* :: */[
                      /* tuple */[
                        "directives",
                        null
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function variable_definitions(param) {
  return empty_to_null((function (param) {
                return Json_encode.list(variable_definition, param);
              }), param);
}

function selection_set(s) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "SelectionSet"
              ],
              /* :: */[
                /* tuple */[
                  "selections",
                  Json_encode.list(selection, s)
                ],
                /* [] */0
              ]
            ]);
}

function selection(s) {
  switch (s.tag | 0) {
    case 0 : 
        var f = s[0];
        var param = f[/* arguments */2];
        var param$1 = f[/* directives */3];
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "kind",
                      "Field"
                    ],
                    /* :: */[
                      /* tuple */[
                        "alias ",
                        Json_encode.nullable(name, f[/* alias */0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "name ",
                          name(f[/* name */1])
                        ],
                        /* :: */[
                          /* tuple */[
                            "arguments ",
                            empty_to_null((function (param) {
                                    return Json_encode.list((function (param) {
                                                  return argument(value, param);
                                                }), param);
                                  }), param)
                          ],
                          /* :: */[
                            /* tuple */[
                              "directives ",
                              empty_to_null((function (param) {
                                      return Json_encode.list((function (param) {
                                                    return directive(value, param);
                                                  }), param);
                                    }), param$1)
                            ],
                            /* :: */[
                              /* tuple */[
                                "selectionSet ",
                                empty_to_null(selection_set, f[/* selectionSet */4])
                              ],
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]);
    case 1 : 
        var f$1 = s[0];
        var param$2 = f$1[/* directives */1];
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "kind",
                      "FragmentSpread"
                    ],
                    /* :: */[
                      /* tuple */[
                        "name",
                        name(f$1[/* name */0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "directives ",
                          empty_to_null((function (param) {
                                  return Json_encode.list((function (param) {
                                                return directive(value, param);
                                              }), param);
                                }), param$2)
                        ],
                        /* [] */0
                      ]
                    ]
                  ]);
    case 2 : 
        var f$2 = s[0];
        var param$3 = f$2[/* directives */1];
        return Json_encode.object_(/* :: */[
                    /* tuple */[
                      "kind",
                      "InlineFragment"
                    ],
                    /* :: */[
                      /* tuple */[
                        "typeCondition ",
                        Json_encode.nullable(named_type, f$2[/* condition */0])
                      ],
                      /* :: */[
                        /* tuple */[
                          "directives ",
                          empty_to_null((function (param) {
                                  return Json_encode.list((function (param) {
                                                return directive(value, param);
                                              }), param);
                                }), param$3)
                        ],
                        /* :: */[
                          /* tuple */[
                            "selectionSet ",
                            selection_set(f$2[/* selectionSet */2])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]);
    
  }
}

function definition(d) {
  switch (d.tag | 0) {
    case 0 : 
        var match = d[0];
        switch (match.tag | 0) {
          case 0 : 
              var d$1 = match[0];
              var param = d$1[/* directives */0];
              return Json_encode.object_(/* :: */[
                          /* tuple */[
                            "kind",
                            "SchemaExtension"
                          ],
                          /* :: */[
                            /* tuple */[
                              "directives",
                              empty_to_null((function (param) {
                                      return Json_encode.list((function (param) {
                                                    return directive(value_const, param);
                                                  }), param);
                                    }), param)
                            ],
                            /* :: */[
                              /* tuple */[
                                "operations",
                                Json_encode.list(operation_type_definition, d$1[/* operations */1])
                              ],
                              /* [] */0
                            ]
                          ]
                        ]);
          case 1 : 
              var match$1 = match[0];
              switch (match$1.tag | 0) {
                case 0 : 
                    var d$2 = match$1[0];
                    var param$1 = d$2[/* directives */2];
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "kind",
                                  "ScalarTypeDefinition"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "description",
                                    Json_encode.nullable(string_value, d$2[/* description */0])
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "name",
                                      name(d$2[/* name */1])
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "directives",
                                        empty_to_null((function (param) {
                                                return Json_encode.list((function (param) {
                                                              return directive(value_const, param);
                                                            }), param);
                                              }), param$1)
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]);
                case 1 : 
                    var d$3 = match$1[0];
                    var param$2 = d$3[/* directives */3];
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "kind",
                                  "ObjectTypeDefinition"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "description",
                                    Json_encode.nullable(string_value, d$3[/* description */0])
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "name",
                                      name(d$3[/* name */1])
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "interfaces",
                                        named_types(d$3[/* implements */2])
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "directives",
                                          empty_to_null((function (param) {
                                                  return Json_encode.list((function (param) {
                                                                return directive(value_const, param);
                                                              }), param);
                                                }), param$2)
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "fields",
                                            field_definitions(d$3[/* fields */4])
                                          ],
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]);
                case 2 : 
                    var d$4 = match$1[0];
                    var param$3 = d$4[/* directives */2];
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "kind",
                                  "InterfaceTypeDefinition"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "description",
                                    Json_encode.nullable(string_value, d$4[/* description */0])
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "name",
                                      name(d$4[/* name */1])
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "directives",
                                        empty_to_null((function (param) {
                                                return Json_encode.list((function (param) {
                                                              return directive(value_const, param);
                                                            }), param);
                                              }), param$3)
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "fields",
                                          field_definitions(d$4[/* fields */3])
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]);
                case 3 : 
                    var d$5 = match$1[0];
                    var param$4 = d$5[/* directives */2];
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "kind",
                                  "UnionTypeDefinition"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "description",
                                    Json_encode.nullable(string_value, d$5[/* description */0])
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "name",
                                      name(d$5[/* name */1])
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "directives",
                                        empty_to_null((function (param) {
                                                return Json_encode.list((function (param) {
                                                              return directive(value_const, param);
                                                            }), param);
                                              }), param$4)
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "types",
                                          named_types(d$5[/* types */3])
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]);
                case 4 : 
                    var d$6 = match$1[0];
                    var param$5 = d$6[/* directives */2];
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "kind",
                                  "EnumTypeDefinition"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "description",
                                    Json_encode.nullable(string_value, d$6[/* description */0])
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "name",
                                      name(d$6[/* name */1])
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "directives",
                                        empty_to_null((function (param) {
                                                return Json_encode.list((function (param) {
                                                              return directive(value_const, param);
                                                            }), param);
                                              }), param$5)
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "values",
                                          enum_value_definitions(d$6[/* values */3])
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]);
                case 5 : 
                    var d$7 = match$1[0];
                    var param$6 = d$7[/* directives */2];
                    return Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "kind",
                                  "InputObjectTypeDefinition"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "description",
                                    Json_encode.nullable(string_value, d$7[/* description */0])
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "name",
                                      name(d$7[/* name */1])
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "directives",
                                        empty_to_null((function (param) {
                                                return Json_encode.list((function (param) {
                                                              return directive(value_const, param);
                                                            }), param);
                                              }), param$6)
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "fields",
                                          input_value_definitions(d$7[/* fields */3])
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]);
                
              }
          case 2 : 
              var d$8 = match[0];
              return Json_encode.object_(/* :: */[
                          /* tuple */[
                            "kind",
                            "DirectiveDefinition"
                          ],
                          /* :: */[
                            /* tuple */[
                              "description",
                              Json_encode.nullable(string_value, d$8[/* description */0])
                            ],
                            /* :: */[
                              /* tuple */[
                                "name",
                                name(d$8[/* name */1])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "arguments",
                                  input_value_definitions(d$8[/* arguments */2])
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "locations",
                                    directive_locations(d$8[/* locations */3])
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]);
          
        }
    case 1 : 
        var match$2 = d[0];
        if (match$2.tag) {
          var match$3 = match$2[0];
          switch (match$3.tag | 0) {
            case 0 : 
                var d$9 = match$3[0];
                var param$7 = d$9[/* directives */1];
                return Json_encode.object_(/* :: */[
                            /* tuple */[
                              "kind",
                              "ScalarTypeExtension"
                            ],
                            /* :: */[
                              /* tuple */[
                                "name",
                                name(d$9[/* name */0])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "directives",
                                  empty_to_null((function (param) {
                                          return Json_encode.list((function (param) {
                                                        return directive(value_const, param);
                                                      }), param);
                                        }), param$7)
                                ],
                                /* [] */0
                              ]
                            ]
                          ]);
            case 1 : 
                var d$10 = match$3[0];
                var param$8 = d$10[/* directives */2];
                return Json_encode.object_(/* :: */[
                            /* tuple */[
                              "kind",
                              "ObjectTypeExtension"
                            ],
                            /* :: */[
                              /* tuple */[
                                "name",
                                name(d$10[/* name */0])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "interfaces",
                                  named_types(d$10[/* implements */1])
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "directives",
                                    empty_to_null((function (param) {
                                            return Json_encode.list((function (param) {
                                                          return directive(value_const, param);
                                                        }), param);
                                          }), param$8)
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "fields",
                                      field_definitions(d$10[/* fields */3])
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]);
            case 2 : 
                var d$11 = match$3[0];
                var param$9 = d$11[/* directives */1];
                return Json_encode.object_(/* :: */[
                            /* tuple */[
                              "kind",
                              "InterfaceTypeExtension"
                            ],
                            /* :: */[
                              /* tuple */[
                                "name",
                                name(d$11[/* name */0])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "directives",
                                  empty_to_null((function (param) {
                                          return Json_encode.list((function (param) {
                                                        return directive(value_const, param);
                                                      }), param);
                                        }), param$9)
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "fields",
                                    field_definitions(d$11[/* fields */2])
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
            case 3 : 
                var d$12 = match$3[0];
                var param$10 = d$12[/* directives */1];
                return Json_encode.object_(/* :: */[
                            /* tuple */[
                              "kind",
                              "UnionTypeExtension"
                            ],
                            /* :: */[
                              /* tuple */[
                                "name",
                                name(d$12[/* name */0])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "directives",
                                  empty_to_null((function (param) {
                                          return Json_encode.list((function (param) {
                                                        return directive(value_const, param);
                                                      }), param);
                                        }), param$10)
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "types",
                                    named_types(d$12[/* types */2])
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
            case 4 : 
                var d$13 = match$3[0];
                var param$11 = d$13[/* directives */1];
                return Json_encode.object_(/* :: */[
                            /* tuple */[
                              "kind",
                              "EnumTypeExtension"
                            ],
                            /* :: */[
                              /* tuple */[
                                "name",
                                name(d$13[/* name */0])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "directives",
                                  empty_to_null((function (param) {
                                          return Json_encode.list((function (param) {
                                                        return directive(value_const, param);
                                                      }), param);
                                        }), param$11)
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "values",
                                    enum_value_definitions(d$13[/* values */2])
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
            case 5 : 
                var d$14 = match$3[0];
                var param$12 = d$14[/* directives */1];
                return Json_encode.object_(/* :: */[
                            /* tuple */[
                              "kind",
                              "InputObjectTypeExtension"
                            ],
                            /* :: */[
                              /* tuple */[
                                "name",
                                name(d$14[/* name */0])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "directives",
                                  empty_to_null((function (param) {
                                          return Json_encode.list((function (param) {
                                                        return directive(value_const, param);
                                                      }), param);
                                        }), param$12)
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "fields",
                                    input_value_definitions(d$14[/* fields */2])
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
            
          }
        } else {
          var d$15 = match$2[0];
          var param$13 = d$15[/* directives */0];
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "kind",
                        "SchemaExtension"
                      ],
                      /* :: */[
                        /* tuple */[
                          "directives",
                          empty_to_null((function (param) {
                                  return Json_encode.list((function (param) {
                                                return directive(value_const, param);
                                              }), param);
                                }), param$13)
                        ],
                        /* :: */[
                          /* tuple */[
                            "operations",
                            empty_to_null(operation_type_definitions, d$15[/* operations */1])
                          ],
                          /* [] */0
                        ]
                      ]
                    ]);
        }
    case 2 : 
        var match$4 = d[0];
        if (match$4.tag) {
          var d$16 = match$4[0];
          var param$14 = d$16[/* directives */2];
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "kind",
                        "FragmentDefinition"
                      ],
                      /* :: */[
                        /* tuple */[
                          "name",
                          name(d$16[/* name */0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "typeCondition ",
                            named_type(d$16[/* condition */1])
                          ],
                          /* :: */[
                            /* tuple */[
                              "directives",
                              empty_to_null((function (param) {
                                      return Json_encode.list((function (param) {
                                                    return directive(value, param);
                                                  }), param);
                                    }), param$14)
                            ],
                            /* :: */[
                              /* tuple */[
                                "selectionSet",
                                selection_set(d$16[/* selectionSet */3])
                              ],
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]);
        } else {
          var d$17 = match$4[0];
          var param$15 = d$17[/* directives */3];
          return Json_encode.object_(/* :: */[
                      /* tuple */[
                        "kind",
                        "OperationDefinition"
                      ],
                      /* :: */[
                        /* tuple */[
                          "operation",
                          operation_type(d$17[/* tpe */0])
                        ],
                        /* :: */[
                          /* tuple */[
                            "name",
                            Json_encode.nullable(name, d$17[/* name */1])
                          ],
                          /* :: */[
                            /* tuple */[
                              "variableDefinitions",
                              variable_definitions(d$17[/* variables */2])
                            ],
                            /* :: */[
                              /* tuple */[
                                "directives",
                                empty_to_null((function (param) {
                                        return Json_encode.list((function (param) {
                                                      return directive(value, param);
                                                    }), param);
                                      }), param$15)
                              ],
                              /* :: */[
                                /* tuple */[
                                  "selectionSet",
                                  selection_set(d$17[/* selectionSet */4])
                                ],
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]);
        }
    
  }
}

function $$document(d) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "kind",
                "Document"
              ],
              /* :: */[
                /* tuple */[
                  "definitions",
                  Json_encode.list(definition, d[/* definitions */0])
                ],
                /* [] */0
              ]
            ]);
}

function schema_document(s) {
  var defs_000 = List.map((function (t) {
          return /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [t])]);
        }), s[/* types */2]);
  var defs_001 = /* :: */[
    /* :: */[
      /* TypeSystemDefinition */Block.__(0, [/* SchemaDefinition */Block.__(0, [s[/* schema */0]])]),
      /* [] */0
    ],
    /* :: */[
      List.map((function (d) {
              return /* TypeSystemDefinition */Block.__(0, [/* DirectiveDefinition */Block.__(2, [d])]);
            }), s[/* directives */1]),
      /* [] */0
    ]
  ];
  var defs = /* :: */[
    defs_000,
    defs_001
  ];
  return $$document(/* record */[/* definitions */List.flatten(defs)]);
}

var document_to_js = $$document;

var schema_document_to_js = schema_document;

exports.document_to_js = document_to_js;
exports.schema_document_to_js = schema_document_to_js;
/* null_value Not a pure module */
