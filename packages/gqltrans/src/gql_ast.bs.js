// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./utils.bs.js");

function vc_to_v(v) {
  if (typeof v === "number") {
    return /* NullValue */0;
  } else {
    switch (v.tag | 0) {
      case 0 : 
          return /* IntValue */Block.__(1, [v[0]]);
      case 1 : 
          return /* FloatValue */Block.__(2, [v[0]]);
      case 2 : 
          return /* StringValue */Block.__(3, [v[0]]);
      case 3 : 
          return /* BooleanValue */Block.__(4, [v[0]]);
      case 4 : 
          return /* EnumValue */Block.__(5, [v[0]]);
      case 5 : 
          return /* ListValue */Block.__(6, [List.map(vc_to_v, v[0])]);
      case 6 : 
          return /* ObjectValue */Block.__(7, [List.map((function (f) {
                            return /* record */[
                                    /* name */f[/* name */0],
                                    /* value */vc_to_v(f[/* value */1])
                                  ];
                          }), v[0])]);
      
    }
  }
}

function executable_directive_location_to_name(l) {
  switch (l) {
    case 0 : 
        return "QUERY";
    case 1 : 
        return "MUTATION";
    case 2 : 
        return "SUBSCRIPTION";
    case 3 : 
        return "FIELD";
    case 4 : 
        return "FRAGMENT_DEFINITION";
    case 5 : 
        return "FRAGMENT_SPREAD";
    case 6 : 
        return "INLINE_FRAGMENT";
    
  }
}

function type_system_directive_location_to_name(t) {
  switch (t) {
    case 0 : 
        return "SCHEMA";
    case 1 : 
        return "SCALAR";
    case 2 : 
        return "OBJECT";
    case 3 : 
        return "FIELD_DEFINITION";
    case 4 : 
        return "ARGUMENT_DEFINITION";
    case 5 : 
        return "INTERFACE";
    case 6 : 
        return "UNION";
    case 7 : 
        return "ENUM";
    case 8 : 
        return "ENUM_VALUE";
    case 9 : 
        return "INPUT_OBJECT";
    case 10 : 
        return "INPUT_FIELD_DEFINITION";
    
  }
}

function map_a(a, m) {
  return /* record */[
          /* name */a[/* name */0],
          /* value */Curry._1(m, a[/* value */1])
        ];
}

function a_to_of(a) {
  return /* record */[
          /* name */a[/* name */0],
          /* value */a[/* value */1]
        ];
}

function document_to_executable_document(d) {
  var ops = List.fold_right((function (o, acc) {
          var acc2 = acc[1];
          var acc1 = acc[0];
          switch (o.tag | 0) {
            case 0 : 
            case 1 : 
                return acc;
            case 2 : 
                var match = o[0];
                if (match.tag) {
                  return /* tuple */[
                          acc1,
                          /* :: */[
                            match[0],
                            acc2
                          ]
                        ];
                } else {
                  return /* tuple */[
                          /* :: */[
                            match[0],
                            acc1
                          ],
                          acc2
                        ];
                }
            
          }
        }), d[/* definitions */0], /* tuple */[
        /* [] */0,
        /* [] */0
      ]);
  var match = ops[0];
  if (match && !match[1]) {
    return /* record */[
            /* operation */match[0],
            /* fragments */ops[1]
          ];
  }
  
}

function document_to_schema_document(d) {
  var ops = List.fold_right((function (o, acc) {
          var acc3 = acc[2];
          var acc2 = acc[1];
          var acc1 = acc[0];
          switch (o.tag | 0) {
            case 0 : 
                var match = o[0];
                switch (match.tag | 0) {
                  case 0 : 
                      return /* tuple */[
                              /* :: */[
                                match[0],
                                acc1
                              ],
                              acc2,
                              acc3
                            ];
                  case 1 : 
                      return /* tuple */[
                              acc1,
                              acc2,
                              /* :: */[
                                match[0],
                                acc3
                              ]
                            ];
                  case 2 : 
                      return /* tuple */[
                              acc1,
                              /* :: */[
                                match[0],
                                acc2
                              ],
                              acc3
                            ];
                  
                }
            case 1 : 
            case 2 : 
                return acc;
            
          }
        }), d[/* definitions */0], /* tuple */[
        /* [] */0,
        /* [] */0,
        /* [] */0
      ]);
  var match = ops[0];
  if (match) {
    if (match[1]) {
      return undefined;
    } else {
      return /* record */[
              /* schema */match[0],
              /* directives */ops[1],
              /* types */ops[2]
            ];
    }
  } else {
    var tps = ops[2];
    var ops$1 = List.fold_right((function (op, param) {
            var s = param[2];
            var m = param[1];
            var q = param[0];
            if (op.tag === 1) {
              var op$1 = op[0];
              var match = op$1[/* name */1];
              switch (match) {
                case "Mutation" : 
                    return /* tuple */[
                            q,
                            /* record */[
                              /* operation : Mutation */1,
                              /* tpe */op$1[/* name */1]
                            ],
                            s
                          ];
                case "Query" : 
                    return /* tuple */[
                            /* record */[
                              /* operation : Query */0,
                              /* tpe */op$1[/* name */1]
                            ],
                            m,
                            s
                          ];
                case "Subscription" : 
                    return /* tuple */[
                            q,
                            m,
                            /* record */[
                              /* operation : Subscription */2,
                              /* tpe */op$1[/* name */1]
                            ]
                          ];
                default:
                  return /* tuple */[
                          q,
                          m,
                          s
                        ];
              }
            } else {
              return /* tuple */[
                      q,
                      m,
                      s
                    ];
            }
          }), tps, /* tuple */[
          undefined,
          undefined,
          undefined
        ]);
    var match$1 = ops$1[0];
    if (match$1 !== undefined) {
      return /* record */[
              /* schema : record */[
                /* directives : [] */0,
                /* operations */Utils.flatten(/* :: */[
                      match$1,
                      /* :: */[
                        ops$1[1],
                        /* :: */[
                          ops$1[2],
                          /* [] */0
                        ]
                      ]
                    ])
              ],
              /* directives */ops[1],
              /* types */tps
            ];
    } else {
      return undefined;
    }
  }
}

exports.vc_to_v = vc_to_v;
exports.executable_directive_location_to_name = executable_directive_location_to_name;
exports.type_system_directive_location_to_name = type_system_directive_location_to_name;
exports.map_a = map_a;
exports.a_to_of = a_to_of;
exports.document_to_executable_document = document_to_executable_document;
exports.document_to_schema_document = document_to_schema_document;
/* No side effect */
