// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("Gql_parser.MenhirBasics.Error");

function flat(l) {
  if (l !== undefined) {
    return l;
  } else {
    return /* [] */0;
  }
}

function _menhir_goto_rev_directive_locations(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            238,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 20 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$1[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 2 : 
                  return _menhir_run387(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 3 : 
                  return _menhir_run388(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 4 : 
                  return _menhir_run389(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 5 : 
                  return _menhir_run390(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 6 : 
                  return _menhir_run391(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 7 : 
                  return _menhir_run392(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 8 : 
                  return _menhir_run393(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 9 : 
                  return _menhir_run394(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 10 : 
                  return _menhir_run395(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 11 : 
                  return _menhir_run396(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 12 : 
                  return _menhir_run397(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 39 : 
                  return _menhir_run398(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 40 : 
                  return _menhir_run399(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 41 : 
                  return _menhir_run400(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 42 : 
                  return _menhir_run401(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 43 : 
                  return _menhir_run402(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 44 : 
                  return _menhir_run403(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 45 : 
                  return _menhir_run404(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
              case 0 : 
              case 1 : 
              case 13 : 
              case 14 : 
              case 15 : 
              case 16 : 
              case 17 : 
              case 18 : 
              case 19 : 
              case 20 : 
              case 21 : 
              case 22 : 
              case 23 : 
              case 24 : 
              case 25 : 
              case 26 : 
              case 27 : 
              case 28 : 
              case 29 : 
              case 30 : 
              case 31 : 
              case 32 : 
              case 33 : 
              case 34 : 
              case 35 : 
              case 36 : 
              case 37 : 
              case 38 : 
              case 46 : 
              case 47 : 
              case 48 : 
              case 49 : 
              case 50 : 
                  exit$1 = 3;
                  break;
              
            }
          } else {
            exit$1 = 3;
          }
          if (exit$1 === 3) {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      284,
                      12
                    ]
                  ];
            }
            _menhir_env$1[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState386 */9);
          }
          break;
      case 0 : 
      case 1 : 
      case 15 : 
      case 16 : 
      case 21 : 
      case 22 : 
      case 23 : 
      case 28 : 
      case 29 : 
      case 30 : 
      case 32 : 
      case 34 : 
      case 37 : 
      case 38 : 
      case 47 : 
          exit = 2;
          break;
      default:
        exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
      case 4 : 
          exit = 2;
          break;
      default:
        exit = 1;
    }
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  336,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    case 2 : 
        var _v$1 = List.rev(_v);
        var match = _menhir_stack[0];
        var match$1 = match[0];
        var _v_000 = /* description */match$1[2];
        var _v_001 = /* name */match[2];
        var _v_002 = /* arguments */flat(_menhir_stack[2]);
        var _v$2 = /* record */[
          _v_000,
          _v_001,
          _v_002,
          /* locations */_v$1
        ];
        var _v$3 = /* DirectiveDefinition */Block.__(2, [_v$2]);
        return _menhir_goto_type_system_definition(_menhir_env, match$1[0], match$1[1], _v$3);
    
  }
}

function _menhir_goto_enum_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  if (_menhir_s !== 34) {
    if (_menhir_s !== 60) {
      if (_menhir_s >= 93) {
        switch (_menhir_s - 93 | 0) {
          case 0 : 
          case 2 : 
          case 5 : 
          case 6 : 
              exit = 2;
              break;
          case 19 : 
          case 20 : 
          case 23 : 
          case 24 : 
              exit = 1;
              break;
          case 1 : 
          case 3 : 
          case 4 : 
          case 7 : 
          case 8 : 
          case 9 : 
          case 10 : 
          case 11 : 
          case 12 : 
          case 13 : 
          case 14 : 
          case 15 : 
          case 16 : 
          case 17 : 
          case 18 : 
          case 21 : 
          case 22 : 
          case 25 : 
          case 26 : 
          case 27 : 
          case 28 : 
              return _menhir_fail(/* () */0);
          
        }
      } else {
        return _menhir_fail(/* () */0);
      }
    } else {
      exit = 1;
    }
  } else {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              2720,
              10
            ]
          ];
    }
    var _tok = _menhir_env[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 49 : 
            return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState332 */33);
        case 13 : 
        case 14 : 
        case 17 : 
        case 18 : 
        case 20 : 
        case 25 : 
        case 26 : 
        case 27 : 
        case 28 : 
        case 33 : 
        case 35 : 
        case 36 : 
        case 37 : 
        case 46 : 
        case 48 : 
        case 50 : 
            exit$1 = 3;
            break;
        default:
          return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState332 */33);
      }
    } else {
      switch (_tok.tag | 0) {
        case 2 : 
        case 3 : 
            exit$1 = 3;
            break;
        default:
          return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState332 */33);
      }
    }
    if (exit$1 === 3) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                2728,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState332 */33);
    }
    
  }
  switch (exit) {
    case 1 : 
        var v = /* EnumValue */Block.__(4, [_v]);
        return _menhir_goto_value(_menhir_env, _menhir_stack, _menhir_s, v);
    case 2 : 
        var _v$1 = /* EnumValue */Block.__(5, [_v]);
        return _menhir_goto_value_nc(_menhir_env, _menhir_stack, _menhir_s, _v$1);
    
  }
}

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env[/* _menhir_lexer */0];
  var lexbuf = _menhir_env[/* _menhir_lexbuf */1];
  var _tok = Curry._1(lexer, lexbuf);
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token */_tok,
          /* _menhir_error */false
        ];
}

function _menhir_run3(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              9934,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState3 */119);
  }
  
}

function _menhir_errorcase(_menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var exit = 0;
    if (_menhir_s >= 54) {
      var switcher = _menhir_s - 55 | 0;
      if (switcher > 65 || switcher < 0) {
        if (switcher >= 66) {
          throw $$Error;
        } else {
          exit = 1;
        }
      } else if (switcher !== 63) {
        __menhir_s = _menhir_stack[1];
        __menhir_stack = _menhir_stack[0];
        continue ;
      } else {
        throw $$Error;
      }
    } else if (_menhir_s !== 2) {
      if (_menhir_s !== 6) {
        __menhir_s = _menhir_stack[1];
        __menhir_stack = _menhir_stack[0];
        continue ;
      } else {
        throw $$Error;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var match = _menhir_stack[0];
      __menhir_s = match[1];
      __menhir_stack = match[0];
      continue ;
    }
    
  };
}

function _menhir_reduce225(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_directives_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_type_system_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* TypeSystemExtension */Block.__(1, [_v]);
  return _menhir_goto_definition(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run147(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              6131,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState147 */104);
  }
  
}

function _menhir_run159(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "QUERY");
}

function _menhir_run158(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "SUBSCRIPTION");
}

function _menhir_run155(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "false");
}

function _menhir_run162(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "FRAGMENT_SPREAD");
}

function _menhir_run136(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "INPUT_FIELD_DEFINITION");
}

function _menhir_run135(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "INPUT_OBJECT");
}

function _menhir_run131(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "SCHEMA");
}

function _menhir_run140(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "ARGUMENT_DEFINITION");
}

function _menhir_run128(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "union");
}

function _menhir_run157(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "enum");
}

function _menhir_run145(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "query");
}

function _menhir_run138(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "ENUM_VALUE");
}

function _menhir_run146(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "mutation");
}

function _menhir_run153(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "implements");
}

function _menhir_run129(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "type");
}

function _menhir_run152(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "input");
}

function _menhir_run141(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "true");
}

function _menhir_run142(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "schema");
}

function _menhir_run154(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "fragment");
}

function _menhir_run160(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "MUTATION");
}

function _menhir_run144(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "subscription");
}

function _menhir_run143(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "scalar");
}

function _menhir_run139(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "ENUM");
}

function _menhir_run165(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "directive");
}

function _menhir_run133(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "OBJECT");
}

function _menhir_run149(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "null");
}

function _menhir_run130(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "UNION");
}

function _menhir_run150(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, _v);
}

function _menhir_run161(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "INLINE_FRAGMENT");
}

function _menhir_run137(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "FIELD_DEFINITION");
}

function _menhir_run164(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "FIELD");
}

function _menhir_goto_option_type_condition_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            6038,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 28) {
      if (_tok !== 49) {
        exit = 1;
      } else {
        return _menhir_run168(_menhir_env, _menhir_stack$1, /* MenhirState167 */103);
      }
    } else {
      return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState167 */103);
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              6046,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState167 */103);
  }
  
}

function _menhir_run132(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "SCALAR");
}

function _menhir_run163(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "FRAGMENT_DEFINITION");
}

function _menhir_run156(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "extend");
}

function _menhir_run151(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "interface");
}

function _menhir_run134(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_fragment_name(_menhir_env$1, _menhir_stack, _menhir_s, "INTERFACE");
}

function _menhir_goto_name(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  switch (_menhir_s) {
    case 7 : 
        var _v$1 = _v;
        return _menhir_goto_option_name_(_menhir_env, _menhir_stack, _menhir_s, _v$1);
    case 12 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7454,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number") {
          if (_tok !== 24) {
            if (_tok !== 27) {
              exit$1 = 7;
            } else {
              return _menhir_run254(_menhir_env, _menhir_stack$1, /* MenhirState382 */11);
            }
          } else {
            return _menhir_reduce217(_menhir_env, _menhir_stack$1, /* MenhirState382 */11);
          }
        } else {
          exit$1 = 7;
        }
        if (exit$1 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7462,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState382 */11);
        }
        break;
    case 15 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7440,
                  10
                ]
              ];
        }
        var _tok$1 = _menhir_env[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$1 === "number") {
          if (_tok$1 !== 28) {
            if (_tok$1 !== 49) {
              exit$2 = 7;
            } else {
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState377 */14);
            }
          } else {
            return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState377 */14);
          }
        } else {
          exit$2 = 7;
        }
        if (exit$2 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7448,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState377 */14);
        }
        break;
    case 18 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7426,
                  10
                ]
              ];
        }
        var _tok$2 = _menhir_env[/* _menhir_token */2];
        var exit$3 = 0;
        if (typeof _tok$2 === "number") {
          if (_tok$2 !== 28) {
            if (_tok$2 !== 49) {
              exit$3 = 7;
            } else {
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState373 */17);
            }
          } else {
            return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState373 */17);
          }
        } else {
          exit$3 = 7;
        }
        if (exit$3 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7434,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState373 */17);
        }
        break;
    case 21 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7412,
                  10
                ]
              ];
        }
        var _tok$3 = _menhir_env[/* _menhir_token */2];
        var exit$4 = 0;
        if (typeof _tok$3 === "number") {
          if (_tok$3 !== 28) {
            if (_tok$3 !== 49) {
              exit$4 = 7;
            } else {
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState369 */20);
            }
          } else {
            return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState369 */20);
          }
        } else {
          exit$4 = 7;
        }
        if (exit$4 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7420,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState369 */20);
        }
        break;
    case 23 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7398,
                  10
                ]
              ];
        }
        var _tok$4 = _menhir_env[/* _menhir_token */2];
        var exit$5 = 0;
        if (typeof _tok$4 === "number") {
          switch (_tok$4) {
            case 0 : 
            case 1 : 
            case 15 : 
            case 16 : 
            case 21 : 
            case 22 : 
            case 23 : 
            case 28 : 
            case 29 : 
            case 30 : 
            case 32 : 
            case 34 : 
            case 37 : 
            case 38 : 
            case 47 : 
                return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState366 */22);
            case 49 : 
                return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState366 */22);
            default:
              exit$5 = 7;
          }
        } else {
          switch (_tok$4.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState366 */22);
            default:
              exit$5 = 7;
          }
        }
        if (exit$5 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7406,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState366 */22);
        }
        break;
    case 27 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7376,
                  10
                ]
              ];
        }
        var _tok$5 = _menhir_env[/* _menhir_token */2];
        var exit$6 = 0;
        if (typeof _tok$5 === "number") {
          var switcher = _tok$5 - 29 | 0;
          if (switcher > 19 || switcher < 0) {
            if ((switcher + 1 >>> 0) > 21) {
              exit$6 = 7;
            } else {
              return _menhir_goto_option_implements_interfaces_(_menhir_env, _menhir_stack$1, /* MenhirState360 */26, undefined);
            }
          } else if (switcher !== 2) {
            exit$6 = 7;
          } else {
            return _menhir_run286(_menhir_env, _menhir_stack$1, /* MenhirState360 */26);
          }
        } else {
          exit$6 = 7;
        }
        if (exit$6 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7392,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState360 */26);
        }
        break;
    case 30 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7362,
                  10
                ]
              ];
        }
        var _tok$6 = _menhir_env[/* _menhir_token */2];
        var exit$7 = 0;
        if (typeof _tok$6 === "number") {
          switch (_tok$6) {
            case 0 : 
            case 1 : 
            case 15 : 
            case 16 : 
            case 21 : 
            case 22 : 
            case 23 : 
            case 28 : 
            case 29 : 
            case 30 : 
            case 32 : 
            case 34 : 
            case 36 : 
            case 37 : 
            case 38 : 
            case 47 : 
                return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState355 */29);
            case 49 : 
                return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState355 */29);
            default:
              exit$7 = 7;
          }
        } else {
          switch (_tok$6.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState355 */29);
            default:
              exit$7 = 7;
          }
        }
        if (exit$7 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7370,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState355 */29);
        }
        break;
    case 37 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7348,
                  10
                ]
              ];
        }
        var _tok$7 = _menhir_env[/* _menhir_token */2];
        var exit$8 = 0;
        if (typeof _tok$7 === "number") {
          if (_tok$7 !== 28) {
            if (_tok$7 !== 49) {
              exit$8 = 7;
            } else {
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState329 */36);
            }
          } else {
            return _menhir_run330(_menhir_env, _menhir_stack$1, /* MenhirState329 */36);
          }
        } else {
          exit$8 = 7;
        }
        if (exit$8 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7356,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState329 */36);
        }
        break;
    case 41 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7334,
                  10
                ]
              ];
        }
        var _tok$8 = _menhir_env[/* _menhir_token */2];
        var exit$9 = 0;
        if (typeof _tok$8 === "number") {
          if (_tok$8 !== 28) {
            if (_tok$8 !== 49) {
              exit$9 = 7;
            } else {
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState320 */40);
            }
          } else {
            return _menhir_run321(_menhir_env, _menhir_stack$1, /* MenhirState320 */40);
          }
        } else {
          exit$9 = 7;
        }
        if (exit$9 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7342,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState320 */40);
        }
        break;
    case 44 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7320,
                  10
                ]
              ];
        }
        var _tok$9 = _menhir_env[/* _menhir_token */2];
        var exit$10 = 0;
        if (typeof _tok$9 === "number") {
          if (_tok$9 !== 28) {
            if (_tok$9 !== 49) {
              exit$10 = 7;
            } else {
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState314 */43);
            }
          } else {
            return _menhir_run250(_menhir_env, _menhir_stack$1, /* MenhirState314 */43);
          }
        } else {
          exit$10 = 7;
        }
        if (exit$10 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7328,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState314 */43);
        }
        break;
    case 46 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7306,
                  10
                ]
              ];
        }
        var _tok$10 = _menhir_env[/* _menhir_token */2];
        var exit$11 = 0;
        if (typeof _tok$10 === "number") {
          switch (_tok$10) {
            case 0 : 
            case 1 : 
            case 15 : 
            case 16 : 
            case 21 : 
            case 22 : 
            case 23 : 
            case 28 : 
            case 29 : 
            case 30 : 
            case 32 : 
            case 34 : 
            case 37 : 
            case 38 : 
            case 47 : 
                return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState311 */45);
            case 49 : 
                return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState311 */45);
            default:
              exit$11 = 7;
          }
        } else {
          switch (_tok$10.tag | 0) {
            case 0 : 
            case 4 : 
                return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState311 */45);
            default:
              exit$11 = 7;
          }
        }
        if (exit$11 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7314,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState311 */45);
        }
        break;
    case 64 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7207,
                  10
                ]
              ];
        }
        var _tok$11 = _menhir_env[/* _menhir_token */2];
        var exit$12 = 0;
        if (typeof _tok$11 === "number" && _tok$11 === 48) {
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$12 = _menhir_env$1[/* _menhir_token */2];
          var exit$13 = 0;
          if (typeof _tok$12 === "number") {
            switch (_tok$12) {
              case 0 : 
                  return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 1 : 
                  return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 2 : 
                  return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 3 : 
                  return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 4 : 
                  return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 5 : 
                  return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 6 : 
                  return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 7 : 
                  return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 8 : 
                  return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 9 : 
                  return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 10 : 
                  return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 11 : 
                  return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 12 : 
                  return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 13 : 
                  return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 15 : 
                  return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 16 : 
                  return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 21 : 
                  return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 22 : 
                  return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 23 : 
                  return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 24 : 
                  return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 25 : 
                  return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 26 : 
                  return _menhir_run258(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 29 : 
                  return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 30 : 
                  return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 31 : 
                  return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 32 : 
                  return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 33 : 
                  return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 34 : 
                  return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 38 : 
                  return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 39 : 
                  return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 40 : 
                  return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 41 : 
                  return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 42 : 
                  return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 43 : 
                  return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 44 : 
                  return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 45 : 
                  return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              case 47 : 
                  return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
              default:
                exit$13 = 8;
            }
          } else if (_tok$12.tag === 1) {
            return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63, _tok$12[0]);
          } else {
            exit$13 = 8;
          }
          if (exit$13 === 8) {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      7293,
                      16
                    ]
                  ];
            }
            _menhir_env$1[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState257 */63);
          }
          
        } else {
          exit$12 = 7;
        }
        if (exit$12 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7297,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 67 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7193,
                  10
                ]
              ];
        }
        var _tok$13 = _menhir_env[/* _menhir_token */2];
        var exit$14 = 0;
        if (typeof _tok$13 === "number") {
          if (_tok$13 !== 27) {
            if (_tok$13 !== 48) {
              exit$14 = 7;
            } else {
              return _menhir_reduce217(_menhir_env, _menhir_stack$1, /* MenhirState253 */66);
            }
          } else {
            return _menhir_run254(_menhir_env, _menhir_stack$1, /* MenhirState253 */66);
          }
        } else {
          exit$14 = 7;
        }
        if (exit$14 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7201,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState253 */66);
        }
        break;
    case 70 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7177,
                  10
                ]
              ];
        }
        var _tok$14 = _menhir_env[/* _menhir_token */2];
        var exit$15 = 0;
        if (typeof _tok$14 === "number") {
          if (_tok$14 !== 28) {
            if (_tok$14 !== 31) {
              if (_tok$14 !== 49) {
                exit$15 = 7;
              } else {
                return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState249 */69);
              }
            } else {
              return _menhir_run286(_menhir_env, _menhir_stack$1, /* MenhirState249 */69);
            }
          } else {
            return _menhir_run250(_menhir_env, _menhir_stack$1, /* MenhirState249 */69);
          }
        } else {
          exit$15 = 7;
        }
        if (exit$15 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7187,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState249 */69);
        }
        break;
    case 76 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7163,
                  10
                ]
              ];
        }
        var _tok$15 = _menhir_env[/* _menhir_token */2];
        var exit$16 = 0;
        if (typeof _tok$15 === "number") {
          if (_tok$15 !== 36) {
            if (_tok$15 !== 49) {
              exit$16 = 7;
            } else {
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState237 */75);
            }
          } else {
            return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState237 */75);
          }
        } else {
          exit$16 = 7;
        }
        if (exit$16 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7171,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState237 */75);
        }
        break;
    case 86 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7149,
                  10
                ]
              ];
        }
        var _tok$16 = _menhir_env[/* _menhir_token */2];
        var exit$17 = 0;
        if (typeof _tok$16 === "number") {
          switch (_tok$16) {
            case 27 : 
                return _menhir_run170(_menhir_env, _menhir_stack$1, /* MenhirState217 */85);
            case 17 : 
            case 18 : 
            case 20 : 
            case 26 : 
            case 35 : 
            case 36 : 
            case 37 : 
            case 46 : 
            case 48 : 
            case 50 : 
                exit$17 = 7;
                break;
            default:
              return _menhir_reduce219(_menhir_env, _menhir_stack$1, /* MenhirState217 */85);
          }
        } else {
          switch (_tok$16.tag | 0) {
            case 0 : 
            case 2 : 
            case 3 : 
            case 4 : 
                exit$17 = 7;
                break;
            default:
              return _menhir_reduce219(_menhir_env, _menhir_stack$1, /* MenhirState217 */85);
          }
        }
        if (exit$17 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7157,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState217 */85);
        }
        break;
    case 94 : 
        var _menhir_s$1 = _menhir_stack[1];
        var _menhir_stack$2 = _menhir_stack[0];
        var _menhir_stack$3 = /* tuple */[
          _menhir_stack$2,
          _menhir_s$1,
          _v
        ];
        var exit$18 = 0;
        if (_menhir_s$1 >= 7) {
          switch (_menhir_s$1) {
            case 94 : 
            case 96 : 
            case 97 : 
                return _menhir_fail(/* () */0);
            case 93 : 
            case 95 : 
            case 98 : 
            case 99 : 
                exit$18 = 7;
                break;
            default:
              return _menhir_fail(/* () */0);
          }
        } else if (_menhir_s$1 >= 5) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6961,
                    14
                  ]
                ];
          }
          var _tok$17 = _menhir_env[/* _menhir_token */2];
          var exit$19 = 0;
          if (typeof _tok$17 === "number") {
            switch (_tok$17) {
              case 0 : 
                  return _menhir_run4(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 1 : 
                  return _menhir_run5(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 2 : 
                  return _menhir_run6(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 3 : 
                  return _menhir_run7(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 4 : 
                  return _menhir_run8(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 5 : 
                  return _menhir_run9(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 6 : 
                  return _menhir_run10(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 7 : 
                  return _menhir_run11(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 8 : 
                  return _menhir_run12(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 9 : 
                  return _menhir_run13(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 10 : 
                  return _menhir_run14(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 11 : 
                  return _menhir_run15(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 12 : 
                  return _menhir_run16(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 13 : 
                  return _menhir_run17(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 15 : 
                  return _menhir_run18(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 16 : 
                  return _menhir_run19(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 21 : 
                  return _menhir_run20(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 22 : 
                  return _menhir_run21(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 23 : 
                  return _menhir_run22(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 24 : 
                  return _menhir_run23(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 25 : 
                  return _menhir_run24(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 26 : 
                  return _menhir_run258(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 29 : 
                  return _menhir_run26(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 30 : 
                  return _menhir_run27(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 31 : 
                  return _menhir_run28(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 32 : 
                  return _menhir_run29(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 33 : 
                  return _menhir_run30(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 34 : 
                  return _menhir_run31(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 38 : 
                  return _menhir_run32(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 39 : 
                  return _menhir_run33(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 40 : 
                  return _menhir_run34(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 41 : 
                  return _menhir_run35(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 42 : 
                  return _menhir_run36(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 43 : 
                  return _menhir_run37(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 44 : 
                  return _menhir_run38(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 45 : 
                  return _menhir_run39(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              case 47 : 
                  return _menhir_run40(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
              default:
                exit$19 = 8;
            }
          } else if (_tok$17.tag === 1) {
            return _menhir_run25(_menhir_env, _menhir_stack$3, /* MenhirState415 */4, _tok$17[0]);
          } else {
            exit$19 = 8;
          }
          if (exit$19 === 8) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      7041,
                      16
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$3, /* MenhirState415 */4);
          }
          
        } else {
          return _menhir_fail(/* () */0);
        }
        if (exit$18 === 7) {
          var _v$2 = /* Variable */Block.__(0, [_v]);
          return _menhir_goto_value_nc(_menhir_env, _menhir_stack$2, _menhir_s$1, _v$2);
        }
        break;
    case 96 : 
    case 97 : 
        exit = 5;
        break;
    case 92 : 
    case 100 : 
        exit = 4;
        break;
    case 102 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  6695,
                  10
                ]
              ];
        }
        var _tok$18 = _menhir_env[/* _menhir_token */2];
        var exit$20 = 0;
        if (typeof _tok$18 === "number") {
          switch (_tok$18) {
            case 27 : 
                return _menhir_run170(_menhir_env, _menhir_stack$1, /* MenhirState169 */101);
            case 17 : 
            case 18 : 
            case 20 : 
            case 26 : 
            case 35 : 
            case 36 : 
            case 37 : 
            case 46 : 
            case 48 : 
            case 50 : 
                exit$20 = 7;
                break;
            default:
              return _menhir_reduce219(_menhir_env, _menhir_stack$1, /* MenhirState169 */101);
          }
        } else {
          switch (_tok$18.tag | 0) {
            case 0 : 
            case 2 : 
            case 3 : 
            case 4 : 
                exit$20 = 7;
                break;
            default:
              return _menhir_reduce219(_menhir_env, _menhir_stack$1, /* MenhirState169 */101);
          }
        }
        if (exit$20 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6703,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState169 */101);
        }
        break;
    case 88 : 
    case 106 : 
        exit = 6;
        break;
    case 4 : 
    case 53 : 
    case 54 : 
    case 57 : 
    case 62 : 
    case 63 : 
    case 71 : 
    case 72 : 
    case 104 : 
    case 108 : 
        exit = 3;
        break;
    case 114 : 
    case 115 : 
        exit = 2;
        break;
    case 111 : 
    case 118 : 
        exit = 1;
        break;
    case 119 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  6175,
                  10
                ]
              ];
        }
        var _tok$19 = _menhir_env[/* _menhir_token */2];
        var exit$21 = 0;
        if (typeof _tok$19 === "number") {
          switch (_tok$19) {
            case 27 : 
                var _menhir_env$2 = _menhir_discard(_menhir_env);
                var _tok$20 = _menhir_env$2[/* _menhir_token */2];
                var exit$22 = 0;
                if (typeof _tok$20 === "number") {
                  switch (_tok$20) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 1 : 
                        return _menhir_run5(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 2 : 
                        return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 3 : 
                        return _menhir_run7(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 4 : 
                        return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 5 : 
                        return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 6 : 
                        return _menhir_run10(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 7 : 
                        return _menhir_run11(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 8 : 
                        return _menhir_run12(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 9 : 
                        return _menhir_run13(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 10 : 
                        return _menhir_run14(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 11 : 
                        return _menhir_run15(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 12 : 
                        return _menhir_run16(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 13 : 
                        return _menhir_run17(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 15 : 
                        return _menhir_run18(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 16 : 
                        return _menhir_run19(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 21 : 
                        return _menhir_run20(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 22 : 
                        return _menhir_run21(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 23 : 
                        return _menhir_run22(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 24 : 
                        return _menhir_run23(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 25 : 
                        return _menhir_run24(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 29 : 
                        return _menhir_run26(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 30 : 
                        return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 31 : 
                        return _menhir_run28(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 32 : 
                        return _menhir_run29(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 33 : 
                        return _menhir_run30(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 34 : 
                        return _menhir_run31(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 38 : 
                        return _menhir_run32(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 39 : 
                        return _menhir_run33(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 40 : 
                        return _menhir_run34(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 41 : 
                        return _menhir_run35(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 42 : 
                        return _menhir_run36(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 43 : 
                        return _menhir_run37(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 44 : 
                        return _menhir_run38(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 45 : 
                        return _menhir_run39(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    case 47 : 
                        return _menhir_run40(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                    default:
                      exit$22 = 8;
                  }
                } else if (_tok$20.tag === 1) {
                  return _menhir_run25(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118, _tok$20[0]);
                } else {
                  exit$22 = 8;
                }
                if (exit$22 === 8) {
                  if (_menhir_env$2[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            6259,
                            16
                          ]
                        ];
                  }
                  _menhir_env$2[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */118);
                }
                break;
            case 14 : 
            case 17 : 
            case 20 : 
            case 26 : 
            case 35 : 
            case 46 : 
            case 48 : 
            case 50 : 
                exit$21 = 7;
                break;
            default:
              return _menhir_goto_option_arguments_(_menhir_env, _menhir_stack$1, undefined);
          }
        } else {
          switch (_tok$19.tag | 0) {
            case 2 : 
            case 3 : 
                exit$21 = 7;
                break;
            default:
              return _menhir_goto_option_arguments_(_menhir_env, _menhir_stack$1, undefined);
          }
        }
        if (exit$21 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6272,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 0 : 
    case 1 : 
    case 2 : 
    case 3 : 
    case 5 : 
    case 6 : 
    case 8 : 
    case 9 : 
    case 10 : 
    case 11 : 
    case 13 : 
    case 14 : 
    case 16 : 
    case 17 : 
    case 19 : 
    case 20 : 
    case 22 : 
    case 24 : 
    case 25 : 
    case 26 : 
    case 28 : 
    case 29 : 
    case 31 : 
    case 32 : 
    case 33 : 
    case 34 : 
    case 35 : 
    case 36 : 
    case 38 : 
    case 39 : 
    case 40 : 
    case 42 : 
    case 43 : 
    case 45 : 
    case 47 : 
    case 48 : 
    case 49 : 
    case 50 : 
    case 51 : 
    case 52 : 
    case 55 : 
    case 56 : 
    case 58 : 
    case 59 : 
    case 60 : 
    case 61 : 
    case 65 : 
    case 66 : 
    case 68 : 
    case 69 : 
    case 73 : 
    case 74 : 
    case 75 : 
    case 77 : 
    case 78 : 
    case 79 : 
    case 80 : 
    case 81 : 
    case 82 : 
    case 83 : 
    case 84 : 
    case 85 : 
    case 87 : 
    case 89 : 
    case 90 : 
    case 91 : 
    case 93 : 
    case 95 : 
    case 98 : 
    case 99 : 
    case 101 : 
    case 103 : 
    case 105 : 
    case 107 : 
    case 109 : 
    case 110 : 
    case 112 : 
    case 113 : 
    case 116 : 
    case 117 : 
    case 120 : 
    case 121 : 
        return _menhir_fail(/* () */0);
    
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  6281,
                  10
                ]
              ];
        }
        var _tok$21 = _menhir_env[/* _menhir_token */2];
        var exit$23 = 0;
        if (typeof _tok$21 === "number" && _tok$21 === 48) {
          var _menhir_env$3 = _menhir_discard(_menhir_env);
          var _tok$22 = _menhir_env$3[/* _menhir_token */2];
          if (typeof _tok$22 === "number") {
            switch (_tok$22) {
              case 0 : 
                  return _menhir_run47(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 1 : 
                  return _menhir_run48(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 2 : 
                  return _menhir_run49(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 3 : 
                  return _menhir_run50(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 4 : 
                  return _menhir_run51(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 5 : 
                  return _menhir_run52(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 6 : 
                  return _menhir_run53(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 7 : 
                  return _menhir_run54(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 8 : 
                  return _menhir_run55(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 9 : 
                  return _menhir_run56(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 10 : 
                  return _menhir_run57(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 11 : 
                  return _menhir_run58(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 12 : 
                  return _menhir_run59(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 13 : 
                  return _menhir_run60(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 15 : 
                  return _menhir_run61(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 16 : 
                  return _menhir_run62(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 21 : 
                  return _menhir_run63(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 22 : 
                  return _menhir_run64(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 23 : 
                  return _menhir_run65(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 24 : 
                  return _menhir_run66(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 25 : 
                  return _menhir_run67(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 26 : 
                  return _menhir_run69(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 28 : 
                  return _menhir_run70(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 29 : 
                  return _menhir_run74(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 30 : 
                  return _menhir_run76(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 31 : 
                  return _menhir_run77(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 32 : 
                  return _menhir_run78(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 33 : 
                  return _menhir_run80(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 34 : 
                  return _menhir_run81(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 38 : 
                  return _menhir_run82(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 39 : 
                  return _menhir_run83(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 40 : 
                  return _menhir_run84(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 41 : 
                  return _menhir_run85(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 42 : 
                  return _menhir_run86(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 43 : 
                  return _menhir_run87(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 44 : 
                  return _menhir_run88(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 45 : 
                  return _menhir_run89(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              case 47 : 
                  return _menhir_run90(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
              default:
                if (_menhir_env$3[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          6377,
                          16
                        ]
                      ];
                }
                _menhir_env$3[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117);
            }
          } else {
            switch (_tok$22.tag | 0) {
              case 0 : 
                  return _menhir_run1(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117, _tok$22[0]);
              case 1 : 
                  return _menhir_run68(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117, _tok$22[0]);
              case 2 : 
                  return _menhir_run75(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117, _tok$22[0]);
              case 3 : 
                  return _menhir_run79(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117, _tok$22[0]);
              case 4 : 
                  return _menhir_run91(_menhir_env$3, _menhir_stack$1, /* MenhirState46 */117, _tok$22[0]);
              
            }
          }
        } else {
          exit$23 = 7;
        }
        if (exit$23 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6381,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 2 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  6390,
                  10
                ]
              ];
        }
        var _tok$23 = _menhir_env[/* _menhir_token */2];
        var exit$24 = 0;
        if (typeof _tok$23 === "number" && _tok$23 === 48) {
          var _menhir_env$4 = _menhir_discard(_menhir_env);
          var _tok$24 = _menhir_env$4[/* _menhir_token */2];
          if (typeof _tok$24 === "number") {
            switch (_tok$24) {
              case 0 : 
                  return _menhir_run47(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 1 : 
                  return _menhir_run48(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 2 : 
                  return _menhir_run49(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 3 : 
                  return _menhir_run50(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 4 : 
                  return _menhir_run51(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 5 : 
                  return _menhir_run52(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 6 : 
                  return _menhir_run53(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 7 : 
                  return _menhir_run54(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 8 : 
                  return _menhir_run55(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 9 : 
                  return _menhir_run56(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 10 : 
                  return _menhir_run57(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 11 : 
                  return _menhir_run58(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 12 : 
                  return _menhir_run59(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 13 : 
                  return _menhir_run60(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 15 : 
                  return _menhir_run61(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 16 : 
                  return _menhir_run62(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 21 : 
                  return _menhir_run63(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 22 : 
                  return _menhir_run64(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 23 : 
                  return _menhir_run65(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 24 : 
                  return _menhir_run66(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 25 : 
                  return _menhir_run67(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 26 : 
                  return _menhir_run69(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 28 : 
                  return _menhir_run70(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 29 : 
                  return _menhir_run74(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 30 : 
                  return _menhir_run76(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 31 : 
                  return _menhir_run77(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 32 : 
                  return _menhir_run78(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 33 : 
                  return _menhir_run80(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 34 : 
                  return _menhir_run81(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 38 : 
                  return _menhir_run82(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 39 : 
                  return _menhir_run83(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 40 : 
                  return _menhir_run84(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 41 : 
                  return _menhir_run85(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 42 : 
                  return _menhir_run86(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 43 : 
                  return _menhir_run87(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 44 : 
                  return _menhir_run88(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 45 : 
                  return _menhir_run89(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              case 47 : 
                  return _menhir_run90(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
              default:
                if (_menhir_env$4[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          6486,
                          16
                        ]
                      ];
                }
                _menhir_env$4[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113);
            }
          } else {
            switch (_tok$24.tag | 0) {
              case 0 : 
                  return _menhir_run1(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113, _tok$24[0]);
              case 1 : 
                  return _menhir_run68(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113, _tok$24[0]);
              case 2 : 
                  return _menhir_run75(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113, _tok$24[0]);
              case 3 : 
                  return _menhir_run79(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113, _tok$24[0]);
              case 4 : 
                  return _menhir_run91(_menhir_env$4, _menhir_stack$1, /* MenhirState73 */113, _tok$24[0]);
              
            }
          }
        } else {
          exit$24 = 7;
        }
        if (exit$24 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6490,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 3 : 
        var exit$25 = 0;
        if (_menhir_s >= 73) {
          if (_menhir_s !== 104) {
            if (_menhir_s !== 108) {
              return _menhir_fail(/* () */0);
            } else {
              var _menhir_s$2 = _menhir_stack[1];
              var _menhir_stack$4 = _menhir_stack[0];
              var _v_000 = /* operation */_menhir_stack[2];
              var _v$3 = /* record */[
                _v_000,
                /* tpe */_v
              ];
              var _menhir_stack$5 = /* tuple */[
                _menhir_stack$4,
                _menhir_s$2,
                _v$3
              ];
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        6532,
                        14
                      ]
                    ];
              }
              var _tok$25 = _menhir_env[/* _menhir_token */2];
              var exit$26 = 0;
              if (typeof _tok$25 === "number") {
                switch (_tok$25) {
                  case 19 : 
                      var _v$4 = /* :: */[
                        _v$3,
                        /* [] */0
                      ];
                      var _menhir_env$5 = _menhir_env;
                      var __menhir_stack = _menhir_stack$4;
                      var __menhir_s = _menhir_s$2;
                      var __v = _v$4;
                      while(true) {
                        var _v$5 = __v;
                        var _menhir_s$3 = __menhir_s;
                        var _menhir_stack$6 = __menhir_stack;
                        var switcher$1 = _menhir_s$3 - 109 | 0;
                        if (switcher$1 === 0 || switcher$1 === 1) {
                          if (switcher$1 !== 0) {
                            if (_menhir_env$5[/* _menhir_error */3]) {
                              throw [
                                    Caml_builtin_exceptions.assert_failure,
                                    /* tuple */[
                                      "gql_parser.ml",
                                      4173,
                                      10
                                    ]
                                  ];
                            }
                            var _tok$26 = _menhir_env$5[/* _menhir_token */2];
                            var exit$27 = 0;
                            if (typeof _tok$26 === "number" && _tok$26 === 19) {
                              var _menhir_env$6 = _menhir_discard(_menhir_env$5);
                              var match = _menhir_stack$6[0];
                              var t_000 = /* directives */flat(_menhir_stack$6[2]);
                              var t = /* record */[
                                t_000,
                                /* operations */_v$5
                              ];
                              var _v$6 = /* SchemaDefinition */Block.__(0, [t]);
                              return _menhir_goto_type_system_definition(_menhir_env$6, match[0], match[1], _v$6);
                            } else {
                              exit$27 = 1;
                            }
                            if (exit$27 === 1) {
                              if (_menhir_env$5[/* _menhir_error */3]) {
                                throw [
                                      Caml_builtin_exceptions.assert_failure,
                                      /* tuple */[
                                        "gql_parser.ml",
                                        4210,
                                        12
                                      ]
                                    ];
                              }
                              _menhir_env$5[/* _menhir_error */3] = true;
                              return _menhir_errorcase(_menhir_env$5, _menhir_stack$6, _menhir_s$3);
                            }
                            
                          } else {
                            var _v_000$1 = _menhir_stack$6[2];
                            var _v$7 = /* :: */[
                              _v_000$1,
                              _v$5
                            ];
                            __v = _v$7;
                            __menhir_s = _menhir_stack$6[1];
                            __menhir_stack = _menhir_stack$6[0];
                            continue ;
                          }
                        } else if (switcher$1 !== -61) {
                          return _menhir_fail(/* () */0);
                        } else {
                          if (_menhir_env$5[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    4219,
                                    10
                                  ]
                                ];
                          }
                          var _tok$27 = _menhir_env$5[/* _menhir_token */2];
                          var exit$28 = 0;
                          if (typeof _tok$27 === "number" && _tok$27 === 19) {
                            var _menhir_env$7 = _menhir_discard(_menhir_env$5);
                            var _menhir_s$4 = _menhir_stack$6[1];
                            var _menhir_stack$7 = _menhir_stack$6[0];
                            switch (_menhir_s$4) {
                              case 47 : 
                                  var _v$8 = _v$5;
                                  return _menhir_goto_option_schema_extension_rest_(_menhir_env$7, _menhir_stack$7, _menhir_s$4, _v$8);
                              case 48 : 
                                  return _menhir_fail(/* () */0);
                              case 49 : 
                                  var t$1 = /* record */[
                                    /* directives : [] */0,
                                    /* operations */_v$5
                                  ];
                                  return _menhir_goto_schema_extension(_menhir_env$7, _menhir_stack$7[0], _menhir_stack$7[1], t$1);
                              default:
                                return _menhir_fail(/* () */0);
                            }
                          } else {
                            exit$28 = 1;
                          }
                          if (exit$28 === 1) {
                            if (_menhir_env$5[/* _menhir_error */3]) {
                              throw [
                                    Caml_builtin_exceptions.assert_failure,
                                    /* tuple */[
                                      "gql_parser.ml",
                                      4277,
                                      12
                                    ]
                                  ];
                            }
                            _menhir_env$5[/* _menhir_error */3] = true;
                            return _menhir_errorcase(_menhir_env$5, _menhir_stack$6, _menhir_s$3);
                          }
                          
                        }
                      };
                  case 20 : 
                      exit$26 = 8;
                      break;
                  case 21 : 
                      return _menhir_run111(_menhir_env, _menhir_stack$5, /* MenhirState114 */109);
                  case 22 : 
                      return _menhir_run112(_menhir_env, _menhir_stack$5, /* MenhirState114 */109);
                  case 23 : 
                      return _menhir_run113(_menhir_env, _menhir_stack$5, /* MenhirState114 */109);
                  default:
                    exit$26 = 8;
                }
              } else {
                exit$26 = 8;
              }
              if (exit$26 === 8) {
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          6552,
                          16
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack$5, /* MenhirState114 */109);
              }
              
            }
          } else {
            var _menhir_s$5 = _menhir_stack[1];
            var _menhir_stack$8 = _menhir_stack[0];
            var _menhir_stack$9 = /* tuple */[
              _menhir_stack$8,
              _menhir_s$5,
              _v
            ];
            if (_menhir_s$5 !== 79) {
              if (_menhir_s$5 !== 105) {
                return _menhir_fail(/* () */0);
              } else {
                var _v$9 = _v;
                return _menhir_goto_option_type_condition_(_menhir_env, _menhir_stack$8, _menhir_s$5, _v$9);
              }
            } else {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        6588,
                        18
                      ]
                    ];
              }
              var _tok$28 = _menhir_env[/* _menhir_token */2];
              var exit$29 = 0;
              if (typeof _tok$28 === "number") {
                if (_tok$28 !== 28) {
                  if (_tok$28 !== 49) {
                    exit$29 = 8;
                  } else {
                    return _menhir_run168(_menhir_env, _menhir_stack$9, /* MenhirState232 */78);
                  }
                } else {
                  return _menhir_reduce227(_menhir_env, _menhir_stack$9, /* MenhirState232 */78);
                }
              } else {
                exit$29 = 8;
              }
              if (exit$29 === 8) {
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          6596,
                          20
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack$9, /* MenhirState232 */78);
              }
              
            }
          }
        } else if (_menhir_s !== 4) {
          if (_menhir_s >= 53) {
            switch (_menhir_s - 53 | 0) {
              case 0 : 
                  var _v_001 = _menhir_stack[2];
                  var _v$10 = /* :: */[
                    _v,
                    _v_001
                  ];
                  return _menhir_goto_rev_implements_interfaces(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$10);
              case 1 : 
                  var match$1 = _menhir_stack[0];
                  var _v$11 = /* :: */[
                    _v,
                    /* [] */0
                  ];
                  return _menhir_goto_rev_implements_interfaces(_menhir_env, match$1[0], match$1[1], _v$11);
              case 4 : 
              case 9 : 
              case 10 : 
                  exit$25 = 7;
                  break;
              case 2 : 
              case 3 : 
              case 5 : 
              case 6 : 
              case 7 : 
              case 8 : 
              case 11 : 
              case 12 : 
              case 13 : 
              case 14 : 
              case 15 : 
              case 16 : 
              case 17 : 
                  return _menhir_fail(/* () */0);
              case 18 : 
                  var _v_001$1 = _menhir_stack[2];
                  var _v$12 = /* :: */[
                    _v,
                    _v_001$1
                  ];
                  return _menhir_goto_rev_union_member_types(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$12);
              case 19 : 
                  var match$2 = _menhir_stack[0];
                  var _v$13 = /* :: */[
                    _v,
                    /* [] */0
                  ];
                  return _menhir_goto_rev_union_member_types(_menhir_env, match$2[0], match$2[1], _v$13);
              
            }
          } else {
            return _menhir_fail(/* () */0);
          }
        } else {
          exit$25 = 7;
        }
        if (exit$25 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6630,
                    14
                  ]
                ];
          }
          var _tok$29 = _menhir_env[/* _menhir_token */2];
          var exit$30 = 0;
          if (typeof _tok$29 === "number") {
            switch (_tok$29) {
              case 35 : 
                  var _menhir_env$8 = _menhir_discard(_menhir_env);
                  var _v$14 = /* NamedType */Block.__(1, [_v]);
                  return _menhir_goto_non_null_type(_menhir_env$8, _menhir_stack, _menhir_s, _v$14);
              case 14 : 
              case 20 : 
              case 26 : 
              case 27 : 
              case 28 : 
              case 37 : 
              case 48 : 
              case 50 : 
                  exit$30 = 8;
                  break;
              default:
                exit$30 = 9;
            }
          } else {
            switch (_tok$29.tag | 0) {
              case 2 : 
              case 3 : 
                  exit$30 = 8;
                  break;
              default:
                exit$30 = 9;
            }
          }
          switch (exit$30) {
            case 8 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          6658,
                          16
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            case 9 : 
                var _v$15 = /* NamedType */Block.__(0, [_v]);
                return _menhir_goto_tpe(_menhir_env, _menhir_stack, _menhir_s, _v$15);
            
          }
        }
        break;
    case 4 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  6709,
                  10
                ]
              ];
        }
        var _tok$30 = _menhir_env[/* _menhir_token */2];
        var exit$31 = 0;
        if (typeof _tok$30 === "number" && _tok$30 === 48) {
          var _menhir_env$9 = _menhir_discard(_menhir_env);
          var _tok$31 = _menhir_env$9[/* _menhir_token */2];
          if (typeof _tok$31 === "number") {
            switch (_tok$31) {
              case 0 : 
                  return _menhir_run47(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 1 : 
                  return _menhir_run48(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 2 : 
                  return _menhir_run49(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 3 : 
                  return _menhir_run50(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 4 : 
                  return _menhir_run51(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 5 : 
                  return _menhir_run52(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 6 : 
                  return _menhir_run53(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 7 : 
                  return _menhir_run54(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 8 : 
                  return _menhir_run55(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 9 : 
                  return _menhir_run56(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 10 : 
                  return _menhir_run57(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 11 : 
                  return _menhir_run58(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 12 : 
                  return _menhir_run59(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 13 : 
                  return _menhir_run175(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 15 : 
                  return _menhir_run61(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 16 : 
                  return _menhir_run62(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 21 : 
                  return _menhir_run63(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 22 : 
                  return _menhir_run64(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 23 : 
                  return _menhir_run65(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 24 : 
                  return _menhir_run66(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 25 : 
                  return _menhir_run176(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 26 : 
                  return _menhir_run177(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 28 : 
                  return _menhir_run178(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 29 : 
                  return _menhir_run74(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 30 : 
                  return _menhir_run76(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 31 : 
                  return _menhir_run77(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 32 : 
                  return _menhir_run78(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 33 : 
                  return _menhir_run184(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 34 : 
                  return _menhir_run81(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 38 : 
                  return _menhir_run82(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 39 : 
                  return _menhir_run83(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 40 : 
                  return _menhir_run84(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 41 : 
                  return _menhir_run85(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 42 : 
                  return _menhir_run86(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 43 : 
                  return _menhir_run87(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 44 : 
                  return _menhir_run88(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 45 : 
                  return _menhir_run89(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 46 : 
                  return _menhir_run185(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              case 47 : 
                  return _menhir_run90(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
              default:
                if (_menhir_env$9[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          6807,
                          16
                        ]
                      ];
                }
                _menhir_env$9[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99);
            }
          } else {
            switch (_tok$31.tag | 0) {
              case 0 : 
                  return _menhir_run1(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99, _tok$31[0]);
              case 1 : 
                  return _menhir_run68(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99, _tok$31[0]);
              case 2 : 
                  return _menhir_run182(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99, _tok$31[0]);
              case 3 : 
                  return _menhir_run183(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99, _tok$31[0]);
              case 4 : 
                  return _menhir_run91(_menhir_env$9, _menhir_stack$1, /* MenhirState174 */99, _tok$31[0]);
              
            }
          }
        } else {
          exit$31 = 7;
        }
        if (exit$31 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6811,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 5 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  6820,
                  10
                ]
              ];
        }
        var _tok$32 = _menhir_env[/* _menhir_token */2];
        var exit$32 = 0;
        if (typeof _tok$32 === "number" && _tok$32 === 48) {
          var _menhir_env$10 = _menhir_discard(_menhir_env);
          var _tok$33 = _menhir_env$10[/* _menhir_token */2];
          if (typeof _tok$33 === "number") {
            switch (_tok$33) {
              case 0 : 
                  return _menhir_run47(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 1 : 
                  return _menhir_run48(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 2 : 
                  return _menhir_run49(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 3 : 
                  return _menhir_run50(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 4 : 
                  return _menhir_run51(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 5 : 
                  return _menhir_run52(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 6 : 
                  return _menhir_run53(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 7 : 
                  return _menhir_run54(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 8 : 
                  return _menhir_run55(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 9 : 
                  return _menhir_run56(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 10 : 
                  return _menhir_run57(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 11 : 
                  return _menhir_run58(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 12 : 
                  return _menhir_run59(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 13 : 
                  return _menhir_run175(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 15 : 
                  return _menhir_run61(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 16 : 
                  return _menhir_run62(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 21 : 
                  return _menhir_run63(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 22 : 
                  return _menhir_run64(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 23 : 
                  return _menhir_run65(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 24 : 
                  return _menhir_run66(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 25 : 
                  return _menhir_run176(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 26 : 
                  return _menhir_run177(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 28 : 
                  return _menhir_run178(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 29 : 
                  return _menhir_run74(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 30 : 
                  return _menhir_run76(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 31 : 
                  return _menhir_run77(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 32 : 
                  return _menhir_run78(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 33 : 
                  return _menhir_run184(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 34 : 
                  return _menhir_run81(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 38 : 
                  return _menhir_run82(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 39 : 
                  return _menhir_run83(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 40 : 
                  return _menhir_run84(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 41 : 
                  return _menhir_run85(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 42 : 
                  return _menhir_run86(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 43 : 
                  return _menhir_run87(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 44 : 
                  return _menhir_run88(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 45 : 
                  return _menhir_run89(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 46 : 
                  return _menhir_run185(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              case 47 : 
                  return _menhir_run90(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
              default:
                if (_menhir_env$10[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          6918,
                          16
                        ]
                      ];
                }
                _menhir_env$10[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95);
            }
          } else {
            switch (_tok$33.tag | 0) {
              case 0 : 
                  return _menhir_run1(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95, _tok$33[0]);
              case 1 : 
                  return _menhir_run68(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95, _tok$33[0]);
              case 2 : 
                  return _menhir_run182(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95, _tok$33[0]);
              case 3 : 
                  return _menhir_run183(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95, _tok$33[0]);
              case 4 : 
                  return _menhir_run91(_menhir_env$10, _menhir_stack$1, /* MenhirState181 */95, _tok$33[0]);
              
            }
          }
        } else {
          exit$32 = 7;
        }
        if (exit$32 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6922,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 6 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7049,
                  10
                ]
              ];
        }
        var _tok$34 = _menhir_env[/* _menhir_token */2];
        var exit$33 = 0;
        if (typeof _tok$34 === "number") {
          switch (_tok$34) {
            case 27 : 
                return _menhir_run170(_menhir_env, _menhir_stack$1, /* MenhirState215 */87);
            case 48 : 
                var _menhir_stack$10 = /* tuple */[
                  _menhir_stack$1,
                  /* MenhirState215 */87
                ];
                var _menhir_env$11 = _menhir_discard(_menhir_env);
                var _tok$35 = _menhir_env$11[/* _menhir_token */2];
                var exit$34 = 0;
                if (typeof _tok$35 === "number") {
                  switch (_tok$35) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 1 : 
                        return _menhir_run5(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 2 : 
                        return _menhir_run6(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 3 : 
                        return _menhir_run7(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 4 : 
                        return _menhir_run8(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 5 : 
                        return _menhir_run9(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 6 : 
                        return _menhir_run10(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 7 : 
                        return _menhir_run11(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 8 : 
                        return _menhir_run12(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 9 : 
                        return _menhir_run13(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 10 : 
                        return _menhir_run14(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 11 : 
                        return _menhir_run15(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 12 : 
                        return _menhir_run16(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 13 : 
                        return _menhir_run17(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 15 : 
                        return _menhir_run18(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 16 : 
                        return _menhir_run19(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 21 : 
                        return _menhir_run20(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 22 : 
                        return _menhir_run21(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 23 : 
                        return _menhir_run22(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 24 : 
                        return _menhir_run23(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 25 : 
                        return _menhir_run24(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 29 : 
                        return _menhir_run26(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 30 : 
                        return _menhir_run27(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 31 : 
                        return _menhir_run28(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 32 : 
                        return _menhir_run29(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 33 : 
                        return _menhir_run30(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 34 : 
                        return _menhir_run31(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 38 : 
                        return _menhir_run32(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 39 : 
                        return _menhir_run33(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 40 : 
                        return _menhir_run34(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 41 : 
                        return _menhir_run35(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 42 : 
                        return _menhir_run36(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 43 : 
                        return _menhir_run37(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 44 : 
                        return _menhir_run38(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 45 : 
                        return _menhir_run39(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    case 47 : 
                        return _menhir_run40(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                    default:
                      exit$34 = 8;
                  }
                } else if (_tok$35.tag === 1) {
                  return _menhir_run25(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86, _tok$35[0]);
                } else {
                  exit$34 = 8;
                }
                if (exit$34 === 8) {
                  if (_menhir_env$11[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            7135,
                            16
                          ]
                        ];
                  }
                  _menhir_env$11[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$11, _menhir_stack$10, /* MenhirState216 */86);
                }
                break;
            case 17 : 
            case 18 : 
            case 20 : 
            case 26 : 
            case 35 : 
            case 36 : 
            case 37 : 
            case 46 : 
            case 50 : 
                exit$33 = 7;
                break;
            default:
              return _menhir_reduce219(_menhir_env, _menhir_stack$1, /* MenhirState215 */87);
          }
        } else {
          switch (_tok$34.tag | 0) {
            case 0 : 
            case 2 : 
            case 3 : 
            case 4 : 
                exit$33 = 7;
                break;
            default:
              return _menhir_reduce219(_menhir_env, _menhir_stack$1, /* MenhirState215 */87);
          }
        }
        if (exit$33 === 7) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7143,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState215 */87);
        }
        break;
    
  }
}

function _menhir_goto_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  if (_menhir_s !== 60) {
    if (_menhir_s >= 112) {
      switch (_menhir_s - 112 | 0) {
        case 1 : 
            var _v_000 = /* name */_menhir_stack[2];
            var _v$1 = /* record */[
              _v_000,
              /* value */_v
            ];
            var _menhir_stack_000 = _menhir_stack[0];
            var _menhir_stack_001 = _menhir_stack[1];
            var _menhir_stack$2 = /* tuple */[
              _menhir_stack_000,
              _menhir_stack_001,
              _v$1
            ];
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      7827,
                      10
                    ]
                  ];
            }
            var _tok = _menhir_env[/* _menhir_token */2];
            var exit$1 = 0;
            if (typeof _tok === "number") {
              switch (_tok) {
                case 0 : 
                    return _menhir_run4(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 1 : 
                    return _menhir_run5(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 2 : 
                    return _menhir_run6(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 3 : 
                    return _menhir_run7(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 4 : 
                    return _menhir_run8(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 5 : 
                    return _menhir_run9(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 6 : 
                    return _menhir_run10(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 7 : 
                    return _menhir_run11(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 8 : 
                    return _menhir_run12(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 9 : 
                    return _menhir_run13(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 10 : 
                    return _menhir_run14(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 11 : 
                    return _menhir_run15(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 12 : 
                    return _menhir_run16(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 13 : 
                    return _menhir_run17(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 15 : 
                    return _menhir_run18(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 16 : 
                    return _menhir_run19(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 19 : 
                    return _menhir_reduce120(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 21 : 
                    return _menhir_run20(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 22 : 
                    return _menhir_run21(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 23 : 
                    return _menhir_run22(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 24 : 
                    return _menhir_run23(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 25 : 
                    return _menhir_run24(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 29 : 
                    return _menhir_run26(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 30 : 
                    return _menhir_run27(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 31 : 
                    return _menhir_run28(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 32 : 
                    return _menhir_run29(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 33 : 
                    return _menhir_run30(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 34 : 
                    return _menhir_run31(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 38 : 
                    return _menhir_run32(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 39 : 
                    return _menhir_run33(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 40 : 
                    return _menhir_run34(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 41 : 
                    return _menhir_run35(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 42 : 
                    return _menhir_run36(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 43 : 
                    return _menhir_run37(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 44 : 
                    return _menhir_run38(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 45 : 
                    return _menhir_run39(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                case 47 : 
                    return _menhir_run40(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
                default:
                  exit$1 = 2;
              }
            } else if (_tok.tag === 1) {
              return _menhir_run25(_menhir_env, _menhir_stack$2, /* MenhirState71 */114, _tok[0]);
            } else {
              exit$1 = 2;
            }
            if (exit$1 === 2) {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        7907,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState71 */114);
            }
            break;
        case 0 : 
        case 4 : 
            exit = 1;
            break;
        case 5 : 
            var _menhir_s$1 = _menhir_stack[1];
            var _menhir_stack$3 = _menhir_stack[0];
            var _v_000$1 = /* name */_menhir_stack[2];
            var _v$2 = /* record */[
              _v_000$1,
              /* value */_v
            ];
            var _menhir_stack$4 = /* tuple */[
              _menhir_stack$3,
              _menhir_s$1,
              _v$2
            ];
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      8027,
                      10
                    ]
                  ];
            }
            var _tok$1 = _menhir_env[/* _menhir_token */2];
            var exit$2 = 0;
            if (typeof _tok$1 === "number") {
              switch (_tok$1) {
                case 0 : 
                    return _menhir_run4(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 1 : 
                    return _menhir_run5(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 2 : 
                    return _menhir_run6(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 3 : 
                    return _menhir_run7(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 4 : 
                    return _menhir_run8(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 5 : 
                    return _menhir_run9(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 6 : 
                    return _menhir_run10(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 7 : 
                    return _menhir_run11(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 8 : 
                    return _menhir_run12(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 9 : 
                    return _menhir_run13(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 10 : 
                    return _menhir_run14(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 11 : 
                    return _menhir_run15(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 12 : 
                    return _menhir_run16(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 13 : 
                    return _menhir_run17(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 15 : 
                    return _menhir_run18(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 16 : 
                    return _menhir_run19(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 18 : 
                    var _v$3 = /* :: */[
                      _v$2,
                      /* [] */0
                    ];
                    var _menhir_env$1 = _menhir_env;
                    var __menhir_stack = _menhir_stack$3;
                    var __menhir_s = _menhir_s$1;
                    var __v = _v$3;
                    while(true) {
                      var _v$4 = __v;
                      var _menhir_s$2 = __menhir_s;
                      var _menhir_stack$5 = __menhir_stack;
                      if (_menhir_s$2 !== 111) {
                        if (_menhir_s$2 !== 118) {
                          return _menhir_fail(/* () */0);
                        } else {
                          if (_menhir_env$1[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    4846,
                                    10
                                  ]
                                ];
                          }
                          var _tok$2 = _menhir_env$1[/* _menhir_token */2];
                          var exit$3 = 0;
                          if (typeof _tok$2 === "number" && _tok$2 === 18) {
                            var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                            var _v$5 = _v$4;
                            return _menhir_goto_option_arguments_(_menhir_env$2, _menhir_stack$5, _v$5);
                          } else {
                            exit$3 = 1;
                          }
                          if (exit$3 === 1) {
                            if (_menhir_env$1[/* _menhir_error */3]) {
                              throw [
                                    Caml_builtin_exceptions.assert_failure,
                                    /* tuple */[
                                      "gql_parser.ml",
                                      4879,
                                      12
                                    ]
                                  ];
                            }
                            _menhir_env$1[/* _menhir_error */3] = true;
                            return _menhir_errorcase(_menhir_env$1, _menhir_stack$5, _menhir_s$2);
                          }
                          
                        }
                      } else {
                        var _v_000$2 = _menhir_stack$5[2];
                        var _v$6 = /* :: */[
                          _v_000$2,
                          _v$4
                        ];
                        __v = _v$6;
                        __menhir_s = _menhir_stack$5[1];
                        __menhir_stack = _menhir_stack$5[0];
                        continue ;
                      }
                    };
                case 21 : 
                    return _menhir_run20(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 22 : 
                    return _menhir_run21(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 23 : 
                    return _menhir_run22(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 24 : 
                    return _menhir_run23(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 25 : 
                    return _menhir_run24(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 29 : 
                    return _menhir_run26(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 30 : 
                    return _menhir_run27(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 31 : 
                    return _menhir_run28(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 32 : 
                    return _menhir_run29(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 33 : 
                    return _menhir_run30(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 34 : 
                    return _menhir_run31(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 38 : 
                    return _menhir_run32(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 39 : 
                    return _menhir_run33(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 40 : 
                    return _menhir_run34(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 41 : 
                    return _menhir_run35(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 42 : 
                    return _menhir_run36(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 43 : 
                    return _menhir_run37(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 44 : 
                    return _menhir_run38(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 45 : 
                    return _menhir_run39(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                case 47 : 
                    return _menhir_run40(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
                default:
                  exit$2 = 2;
              }
            } else if (_tok$1.tag === 1) {
              return _menhir_run25(_menhir_env, _menhir_stack$4, /* MenhirState105 */111, _tok$1[0]);
            } else {
              exit$2 = 2;
            }
            if (exit$2 === 2) {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        8115,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$4, /* MenhirState105 */111);
            }
            break;
        case 2 : 
        case 3 : 
        case 6 : 
        case 7 : 
        case 8 : 
        case 9 : 
            return _menhir_fail(/* () */0);
        
      }
    } else {
      return _menhir_fail(/* () */0);
    }
  } else {
    var _v$7 = _v;
    return _menhir_goto_option_default_value_(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$7);
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              7913,
              10
            ]
          ];
    }
    var _tok$3 = _menhir_env[/* _menhir_token */2];
    if (typeof _tok$3 === "number") {
      switch (_tok$3) {
        case 0 : 
            return _menhir_run47(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 1 : 
            return _menhir_run48(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 2 : 
            return _menhir_run49(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 3 : 
            return _menhir_run50(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 4 : 
            return _menhir_run51(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 5 : 
            return _menhir_run52(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 6 : 
            return _menhir_run53(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 7 : 
            return _menhir_run54(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 8 : 
            return _menhir_run55(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 9 : 
            return _menhir_run56(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 10 : 
            return _menhir_run57(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 11 : 
            return _menhir_run58(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 12 : 
            return _menhir_run59(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 13 : 
            return _menhir_run60(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 15 : 
            return _menhir_run61(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 16 : 
            return _menhir_run62(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 17 : 
            return _menhir_reduce124(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 21 : 
            return _menhir_run63(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 22 : 
            return _menhir_run64(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 23 : 
            return _menhir_run65(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 24 : 
            return _menhir_run66(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 25 : 
            return _menhir_run67(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 26 : 
            return _menhir_run69(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 28 : 
            return _menhir_run70(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 29 : 
            return _menhir_run74(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 30 : 
            return _menhir_run76(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 31 : 
            return _menhir_run77(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 32 : 
            return _menhir_run78(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 33 : 
            return _menhir_run80(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 34 : 
            return _menhir_run81(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 38 : 
            return _menhir_run82(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 39 : 
            return _menhir_run83(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 40 : 
            return _menhir_run84(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 41 : 
            return _menhir_run85(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 42 : 
            return _menhir_run86(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 43 : 
            return _menhir_run87(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 44 : 
            return _menhir_run88(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 45 : 
            return _menhir_run89(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        case 47 : 
            return _menhir_run90(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
        default:
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    8005,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState100 */112);
      }
    } else {
      switch (_tok$3.tag | 0) {
        case 0 : 
            return _menhir_run1(_menhir_env, _menhir_stack$1, /* MenhirState100 */112, _tok$3[0]);
        case 1 : 
            return _menhir_run68(_menhir_env, _menhir_stack$1, /* MenhirState100 */112, _tok$3[0]);
        case 2 : 
            return _menhir_run75(_menhir_env, _menhir_stack$1, /* MenhirState100 */112, _tok$3[0]);
        case 3 : 
            return _menhir_run79(_menhir_env, _menhir_stack$1, /* MenhirState100 */112, _tok$3[0]);
        case 4 : 
            return _menhir_run91(_menhir_env, _menhir_stack$1, /* MenhirState100 */112, _tok$3[0]);
        
      }
    }
  }
  
}

function _menhir_goto_fragment_name(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_s !== 80) {
    if (_menhir_s !== 105) {
      return _menhir_fail(/* () */0);
    } else {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                6142,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number") {
        switch (_tok) {
          case 49 : 
              return _menhir_run168(_menhir_env, _menhir_stack$1, /* MenhirState211 */89);
          case 17 : 
          case 18 : 
          case 20 : 
          case 26 : 
          case 27 : 
          case 28 : 
          case 35 : 
          case 36 : 
          case 37 : 
          case 46 : 
          case 48 : 
          case 50 : 
              exit = 1;
              break;
          default:
            return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState211 */89);
        }
      } else {
        switch (_tok.tag | 0) {
          case 0 : 
          case 2 : 
          case 3 : 
          case 4 : 
              exit = 1;
              break;
          default:
            return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState211 */89);
        }
      }
      if (exit === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  6150,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState211 */89);
      }
      
    }
  } else {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              6156,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 24) {
      return _menhir_run147(_menhir_env, _menhir_stack$1, /* MenhirState231 */79);
    } else {
      exit$1 = 1;
    }
    if (exit$1 === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                6162,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState231 */79);
    }
    
  }
}

function _menhir_goto_value_nc(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  switch (_menhir_s) {
    case 95 : 
        var _v_000 = /* name */_menhir_stack[2];
        var _v$1 = /* record */[
          _v_000,
          /* value */_v
        ];
        var _menhir_stack_000 = _menhir_stack[0];
        var _menhir_stack_001 = _menhir_stack[1];
        var _menhir_stack$2 = /* tuple */[
          _menhir_stack_000,
          _menhir_stack_001,
          _v$1
        ];
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7508,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number") {
          switch (_tok) {
            case 0 : 
                return _menhir_run4(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 1 : 
                return _menhir_run5(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 2 : 
                return _menhir_run6(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 3 : 
                return _menhir_run7(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 4 : 
                return _menhir_run8(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 5 : 
                return _menhir_run9(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 6 : 
                return _menhir_run10(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 7 : 
                return _menhir_run11(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 8 : 
                return _menhir_run12(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 9 : 
                return _menhir_run13(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 10 : 
                return _menhir_run14(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 11 : 
                return _menhir_run15(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 12 : 
                return _menhir_run16(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 13 : 
                return _menhir_run17(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 15 : 
                return _menhir_run18(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 16 : 
                return _menhir_run19(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 19 : 
                return _menhir_reduce122(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 21 : 
                return _menhir_run20(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 22 : 
                return _menhir_run21(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 23 : 
                return _menhir_run22(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 24 : 
                return _menhir_run23(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 25 : 
                return _menhir_run24(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 29 : 
                return _menhir_run26(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 30 : 
                return _menhir_run27(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 31 : 
                return _menhir_run28(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 32 : 
                return _menhir_run29(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 33 : 
                return _menhir_run30(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 34 : 
                return _menhir_run31(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 38 : 
                return _menhir_run32(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 39 : 
                return _menhir_run33(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 40 : 
                return _menhir_run34(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 41 : 
                return _menhir_run35(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 42 : 
                return _menhir_run36(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 43 : 
                return _menhir_run37(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 44 : 
                return _menhir_run38(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 45 : 
                return _menhir_run39(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            case 47 : 
                return _menhir_run40(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
            default:
              exit$1 = 2;
          }
        } else if (_tok.tag === 1) {
          return _menhir_run25(_menhir_env, _menhir_stack$2, /* MenhirState179 */96, _tok[0]);
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7588,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState179 */96);
        }
        break;
    case 94 : 
    case 96 : 
    case 97 : 
        return _menhir_fail(/* () */0);
    case 93 : 
    case 98 : 
        exit = 1;
        break;
    case 99 : 
        var _menhir_s$1 = _menhir_stack[1];
        var _menhir_stack$3 = _menhir_stack[0];
        var _v_000$1 = /* name */_menhir_stack[2];
        var _v$2 = /* record */[
          _v_000$1,
          /* value */_v
        ];
        var _menhir_stack$4 = /* tuple */[
          _menhir_stack$3,
          _menhir_s$1,
          _v$2
        ];
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  7710,
                  10
                ]
              ];
        }
        var _tok$1 = _menhir_env[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$1 === "number") {
          switch (_tok$1) {
            case 0 : 
                return _menhir_run4(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 1 : 
                return _menhir_run5(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 2 : 
                return _menhir_run6(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 3 : 
                return _menhir_run7(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 4 : 
                return _menhir_run8(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 5 : 
                return _menhir_run9(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 6 : 
                return _menhir_run10(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 7 : 
                return _menhir_run11(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 8 : 
                return _menhir_run12(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 9 : 
                return _menhir_run13(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 10 : 
                return _menhir_run14(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 11 : 
                return _menhir_run15(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 12 : 
                return _menhir_run16(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 13 : 
                return _menhir_run17(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 15 : 
                return _menhir_run18(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 16 : 
                return _menhir_run19(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 18 : 
                var _v$3 = /* :: */[
                  _v$2,
                  /* [] */0
                ];
                var _menhir_env$1 = _menhir_env;
                var __menhir_stack = _menhir_stack$3;
                var __menhir_s = _menhir_s$1;
                var __v = _v$3;
                while(true) {
                  var _v$4 = __v;
                  var _menhir_s$2 = __menhir_s;
                  var _menhir_stack$5 = __menhir_stack;
                  if (_menhir_s$2 !== 92) {
                    if (_menhir_s$2 !== 100) {
                      return _menhir_fail(/* () */0);
                    } else {
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "gql_parser.ml",
                                4335,
                                10
                              ]
                            ];
                      }
                      var _tok$2 = _menhir_env$1[/* _menhir_token */2];
                      var exit$3 = 0;
                      if (typeof _tok$2 === "number" && _tok$2 === 18) {
                        var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                        var _v$5 = _v$4;
                        return _menhir_goto_option_arguments_nc_(_menhir_env$2, _menhir_stack$5[0], _menhir_stack$5[1], _v$5);
                      } else {
                        exit$3 = 1;
                      }
                      if (exit$3 === 1) {
                        if (_menhir_env$1[/* _menhir_error */3]) {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                /* tuple */[
                                  "gql_parser.ml",
                                  4371,
                                  12
                                ]
                              ];
                        }
                        _menhir_env$1[/* _menhir_error */3] = true;
                        return _menhir_errorcase(_menhir_env$1, _menhir_stack$5, _menhir_s$2);
                      }
                      
                    }
                  } else {
                    var _v_000$2 = _menhir_stack$5[2];
                    var _v$6 = /* :: */[
                      _v_000$2,
                      _v$4
                    ];
                    __v = _v$6;
                    __menhir_s = _menhir_stack$5[1];
                    __menhir_stack = _menhir_stack$5[0];
                    continue ;
                  }
                };
            case 21 : 
                return _menhir_run20(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 22 : 
                return _menhir_run21(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 23 : 
                return _menhir_run22(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 24 : 
                return _menhir_run23(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 25 : 
                return _menhir_run24(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 29 : 
                return _menhir_run26(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 30 : 
                return _menhir_run27(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 31 : 
                return _menhir_run28(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 32 : 
                return _menhir_run29(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 33 : 
                return _menhir_run30(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 34 : 
                return _menhir_run31(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 38 : 
                return _menhir_run32(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 39 : 
                return _menhir_run33(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 40 : 
                return _menhir_run34(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 41 : 
                return _menhir_run35(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 42 : 
                return _menhir_run36(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 43 : 
                return _menhir_run37(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 44 : 
                return _menhir_run38(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 45 : 
                return _menhir_run39(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            case 47 : 
                return _menhir_run40(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
            default:
              exit$2 = 2;
          }
        } else if (_tok$1.tag === 1) {
          return _menhir_run25(_menhir_env, _menhir_stack$4, /* MenhirState201 */92, _tok$1[0]);
        } else {
          exit$2 = 2;
        }
        if (exit$2 === 2) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7798,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$4, /* MenhirState201 */92);
        }
        break;
    default:
      return _menhir_fail(/* () */0);
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              7594,
              10
            ]
          ];
    }
    var _tok$3 = _menhir_env[/* _menhir_token */2];
    if (typeof _tok$3 === "number") {
      switch (_tok$3) {
        case 0 : 
            return _menhir_run47(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 1 : 
            return _menhir_run48(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 2 : 
            return _menhir_run49(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 3 : 
            return _menhir_run50(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 4 : 
            return _menhir_run51(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 5 : 
            return _menhir_run52(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 6 : 
            return _menhir_run53(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 7 : 
            return _menhir_run54(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 8 : 
            return _menhir_run55(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 9 : 
            return _menhir_run56(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 10 : 
            return _menhir_run57(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 11 : 
            return _menhir_run58(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 12 : 
            return _menhir_run59(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 13 : 
            return _menhir_run175(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 15 : 
            return _menhir_run61(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 16 : 
            return _menhir_run62(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 17 : 
            return _menhir_reduce126(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 21 : 
            return _menhir_run63(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 22 : 
            return _menhir_run64(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 23 : 
            return _menhir_run65(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 24 : 
            return _menhir_run66(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 25 : 
            return _menhir_run176(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 26 : 
            return _menhir_run177(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 28 : 
            return _menhir_run178(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 29 : 
            return _menhir_run74(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 30 : 
            return _menhir_run76(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 31 : 
            return _menhir_run77(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 32 : 
            return _menhir_run78(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 33 : 
            return _menhir_run184(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 34 : 
            return _menhir_run81(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 38 : 
            return _menhir_run82(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 39 : 
            return _menhir_run83(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 40 : 
            return _menhir_run84(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 41 : 
            return _menhir_run85(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 42 : 
            return _menhir_run86(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 43 : 
            return _menhir_run87(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 44 : 
            return _menhir_run88(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 45 : 
            return _menhir_run89(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 46 : 
            return _menhir_run185(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        case 47 : 
            return _menhir_run90(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
        default:
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    7688,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState196 */93);
      }
    } else {
      switch (_tok$3.tag | 0) {
        case 0 : 
            return _menhir_run1(_menhir_env, _menhir_stack$1, /* MenhirState196 */93, _tok$3[0]);
        case 1 : 
            return _menhir_run68(_menhir_env, _menhir_stack$1, /* MenhirState196 */93, _tok$3[0]);
        case 2 : 
            return _menhir_run182(_menhir_env, _menhir_stack$1, /* MenhirState196 */93, _tok$3[0]);
        case 3 : 
            return _menhir_run183(_menhir_env, _menhir_stack$1, /* MenhirState196 */93, _tok$3[0]);
        case 4 : 
            return _menhir_run91(_menhir_env, _menhir_stack$1, /* MenhirState196 */93, _tok$3[0]);
        
      }
    }
  }
  
}

function _menhir_goto_type_system_directive_location(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* TypeSystemDirectiveLocation */Block.__(1, [_v]);
  return _menhir_goto_directive_location(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run389(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Scalar */1);
}

function _menhir_run396(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Enum */7);
}

function _menhir_run392(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* InputObject */9);
}

function _menhir_run403(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_executable_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* FragmentDefinition */4);
}

function _menhir_run391(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Interface */5);
}

function _menhir_run404(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_executable_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Field */3);
}

function _menhir_run390(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Object */2);
}

function _menhir_run399(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_executable_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Query */0);
}

function _menhir_run402(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_executable_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* FragmentSpread */5);
}

function _menhir_run398(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_executable_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Subscription */2);
}

function _menhir_run393(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* InputFieldDefinition */10);
}

function _menhir_run395(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* EnumValue */8);
}

function _menhir_run388(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Schema */0);
}

function _menhir_goto_type_system_definition(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* TypeSystemDefinition */Block.__(0, [_v]);
  return _menhir_goto_definition(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run394(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* FieldDefinition */3);
}

function _menhir_run397(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* ArgumentDefinition */4);
}

function _menhir_run400(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_executable_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Mutation */1);
}

function _menhir_run401(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_executable_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* InlineFragment */6);
}

function _menhir_run387(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_type_system_directive_location(_menhir_env$1, _menhir_stack, _menhir_s, /* Union */6);
}

function _menhir_run185(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              4764,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState185 */94);
  }
  
}

function _menhir_goto_option_variable_definitions_(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            3309,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 28) {
      if (_tok !== 49) {
        exit = 1;
      } else {
        return _menhir_run168(_menhir_env, _menhir_stack$1, /* MenhirState422 */2);
      }
    } else {
      return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState422 */2);
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3317,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState422 */2);
  }
  
}

function _menhir_run34(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "QUERY");
}

function _menhir_run62(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "scalar");
}

function _menhir_run31(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "extend");
}

function _menhir_run12(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "INPUT_FIELD_DEFINITION");
}

function _menhir_run29(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "fragment");
}

function _menhir_run61(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "schema");
}

function _menhir_run39(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "FIELD");
}

function _menhir_run48(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "type");
}

function _menhir_run6(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "UNION");
}

function _menhir_run86(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "INLINE_FRAGMENT");
}

function _menhir_run52(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "OBJECT");
}

function _menhir_run50(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "SCHEMA");
}

function _menhir_run23(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "on");
}

function _menhir_run19(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "scalar");
}

function _menhir_run84(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "QUERY");
}

function _menhir_run21(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "query");
}

function _menhir_fail(param) {
  Printf.fprintf(Pervasives.stderr, /* Format */[
        /* String_literal */Block.__(11, [
            "Internal failure -- please contact the parser generator's developers.\n",
            /* Flush */Block.__(10, [/* End_of_format */0])
          ]),
        "Internal failure -- please contact the parser generator's developers.\n%!"
      ]);
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "gql_parser.ml",
          7483,
          4
        ]
      ];
}

function _menhir_run14(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "ENUM_VALUE");
}

function _menhir_run83(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "SUBSCRIPTION");
}

function _menhir_run49(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "UNION");
}

function _menhir_run24(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "null");
}

function _menhir_run51(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "SCALAR");
}

function _menhir_run74(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "interface");
}

function _menhir_run53(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "INTERFACE");
}

function _menhir_run28(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "implements");
}

function _menhir_run30(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "false");
}

function _menhir_run47(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "union");
}

function _menhir_run68(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, _v);
}

function _menhir_run9(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "OBJECT");
}

function _menhir_run54(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "INPUT_OBJECT");
}

function _menhir_run38(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "FRAGMENT_DEFINITION");
}

function _menhir_run40(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "directive");
}

function _menhir_run11(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "INPUT_OBJECT");
}

function _menhir_run15(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "ENUM");
}

function _menhir_run58(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "ENUM");
}

function _menhir_run55(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "INPUT_FIELD_DEFINITION");
}

function _menhir_run85(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "MUTATION");
}

function _menhir_run7(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "SCHEMA");
}

function _menhir_run4(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "union");
}

function _menhir_run27(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "input");
}

function _menhir_run82(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "enum");
}

function _menhir_run16(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "ARGUMENT_DEFINITION");
}

function _menhir_run56(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "FIELD_DEFINITION");
}

function _menhir_run18(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "schema");
}

function _menhir_run10(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "INTERFACE");
}

function _menhir_run76(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "input");
}

function _menhir_run77(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "implements");
}

function _menhir_run26(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "interface");
}

function _menhir_run89(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "FIELD");
}

function _menhir_run63(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "subscription");
}

function _menhir_run25(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, _v);
}

function _menhir_run17(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "true");
}

function _menhir_run57(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "ENUM_VALUE");
}

function _menhir_run78(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "fragment");
}

function _menhir_run20(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "subscription");
}

function _menhir_run22(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "mutation");
}

function _menhir_run35(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "MUTATION");
}

function _menhir_run87(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "FRAGMENT_SPREAD");
}

function _menhir_run65(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "mutation");
}

function _menhir_run32(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "enum");
}

function _menhir_run37(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "FRAGMENT_SPREAD");
}

function _menhir_run59(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "ARGUMENT_DEFINITION");
}

function _menhir_run5(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "type");
}

function _menhir_run8(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "SCALAR");
}

function _menhir_run88(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "FRAGMENT_DEFINITION");
}

function _menhir_run64(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "query");
}

function _menhir_run36(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "INLINE_FRAGMENT");
}

function _menhir_run13(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "FIELD_DEFINITION");
}

function _menhir_run66(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "on");
}

function _menhir_run90(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "directive");
}

function _menhir_run81(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_enum_value(_menhir_env$1, _menhir_stack, _menhir_s, "extend");
}

function _menhir_run33(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_name(_menhir_env$1, _menhir_stack, _menhir_s, "SUBSCRIPTION");
}

function _menhir_goto_definition(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            1276,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 15 : 
          return _menhir_run2(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      case 21 : 
          return _menhir_run111(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      case 22 : 
          return _menhir_run112(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      case 23 : 
          return _menhir_run113(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      case 28 : 
          return _menhir_run126(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      case 32 : 
          return _menhir_run230(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      case 34 : 
          return _menhir_run235(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      case 37 : 
          var _v$1 = /* :: */[
            _v,
            /* [] */0
          ];
          var _menhir_env$1 = _menhir_env;
          var __menhir_stack = _menhir_stack;
          var __menhir_s = _menhir_s;
          var __v = _v$1;
          while(true) {
            var _v$2 = __v;
            var _menhir_s$1 = __menhir_s;
            var _menhir_stack$2 = __menhir_stack;
            if (_menhir_s$1 !== 0) {
              if (_menhir_s$1 >= 121) {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          936,
                          10
                        ]
                      ];
                }
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                var exit$1 = 0;
                if (typeof _tok$1 === "number" && _tok$1 === 37) {
                  return /* record */[/* definitions */_v$2];
                } else {
                  exit$1 = 1;
                }
                if (exit$1 === 1) {
                  if (_menhir_env$1[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            985,
                            12
                          ]
                        ];
                  }
                  _menhir_env$1[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, _menhir_s$1);
                }
                
              } else {
                return _menhir_fail(/* () */0);
              }
            } else {
              var _v_000 = _menhir_stack$2[2];
              var _v$3 = /* :: */[
                _v_000,
                _v$2
              ];
              __v = _v$3;
              __menhir_s = _menhir_stack$2[1];
              __menhir_stack = _menhir_stack$2[0];
              continue ;
            }
          };
      case 0 : 
      case 1 : 
      case 16 : 
      case 29 : 
      case 30 : 
      case 38 : 
      case 47 : 
          return _menhir_reduce223(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
      default:
        exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run1(_menhir_env, _menhir_stack$1, /* MenhirState441 */0, _tok[0]);
      case 4 : 
          return _menhir_run91(_menhir_env, _menhir_stack$1, /* MenhirState441 */0, _tok[0]);
      default:
        exit = 1;
    }
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              1310,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState441 */0);
  }
  
}

function _menhir_reduce120(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 114) {
      if (_menhir_s$1 !== 115) {
        return _menhir_fail(/* () */0);
      } else {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  2644,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 19) {
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var v = /* ObjectValue */Block.__(6, [_v]);
          return _menhir_goto_value(_menhir_env$2, _menhir_stack$1[0], _menhir_stack$1[1], v);
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    2680,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$1 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$1;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_run330(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 13 : 
      case 14 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 25 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 33 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 46 : 
      case 48 : 
      case 49 : 
      case 50 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState330 */35);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState330 */35, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run91(_menhir_env$1, _menhir_stack$1, /* MenhirState330 */35, _tok[0]);
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState330 */35);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3351,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState330 */35);
  }
  
}

function _menhir_run250(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 14 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 46 : 
      case 48 : 
      case 49 : 
      case 50 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState250 */68);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState250 */68, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run91(_menhir_env$1, _menhir_stack$1, /* MenhirState250 */68, _tok[0]);
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState250 */68);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3411,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState250 */68);
  }
  
}

function _menhir_goto_union_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* UnionTypeExtension */Block.__(3, [_v]);
  return _menhir_goto_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run303(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 21 : 
          return _menhir_run111(_menhir_env$1, _menhir_stack$1, /* MenhirState303 */48);
      case 22 : 
          return _menhir_run112(_menhir_env$1, _menhir_stack$1, /* MenhirState303 */48);
      case 23 : 
          return _menhir_run113(_menhir_env$1, _menhir_stack$1, /* MenhirState303 */48);
      default:
        exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              9849,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState303 */48);
  }
  
}

function _menhir_run321(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 14 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 46 : 
      case 48 : 
      case 49 : 
      case 50 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState321 */39);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState321 */39, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run91(_menhir_env$1, _menhir_stack$1, /* MenhirState321 */39, _tok[0]);
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState321 */39);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3368,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState321 */39);
  }
  
}

function _menhir_reduce226(_menhir_env, _menhir_stack) {
  var _v = _menhir_stack[2];
  return _menhir_goto_option_directives_(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v);
}

function _menhir_goto_option_schema_extension_rest_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var match = _menhir_stack[0];
  var t_000 = /* directives */_menhir_stack[2];
  var t_001 = /* operations */flat(_v);
  var t = /* record */[
    t_000,
    t_001
  ];
  return _menhir_goto_schema_extension(_menhir_env, match[0], match[1], t);
}

function _menhir_goto_option_enum_values_definition_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var match = _menhir_stack[0];
  var match$1 = match[0];
  var _v_000 = /* name */match[2];
  var _v_001 = /* directives */_menhir_stack[2];
  var _v_002 = /* values */flat(_v);
  var _v$1 = /* record */[
    _v_000,
    _v_001,
    _v_002
  ];
  return _menhir_goto_enum_type_extension(_menhir_env, match$1[0], match$1[1], _v$1);
}

function _menhir_goto_option_input_fields_definition_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var match = _menhir_stack[0];
  var match$1 = match[0];
  var _v_000 = /* name */match[2];
  var _v_001 = /* directives */_menhir_stack[2];
  var _v_002 = /* fields */flat(_v);
  var _v$1 = /* record */[
    _v_000,
    _v_001,
    _v_002
  ];
  return _menhir_goto_input_object_type_extension(_menhir_env, match$1[0], match$1[1], _v$1);
}

function _menhir_goto_option_fields_definition_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var match = _menhir_stack[0];
  var match$1 = match[0];
  var t_000 = /* name */match[2];
  var t_001 = /* directives */_menhir_stack[2];
  var t_002 = /* fields */flat(_v);
  var t = /* record */[
    t_000,
    t_001,
    t_002
  ];
  return _menhir_goto_interface_type_extension(_menhir_env, match$1[0], match$1[1], t);
}

function _menhir_reduce209(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_opt_fields_definition(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* TypeExtension */Block.__(1, [_v]);
  return _menhir_goto_type_system_extension(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_executable_directive_location(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* ExecutableDirectiveLocation */Block.__(0, [_v]);
  return _menhir_goto_directive_location(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_option_directives_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_s >= 76) {
    if (_menhir_s !== 120) {
      return _menhir_fail(/* () */0);
    } else {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                5693,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number" && _tok === 28) {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var _tok$1 = _menhir_env$1[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok$1 === "number") {
          switch (_tok$1) {
            case 21 : 
                return _menhir_run111(_menhir_env$1, _menhir_stack$1, /* MenhirState110 */110);
            case 22 : 
                return _menhir_run112(_menhir_env$1, _menhir_stack$1, /* MenhirState110 */110);
            case 23 : 
                return _menhir_run113(_menhir_env$1, _menhir_stack$1, /* MenhirState110 */110);
            default:
              exit$1 = 2;
          }
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5709,
                    16
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState110 */110);
        }
        
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  5713,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
      }
      
    }
  } else if (_menhir_s >= 14) {
    switch (_menhir_s - 14 | 0) {
      case 0 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5984,
                    10
                  ]
                ];
          }
          var _tok$2 = _menhir_env[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$2 === "number" && _tok$2 === 28) {
            return _menhir_run330(_menhir_env, _menhir_stack$1, /* MenhirState378 */13);
          } else {
            exit$2 = 1;
          }
          if (exit$2 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      5990,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState378 */13);
          }
          break;
      case 3 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5972,
                    10
                  ]
                ];
          }
          var _tok$3 = _menhir_env[/* _menhir_token */2];
          var exit$3 = 0;
          if (typeof _tok$3 === "number" && _tok$3 === 28) {
            return _menhir_run321(_menhir_env, _menhir_stack$1, /* MenhirState374 */16);
          } else {
            exit$3 = 1;
          }
          if (exit$3 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      5978,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState374 */16);
          }
          break;
      case 6 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5960,
                    10
                  ]
                ];
          }
          var _tok$4 = _menhir_env[/* _menhir_token */2];
          var exit$4 = 0;
          if (typeof _tok$4 === "number" && _tok$4 === 28) {
            return _menhir_run250(_menhir_env, _menhir_stack$1, /* MenhirState370 */19);
          } else {
            exit$4 = 1;
          }
          if (exit$4 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      5966,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState370 */19);
          }
          break;
      case 8 : 
          var match = _menhir_stack[0];
          var _v_000 = /* description */match[2];
          var _v_001 = /* name */_menhir_stack[2];
          var _v_002 = /* directives */flat(_v);
          var _v$1 = /* record */[
            _v_000,
            _v_001,
            _v_002
          ];
          var _v$2 = /* ScalarTypeDefinition */Block.__(0, [_v$1]);
          return _menhir_goto_type_definition(_menhir_env, match[0], match[1], _v$2);
      case 11 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5918,
                    10
                  ]
                ];
          }
          var _tok$5 = _menhir_env[/* _menhir_token */2];
          var exit$5 = 0;
          if (typeof _tok$5 === "number" && _tok$5 === 28) {
            return _menhir_run250(_menhir_env, _menhir_stack$1, /* MenhirState362 */24);
          } else {
            exit$5 = 1;
          }
          if (exit$5 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      5924,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState362 */24);
          }
          break;
      case 15 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5896,
                    10
                  ]
                ];
          }
          var _tok$6 = _menhir_env[/* _menhir_token */2];
          var exit$6 = 0;
          if (typeof _tok$6 === "number") {
            switch (_tok$6) {
              case 36 : 
                  return _menhir_run239(_menhir_env, _menhir_stack$1, /* MenhirState356 */28);
              case 0 : 
              case 1 : 
              case 15 : 
              case 16 : 
              case 21 : 
              case 22 : 
              case 23 : 
              case 28 : 
              case 29 : 
              case 30 : 
              case 32 : 
              case 34 : 
              case 37 : 
              case 38 : 
              case 47 : 
                  exit$6 = 2;
                  break;
              default:
                exit$6 = 1;
            }
          } else {
            switch (_tok$6.tag | 0) {
              case 0 : 
              case 4 : 
                  exit$6 = 2;
                  break;
              default:
                exit$6 = 1;
            }
          }
          switch (exit$6) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          5912,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState356 */28);
            case 2 : 
                return _menhir_goto_option_union_member_types_(_menhir_env, _menhir_stack$1, /* MenhirState356 */28, undefined);
            
          }
          break;
      case 19 : 
          var match$1 = _menhir_stack[0];
          var _menhir_s$1 = match$1[1];
          var _menhir_stack$2 = match$1[0];
          var _v_000$1 = /* description */match$1[2];
          var _v_001$1 = /* value */_menhir_stack[2];
          var _v_002$1 = /* directives */flat(_v);
          var _v$3 = /* record */[
            _v_000$1,
            _v_001$1,
            _v_002$1
          ];
          var _menhir_stack$3 = /* tuple */[
            _menhir_stack$2,
            _menhir_s$1,
            _v$3
          ];
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5870,
                    10
                  ]
                ];
          }
          var _tok$7 = _menhir_env[/* _menhir_token */2];
          var exit$7 = 0;
          if (typeof _tok$7 === "number") {
            switch (_tok$7) {
              case 19 : 
                  var _v$4 = /* :: */[
                    _v$3,
                    /* [] */0
                  ];
                  var _menhir_env$2 = _menhir_env;
                  var __menhir_stack = _menhir_stack$2;
                  var __menhir_s = _menhir_s$1;
                  var __v = _v$4;
                  while(true) {
                    var _v$5 = __v;
                    var _menhir_s$2 = __menhir_s;
                    var _menhir_stack$4 = __menhir_stack;
                    if (_menhir_s$2 !== 32) {
                      if (_menhir_s$2 !== 35) {
                        return _menhir_fail(/* () */0);
                      } else {
                        if (_menhir_env$2[/* _menhir_error */3]) {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                /* tuple */[
                                  "gql_parser.ml",
                                  2794,
                                  10
                                ]
                              ];
                        }
                        var _tok$8 = _menhir_env$2[/* _menhir_token */2];
                        var exit$8 = 0;
                        if (typeof _tok$8 === "number" && _tok$8 === 19) {
                          var _menhir_env$3 = _menhir_discard(_menhir_env$2);
                          var _menhir_s$3 = _menhir_stack$4[1];
                          var _menhir_stack$5 = _menhir_stack$4[0];
                          if (_menhir_s$3 !== 13) {
                            if (_menhir_s$3 !== 31) {
                              if (_menhir_s$3 !== 36) {
                                return _menhir_fail(/* () */0);
                              } else {
                                var match$2 = _menhir_stack$5[0];
                                var _v_000$2 = /* name */_menhir_stack$5[2];
                                var _v$6 = /* record */[
                                  _v_000$2,
                                  /* directives : [] */0,
                                  /* values */_v$5
                                ];
                                return _menhir_goto_enum_type_extension(_menhir_env$3, match$2[0], match$2[1], _v$6);
                              }
                            } else {
                              var _v$7 = _v$5;
                              return _menhir_goto_option_enum_values_definition_(_menhir_env$3, _menhir_stack$5, _menhir_s$3, _v$7);
                            }
                          } else {
                            var match$3 = _menhir_stack$5[0];
                            var match$4 = match$3[0];
                            var _v_000$3 = /* description */match$4[2];
                            var _v_001$2 = /* name */match$3[2];
                            var _v_002$2 = /* directives */flat(_menhir_stack$5[2]);
                            var _v$8 = /* record */[
                              _v_000$3,
                              _v_001$2,
                              _v_002$2,
                              /* values */_v$5
                            ];
                            var _v$9 = /* EnumTypeDefinition */Block.__(4, [_v$8]);
                            return _menhir_goto_type_definition(_menhir_env$3, match$4[0], match$4[1], _v$9);
                          }
                        } else {
                          exit$8 = 1;
                        }
                        if (exit$8 === 1) {
                          if (_menhir_env$2[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    2886,
                                    12
                                  ]
                                ];
                          }
                          _menhir_env$2[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$2, _menhir_stack$4, _menhir_s$2);
                        }
                        
                      }
                    } else {
                      var _v_000$4 = _menhir_stack$4[2];
                      var _v$10 = /* :: */[
                        _v_000$4,
                        _v$5
                      ];
                      __v = _v$10;
                      __menhir_s = _menhir_stack$4[1];
                      __menhir_stack = _menhir_stack$4[0];
                      continue ;
                    }
                  };
              case 13 : 
              case 14 : 
              case 17 : 
              case 18 : 
              case 20 : 
              case 25 : 
              case 26 : 
              case 27 : 
              case 28 : 
              case 33 : 
              case 35 : 
              case 36 : 
              case 37 : 
              case 46 : 
              case 48 : 
              case 49 : 
              case 50 : 
                  exit$7 = 1;
                  break;
              default:
                return _menhir_reduce223(_menhir_env, _menhir_stack$3, /* MenhirState336 */32);
            }
          } else {
            switch (_tok$7.tag | 0) {
              case 0 : 
                  return _menhir_run1(_menhir_env, _menhir_stack$3, /* MenhirState336 */32, _tok$7[0]);
              case 2 : 
              case 3 : 
                  exit$7 = 1;
                  break;
              case 4 : 
                  return _menhir_run91(_menhir_env, _menhir_stack$3, /* MenhirState336 */32, _tok$7[0]);
              default:
                return _menhir_reduce223(_menhir_env, _menhir_stack$3, /* MenhirState336 */32);
            }
          }
          if (exit$7 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      5890,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$3, /* MenhirState336 */32);
          }
          break;
      case 31 : 
          var match$5 = _menhir_stack[0];
          var _v_000$5 = /* name */_menhir_stack[2];
          var _v_001$3 = /* directives */flat(_v);
          var _v$11 = /* record */[
            _v_000$5,
            _v_001$3
          ];
          var _v$12 = /* ScalarTypeExtension */Block.__(0, [_v$11]);
          return _menhir_goto_type_extension(_menhir_env, match$5[0], match$5[1], _v$12);
      case 42 : 
          var match$6 = _menhir_stack[0];
          var match$7 = match$6[0];
          var match$8 = match$7[0];
          var _menhir_s$4 = match$8[1];
          var _menhir_stack$6 = match$8[0];
          var _v_000$6 = /* description */match$8[2];
          var _v_001$4 = /* name */match$7[2];
          var _v_002$3 = /* arguments */flat(match$6[2]);
          var _v_003 = /* tpe */_menhir_stack[2];
          var _v_004 = /* directives */flat(_v);
          var _v$13 = /* record */[
            _v_000$6,
            _v_001$4,
            _v_002$3,
            _v_003,
            _v_004
          ];
          var _menhir_stack$7 = /* tuple */[
            _menhir_stack$6,
            _menhir_s$4,
            _v$13
          ];
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5798,
                    10
                  ]
                ];
          }
          var _tok$9 = _menhir_env[/* _menhir_token */2];
          var exit$9 = 0;
          if (typeof _tok$9 === "number") {
            switch (_tok$9) {
              case 19 : 
                  var _v$14 = /* :: */[
                    _v$13,
                    /* [] */0
                  ];
                  var _menhir_env$4 = _menhir_env;
                  var __menhir_stack$1 = _menhir_stack$6;
                  var __menhir_s$1 = _menhir_s$4;
                  var __v$1 = _v$14;
                  while(true) {
                    var _v$15 = __v$1;
                    var _menhir_s$5 = __menhir_s$1;
                    var _menhir_stack$8 = __menhir_stack$1;
                    if (_menhir_s$5 !== 55) {
                      if (_menhir_s$5 !== 68) {
                        return _menhir_fail(/* () */0);
                      } else {
                        if (_menhir_env$4[/* _menhir_error */3]) {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                /* tuple */[
                                  "gql_parser.ml",
                                  2931,
                                  10
                                ]
                              ];
                        }
                        var _tok$10 = _menhir_env$4[/* _menhir_token */2];
                        var exit$10 = 0;
                        if (typeof _tok$10 === "number" && _tok$10 === 19) {
                          var _menhir_env$5 = _menhir_discard(_menhir_env$4);
                          var _menhir_s$6 = _menhir_stack$8[1];
                          var _menhir_stack$9 = _menhir_stack$8[0];
                          var exit$11 = 0;
                          if (_menhir_s$6 >= 25) {
                            if (_menhir_s$6 >= 53) {
                              if (_menhir_s$6 !== 69) {
                                return _menhir_fail(/* () */0);
                              } else {
                                var match$9 = _menhir_stack$9[0];
                                var _v_000$7 = /* name */_menhir_stack$9[2];
                                var _v$16 = /* record */[
                                  _v_000$7,
                                  /* implements : [] */0,
                                  /* directives : [] */0,
                                  /* fields */_v$15
                                ];
                                return _menhir_goto_object_type_extension(_menhir_env$5, match$9[0], match$9[1], _v$16);
                              }
                            } else if (_menhir_s$6 >= 42) {
                              switch (_menhir_s$6 - 42 | 0) {
                                case 0 : 
                                    var _v$17 = _v$15;
                                    return _menhir_goto_option_fields_definition_(_menhir_env$5, _menhir_stack$9, _menhir_s$6, _v$17);
                                case 1 : 
                                    var match$10 = _menhir_stack$9[0];
                                    var t_000 = /* name */_menhir_stack$9[2];
                                    var t = /* record */[
                                      t_000,
                                      /* directives : [] */0,
                                      /* fields */_v$15
                                    ];
                                    return _menhir_goto_interface_type_extension(_menhir_env$5, match$10[0], match$10[1], t);
                                case 2 : 
                                case 3 : 
                                case 4 : 
                                case 5 : 
                                case 6 : 
                                case 7 : 
                                    return _menhir_fail(/* () */0);
                                case 8 : 
                                case 9 : 
                                case 10 : 
                                    exit$11 = 2;
                                    break;
                                
                              }
                            } else {
                              return _menhir_fail(/* () */0);
                            }
                          } else if (_menhir_s$6 !== 19) {
                            if (_menhir_s$6 >= 24) {
                              var match$11 = _menhir_stack$9[0];
                              var match$12 = match$11[0];
                              var match$13 = match$12[0];
                              var _v_000$8 = /* description */match$13[2];
                              var _v_001$5 = /* name */match$12[2];
                              var _v_002$4 = /* implements */flat(match$11[2]);
                              var _v_003$1 = /* directives */flat(_menhir_stack$9[2]);
                              var _v$18 = /* record */[
                                _v_000$8,
                                _v_001$5,
                                _v_002$4,
                                _v_003$1,
                                /* fields */_v$15
                              ];
                              var _v$19 = /* ObjectTypeDefinition */Block.__(1, [_v$18]);
                              return _menhir_goto_type_definition(_menhir_env$5, match$13[0], match$13[1], _v$19);
                            } else {
                              return _menhir_fail(/* () */0);
                            }
                          } else {
                            var match$14 = _menhir_stack$9[0];
                            var match$15 = match$14[0];
                            var v_000 = /* description */match$15[2];
                            var v_001 = /* name */match$14[2];
                            var v_002 = /* directives */flat(_menhir_stack$9[2]);
                            var v = /* record */[
                              v_000,
                              v_001,
                              v_002,
                              /* fields */_v$15
                            ];
                            var _v$20 = /* InterfaceTypeDefinition */Block.__(2, [v]);
                            return _menhir_goto_type_definition(_menhir_env$5, match$15[0], match$15[1], _v$20);
                          }
                          if (exit$11 === 2) {
                            var _v$21 = _v$15;
                            return _menhir_goto_opt_fields_definition(_menhir_env$5, _menhir_stack$9, _menhir_s$6, _v$21);
                          }
                          
                        } else {
                          exit$10 = 1;
                        }
                        if (exit$10 === 1) {
                          if (_menhir_env$4[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    3103,
                                    12
                                  ]
                                ];
                          }
                          _menhir_env$4[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$4, _menhir_stack$8, _menhir_s$5);
                        }
                        
                      }
                    } else {
                      var _v_000$9 = _menhir_stack$8[2];
                      var _v$22 = /* :: */[
                        _v_000$9,
                        _v$15
                      ];
                      __v$1 = _v$22;
                      __menhir_s$1 = _menhir_stack$8[1];
                      __menhir_stack$1 = _menhir_stack$8[0];
                      continue ;
                    }
                  };
              case 14 : 
              case 17 : 
              case 18 : 
              case 20 : 
              case 26 : 
              case 27 : 
              case 28 : 
              case 35 : 
              case 36 : 
              case 37 : 
              case 46 : 
              case 48 : 
              case 49 : 
              case 50 : 
                  exit$9 = 1;
                  break;
              default:
                return _menhir_reduce223(_menhir_env, _menhir_stack$7, /* MenhirState284 */55);
            }
          } else {
            switch (_tok$9.tag | 0) {
              case 0 : 
                  return _menhir_run1(_menhir_env, _menhir_stack$7, /* MenhirState284 */55, _tok$9[0]);
              case 2 : 
              case 3 : 
                  exit$9 = 1;
                  break;
              case 4 : 
                  return _menhir_run91(_menhir_env, _menhir_stack$7, /* MenhirState284 */55, _tok$9[0]);
              default:
                return _menhir_reduce223(_menhir_env, _menhir_stack$7, /* MenhirState284 */55);
            }
          }
          if (exit$9 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      5818,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$7, /* MenhirState284 */55);
          }
          break;
      case 45 : 
          var match$16 = _menhir_stack[0];
          var match$17 = match$16[0];
          var match$18 = match$17[0];
          var _menhir_s$7 = match$18[1];
          var _menhir_stack$10 = match$18[0];
          var _v_000$10 = /* description */match$18[2];
          var _v_001$6 = /* name */match$17[2];
          var _v_002$5 = /* tpe */match$16[2];
          var _v_003$2 = /* defaultValue */_menhir_stack[2];
          var _v_004$1 = /* directives */flat(_v);
          var _v$23 = /* record */[
            _v_000$10,
            _v_001$6,
            _v_002$5,
            _v_003$2,
            _v_004$1
          ];
          var _menhir_stack$11 = /* tuple */[
            _menhir_stack$10,
            _menhir_s$7,
            _v$23
          ];
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5750,
                    10
                  ]
                ];
          }
          var _tok$11 = _menhir_env[/* _menhir_token */2];
          var exit$12 = 0;
          if (typeof _tok$11 === "number") {
            switch (_tok$11) {
              case 18 : 
              case 19 : 
                  exit$12 = 2;
                  break;
              case 14 : 
              case 17 : 
              case 20 : 
              case 26 : 
              case 27 : 
              case 28 : 
              case 35 : 
              case 36 : 
              case 37 : 
              case 46 : 
              case 48 : 
              case 49 : 
              case 50 : 
                  exit$12 = 1;
                  break;
              default:
                return _menhir_reduce223(_menhir_env, _menhir_stack$11, /* MenhirState274 */58);
            }
          } else {
            switch (_tok$11.tag | 0) {
              case 0 : 
                  return _menhir_run1(_menhir_env, _menhir_stack$11, /* MenhirState274 */58, _tok$11[0]);
              case 2 : 
              case 3 : 
                  exit$12 = 1;
                  break;
              case 4 : 
                  return _menhir_run91(_menhir_env, _menhir_stack$11, /* MenhirState274 */58, _tok$11[0]);
              default:
                return _menhir_reduce223(_menhir_env, _menhir_stack$11, /* MenhirState274 */58);
            }
          }
          switch (exit$12) {
            case 1 : 
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          5770,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack$11, /* MenhirState274 */58);
            case 2 : 
                var _v$24 = /* :: */[
                  _v$23,
                  /* [] */0
                ];
                var _menhir_env$6 = _menhir_env;
                var __menhir_stack$2 = _menhir_stack$10;
                var __menhir_s$2 = _menhir_s$7;
                var __v$2 = _v$24;
                while(true) {
                  var _v$25 = __v$2;
                  var _menhir_s$8 = __menhir_s$2;
                  var _menhir_stack$12 = __menhir_stack$2;
                  if (_menhir_s$8 !== 39) {
                    if (_menhir_s$8 !== 58) {
                      if (_menhir_s$8 !== 65) {
                        return _menhir_fail(/* () */0);
                      } else {
                        if (_menhir_env$6[/* _menhir_error */3]) {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                /* tuple */[
                                  "gql_parser.ml",
                                  3131,
                                  10
                                ]
                              ];
                        }
                        var _tok$12 = _menhir_env$6[/* _menhir_token */2];
                        var exit$13 = 0;
                        if (typeof _tok$12 === "number" && _tok$12 === 18) {
                          var _menhir_env$7 = _menhir_discard(_menhir_env$6);
                          var _v$26 = _v$25;
                          return _menhir_goto_option_arguments_definition_(_menhir_env$7, _menhir_stack$12[0], _menhir_stack$12[1], _v$26);
                        } else {
                          exit$13 = 1;
                        }
                        if (exit$13 === 1) {
                          if (_menhir_env$6[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    3167,
                                    12
                                  ]
                                ];
                          }
                          _menhir_env$6[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$6, _menhir_stack$12, _menhir_s$8);
                        }
                        
                      }
                    } else {
                      var _v_000$11 = _menhir_stack$12[2];
                      var _v$27 = /* :: */[
                        _v_000$11,
                        _v$25
                      ];
                      __v$2 = _v$27;
                      __menhir_s$2 = _menhir_stack$12[1];
                      __menhir_stack$2 = _menhir_stack$12[0];
                      continue ;
                    }
                  } else {
                    if (_menhir_env$6[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              3188,
                              10
                            ]
                          ];
                    }
                    var _tok$13 = _menhir_env$6[/* _menhir_token */2];
                    var exit$14 = 0;
                    if (typeof _tok$13 === "number" && _tok$13 === 19) {
                      var _menhir_env$8 = _menhir_discard(_menhir_env$6);
                      var _menhir_s$9 = _menhir_stack$12[1];
                      var _menhir_stack$13 = _menhir_stack$12[0];
                      if (_menhir_s$9 >= 38) {
                        if (_menhir_s$9 >= 41) {
                          return _menhir_fail(/* () */0);
                        } else {
                          switch (_menhir_s$9 - 38 | 0) {
                            case 0 : 
                                var _v$28 = _v$25;
                                return _menhir_goto_option_input_fields_definition_(_menhir_env$8, _menhir_stack$13, _menhir_s$9, _v$28);
                            case 1 : 
                                return _menhir_fail(/* () */0);
                            case 2 : 
                                var match$19 = _menhir_stack$13[0];
                                var _v_000$12 = /* name */_menhir_stack$13[2];
                                var _v$29 = /* record */[
                                  _v_000$12,
                                  /* directives : [] */0,
                                  /* fields */_v$25
                                ];
                                return _menhir_goto_input_object_type_extension(_menhir_env$8, match$19[0], match$19[1], _v$29);
                            
                          }
                        }
                      } else if (_menhir_s$9 !== 16) {
                        return _menhir_fail(/* () */0);
                      } else {
                        var match$20 = _menhir_stack$13[0];
                        var match$21 = match$20[0];
                        var _v_000$13 = /* description */match$21[2];
                        var _v_001$7 = /* name */match$20[2];
                        var _v_002$6 = /* directives */flat(_menhir_stack$13[2]);
                        var _v$30 = /* record */[
                          _v_000$13,
                          _v_001$7,
                          _v_002$6,
                          /* fields */_v$25
                        ];
                        var _v$31 = /* InputObjectTypeDefinition */Block.__(5, [_v$30]);
                        return _menhir_goto_type_definition(_menhir_env$8, match$21[0], match$21[1], _v$31);
                      }
                    } else {
                      exit$14 = 1;
                    }
                    if (exit$14 === 1) {
                      if (_menhir_env$6[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "gql_parser.ml",
                                3280,
                                12
                              ]
                            ];
                      }
                      _menhir_env$6[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$6, _menhir_stack$12, _menhir_s$8);
                    }
                    
                  }
                };
            
          }
          break;
      case 1 : 
      case 2 : 
      case 4 : 
      case 5 : 
      case 7 : 
      case 9 : 
      case 10 : 
      case 12 : 
      case 13 : 
      case 14 : 
      case 16 : 
      case 17 : 
      case 18 : 
      case 20 : 
      case 21 : 
      case 22 : 
      case 23 : 
      case 24 : 
      case 25 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 29 : 
      case 30 : 
      case 32 : 
      case 33 : 
      case 34 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 38 : 
      case 39 : 
      case 40 : 
      case 41 : 
      case 43 : 
      case 44 : 
      case 46 : 
      case 47 : 
      case 48 : 
      case 49 : 
      case 50 : 
      case 51 : 
      case 52 : 
      case 53 : 
      case 54 : 
      case 55 : 
      case 56 : 
      case 57 : 
      case 58 : 
      case 59 : 
      case 60 : 
          return _menhir_fail(/* () */0);
      case 61 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5722,
                    10
                  ]
                ];
          }
          var _tok$14 = _menhir_env[/* _menhir_token */2];
          var exit$15 = 0;
          if (typeof _tok$14 === "number" && _tok$14 === 36) {
            return _menhir_run239(_menhir_env, _menhir_stack$1, /* MenhirState238 */74);
          } else {
            exit$15 = 1;
          }
          if (exit$15 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      5728,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState238 */74);
          }
          break;
      
    }
  } else {
    return _menhir_fail(/* () */0);
  }
}

function _menhir_run258(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number") {
      switch (_tok) {
        case 0 : 
            return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 1 : 
            return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 2 : 
            return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 3 : 
            return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 4 : 
            return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 5 : 
            return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 6 : 
            return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 7 : 
            return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 8 : 
            return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 9 : 
            return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 10 : 
            return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 11 : 
            return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 12 : 
            return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 13 : 
            return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 15 : 
            return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 16 : 
            return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 21 : 
            return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 22 : 
            return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 23 : 
            return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 24 : 
            return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 25 : 
            return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 26 : 
            __menhir_s = /* MenhirState258 */62;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
        case 29 : 
            return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 30 : 
            return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 31 : 
            return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 32 : 
            return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 33 : 
            return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 34 : 
            return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 38 : 
            return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 39 : 
            return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 40 : 
            return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 41 : 
            return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 42 : 
            return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 43 : 
            return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 44 : 
            return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 45 : 
            return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        case 47 : 
            return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
        default:
          exit = 1;
      }
    } else if (_tok.tag === 1) {
      return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62, _tok[0]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                3534,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState258 */62);
    }
    
  };
}

function _menhir_run127(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run128(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 1 : 
          return _menhir_run129(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 2 : 
          return _menhir_run130(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 3 : 
          return _menhir_run131(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 4 : 
          return _menhir_run132(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 5 : 
          return _menhir_run133(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 6 : 
          return _menhir_run134(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 7 : 
          return _menhir_run135(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 8 : 
          return _menhir_run136(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 9 : 
          return _menhir_run137(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 10 : 
          return _menhir_run138(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 11 : 
          return _menhir_run139(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 12 : 
          return _menhir_run140(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 13 : 
          return _menhir_run141(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 15 : 
          return _menhir_run142(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 16 : 
          return _menhir_run143(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 21 : 
          return _menhir_run144(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 22 : 
          return _menhir_run145(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 23 : 
          return _menhir_run146(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 24 : 
          return _menhir_run147(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 25 : 
          return _menhir_run149(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 29 : 
          return _menhir_run151(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 30 : 
          return _menhir_run152(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 31 : 
          return _menhir_run153(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 32 : 
          return _menhir_run154(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 33 : 
          return _menhir_run155(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 34 : 
          return _menhir_run156(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 38 : 
          return _menhir_run157(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 39 : 
          return _menhir_run158(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 40 : 
          return _menhir_run159(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 41 : 
          return _menhir_run160(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 42 : 
          return _menhir_run161(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 43 : 
          return _menhir_run162(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 44 : 
          return _menhir_run163(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 45 : 
          return _menhir_run164(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 47 : 
          return _menhir_run165(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
      case 28 : 
      case 49 : 
          return _menhir_goto_option_type_condition_(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105, undefined);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run150(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              9316,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState127 */105);
  }
  
}

function _menhir_run183(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* FloatValue */Block.__(2, [_v]);
  return _menhir_goto_value_nc(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run1(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* StringValue */Block.__(0, [_v]);
  return _menhir_goto_string_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run176(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value_nc(_menhir_env$1, _menhir_stack, _menhir_s, /* NullValue */0);
}

function _menhir_run182(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* IntValue */Block.__(1, [Caml_format.caml_int32_of_string(_v)]);
  return _menhir_goto_value_nc(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run184(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value_nc(_menhir_env$1, _menhir_stack, _menhir_s, /* BooleanValue */Block.__(4, [false]));
}

function _menhir_run177(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    if (typeof _tok === "number") {
      switch (_tok) {
        case 0 : 
            return _menhir_run47(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 1 : 
            return _menhir_run48(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 2 : 
            return _menhir_run49(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 3 : 
            return _menhir_run50(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 4 : 
            return _menhir_run51(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 5 : 
            return _menhir_run52(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 6 : 
            return _menhir_run53(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 7 : 
            return _menhir_run54(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 8 : 
            return _menhir_run55(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 9 : 
            return _menhir_run56(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 10 : 
            return _menhir_run57(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 11 : 
            return _menhir_run58(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 12 : 
            return _menhir_run59(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 13 : 
            return _menhir_run175(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 15 : 
            return _menhir_run61(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 16 : 
            return _menhir_run62(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 17 : 
            return _menhir_reduce126(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 21 : 
            return _menhir_run63(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 22 : 
            return _menhir_run64(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 23 : 
            return _menhir_run65(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 24 : 
            return _menhir_run66(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 25 : 
            return _menhir_run176(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 26 : 
            __menhir_s = /* MenhirState177 */98;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
        case 28 : 
            return _menhir_run178(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 29 : 
            return _menhir_run74(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 30 : 
            return _menhir_run76(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 31 : 
            return _menhir_run77(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 32 : 
            return _menhir_run78(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 33 : 
            return _menhir_run184(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 34 : 
            return _menhir_run81(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 38 : 
            return _menhir_run82(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 39 : 
            return _menhir_run83(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 40 : 
            return _menhir_run84(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 41 : 
            return _menhir_run85(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 42 : 
            return _menhir_run86(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 43 : 
            return _menhir_run87(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 44 : 
            return _menhir_run88(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 45 : 
            return _menhir_run89(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 46 : 
            return _menhir_run185(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        case 47 : 
            return _menhir_run90(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
        default:
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    4526,
                    8
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98);
      }
    } else {
      switch (_tok.tag | 0) {
        case 0 : 
            return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98, _tok[0]);
        case 1 : 
            return _menhir_run68(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98, _tok[0]);
        case 2 : 
            return _menhir_run182(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98, _tok[0]);
        case 3 : 
            return _menhir_run183(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98, _tok[0]);
        case 4 : 
            return _menhir_run91(_menhir_env$1, _menhir_stack$1, /* MenhirState177 */98, _tok[0]);
        
      }
    }
  };
}

function _menhir_run178(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 19 : 
          return _menhir_reduce122(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              4613,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState178 */97);
  }
  
}

function _menhir_reduce126(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 93) {
      if (_menhir_s$1 !== 98) {
        return _menhir_fail(/* () */0);
      } else {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  2391,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 17) {
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _v$1 = /* ListValue */Block.__(6, [_v]);
          return _menhir_goto_value_nc(_menhir_env$2, _menhir_stack$1[0], _menhir_stack$1[1], _v$1);
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    2427,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$2 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$2;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_run91(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* BlockStringValue */Block.__(1, [_v]);
  return _menhir_goto_string_value(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run175(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value_nc(_menhir_env$1, _menhir_stack, _menhir_s, /* BooleanValue */Block.__(4, [true]));
}

function _menhir_run67(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, /* NullValue */0);
}

function _menhir_run70(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 19 : 
          return _menhir_reduce120(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              5119,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState70 */115);
  }
  
}

function _menhir_run79(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var v = /* FloatValue */Block.__(1, [_v]);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, v);
}

function _menhir_run60(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, /* BooleanValue */Block.__(3, [true]));
}

function _menhir_run69(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    if (typeof _tok === "number") {
      switch (_tok) {
        case 0 : 
            return _menhir_run47(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 1 : 
            return _menhir_run48(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 2 : 
            return _menhir_run49(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 3 : 
            return _menhir_run50(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 4 : 
            return _menhir_run51(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 5 : 
            return _menhir_run52(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 6 : 
            return _menhir_run53(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 7 : 
            return _menhir_run54(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 8 : 
            return _menhir_run55(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 9 : 
            return _menhir_run56(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 10 : 
            return _menhir_run57(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 11 : 
            return _menhir_run58(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 12 : 
            return _menhir_run59(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 13 : 
            return _menhir_run60(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 15 : 
            return _menhir_run61(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 16 : 
            return _menhir_run62(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 17 : 
            return _menhir_reduce124(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 21 : 
            return _menhir_run63(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 22 : 
            return _menhir_run64(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 23 : 
            return _menhir_run65(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 24 : 
            return _menhir_run66(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 25 : 
            return _menhir_run67(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 26 : 
            __menhir_s = /* MenhirState69 */116;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
        case 28 : 
            return _menhir_run70(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 29 : 
            return _menhir_run74(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 30 : 
            return _menhir_run76(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 31 : 
            return _menhir_run77(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 32 : 
            return _menhir_run78(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 33 : 
            return _menhir_run80(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 34 : 
            return _menhir_run81(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 38 : 
            return _menhir_run82(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 39 : 
            return _menhir_run83(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 40 : 
            return _menhir_run84(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 41 : 
            return _menhir_run85(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 42 : 
            return _menhir_run86(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 43 : 
            return _menhir_run87(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 44 : 
            return _menhir_run88(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 45 : 
            return _menhir_run89(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        case 47 : 
            return _menhir_run90(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
        default:
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    5032,
                    8
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116);
      }
    } else {
      switch (_tok.tag | 0) {
        case 0 : 
            return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116, _tok[0]);
        case 1 : 
            return _menhir_run68(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116, _tok[0]);
        case 2 : 
            return _menhir_run75(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116, _tok[0]);
        case 3 : 
            return _menhir_run79(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116, _tok[0]);
        case 4 : 
            return _menhir_run91(_menhir_env$1, _menhir_stack$1, /* MenhirState69 */116, _tok[0]);
        
      }
    }
  };
}

function _menhir_run75(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var v = /* IntValue */Block.__(0, [Caml_format.caml_int32_of_string(_v)]);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, v);
}

function _menhir_run80(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_value(_menhir_env$1, _menhir_stack, _menhir_s, /* BooleanValue */Block.__(3, [false]));
}

function _menhir_reduce124(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 112) {
      if (_menhir_s$1 !== 116) {
        return _menhir_fail(/* () */0);
      } else {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  2580,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 17) {
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var v = /* ListValue */Block.__(5, [_v]);
          return _menhir_goto_value(_menhir_env$2, _menhir_stack$1[0], _menhir_stack$1[1], v);
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    2616,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$1 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$1;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_goto_option_selection_set_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  switch (_menhir_s) {
    case 81 : 
        var match = _menhir_stack[0];
        var match$1 = match[0];
        var _v_001 = /* name */match$1[2];
        var _v_002 = /* arguments */flat(match[2]);
        var _v_003 = /* directives */flat(_menhir_stack[2]);
        var _v_004 = /* selectionSet */flat(_v);
        var _v$1 = /* record */[
          /* alias */undefined,
          _v_001,
          _v_002,
          _v_003,
          _v_004
        ];
        return _menhir_goto_field(_menhir_env, match$1[0], match$1[1], _v$1);
    case 82 : 
        return _menhir_fail(/* () */0);
    case 83 : 
        var match$2 = _menhir_stack[0];
        var match$3 = match$2[0];
        var match$4 = match$3[0][0];
        var _v_000 = /* alias */match$4[2];
        var _v_001$1 = /* name */match$3[2];
        var _v_002$1 = /* arguments */flat(match$2[2]);
        var _v_003$1 = /* directives */flat(_menhir_stack[2]);
        var _v_004$1 = /* selectionSet */flat(_v);
        var _v$2 = /* record */[
          _v_000,
          _v_001$1,
          _v_002$1,
          _v_003$1,
          _v_004$1
        ];
        return _menhir_goto_field(_menhir_env, match$4[0], match$4[1], _v$2);
    default:
      return _menhir_fail(/* () */0);
  }
}

function _menhir_goto_option_PIPE_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_s !== 10) {
    if (_menhir_s !== 73) {
      return _menhir_fail(/* () */0);
    } else {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                1033,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number") {
        switch (_tok) {
          case 0 : 
              return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 1 : 
              return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 2 : 
              return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 3 : 
              return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 4 : 
              return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 5 : 
              return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 6 : 
              return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 7 : 
              return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 8 : 
              return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 9 : 
              return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 10 : 
              return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 11 : 
              return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 12 : 
              return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 13 : 
              return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 15 : 
              return _menhir_run18(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 16 : 
              return _menhir_run19(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 21 : 
              return _menhir_run20(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 22 : 
              return _menhir_run21(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 23 : 
              return _menhir_run22(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 24 : 
              return _menhir_run23(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 25 : 
              return _menhir_run24(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 29 : 
              return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 30 : 
              return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 31 : 
              return _menhir_run28(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 32 : 
              return _menhir_run29(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 33 : 
              return _menhir_run30(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 34 : 
              return _menhir_run31(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 38 : 
              return _menhir_run32(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 39 : 
              return _menhir_run33(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 40 : 
              return _menhir_run34(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 41 : 
              return _menhir_run35(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 42 : 
              return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 43 : 
              return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 44 : 
              return _menhir_run38(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 45 : 
              return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          case 47 : 
              return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
          default:
            exit = 1;
        }
      } else if (_tok.tag === 1) {
        return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState241 */72, _tok[0]);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  1111,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState241 */72);
      }
      
    }
  } else {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              1117,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number") {
      switch (_tok$1) {
        case 2 : 
            return _menhir_run387(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 3 : 
            return _menhir_run388(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 4 : 
            return _menhir_run389(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 5 : 
            return _menhir_run390(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 6 : 
            return _menhir_run391(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 7 : 
            return _menhir_run392(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 8 : 
            return _menhir_run393(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 9 : 
            return _menhir_run394(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 10 : 
            return _menhir_run395(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 11 : 
            return _menhir_run396(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 12 : 
            return _menhir_run397(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 39 : 
            return _menhir_run398(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 40 : 
            return _menhir_run399(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 41 : 
            return _menhir_run400(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 42 : 
            return _menhir_run401(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 43 : 
            return _menhir_run402(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 44 : 
            return _menhir_run403(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 45 : 
            return _menhir_run404(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
        case 0 : 
        case 1 : 
        case 13 : 
        case 14 : 
        case 15 : 
        case 16 : 
        case 17 : 
        case 18 : 
        case 19 : 
        case 20 : 
        case 21 : 
        case 22 : 
        case 23 : 
        case 24 : 
        case 25 : 
        case 26 : 
        case 27 : 
        case 28 : 
        case 29 : 
        case 30 : 
        case 31 : 
        case 32 : 
        case 33 : 
        case 34 : 
        case 35 : 
        case 36 : 
        case 37 : 
        case 38 : 
        case 46 : 
        case 47 : 
        case 48 : 
        case 49 : 
        case 50 : 
            exit$1 = 1;
            break;
        
      }
    } else {
      exit$1 = 1;
    }
    if (exit$1 === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                1157,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState408 */8);
    }
    
  }
}

function _menhir_goto_interface_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* InterfaceTypeExtension */Block.__(2, [_v]);
  return _menhir_goto_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run126(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 14 : 
          return _menhir_run127(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              11322,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState126 */106);
  }
  
}

function _menhir_goto_selection(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            1177,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 1 : 
          return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 2 : 
          return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 3 : 
          return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 4 : 
          return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 5 : 
          return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 6 : 
          return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 7 : 
          return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 8 : 
          return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 9 : 
          return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 10 : 
          return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 11 : 
          return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 12 : 
          return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 13 : 
          return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 14 : 
          return _menhir_run127(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 15 : 
          return _menhir_run18(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 16 : 
          return _menhir_run19(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 19 : 
          var _v$1 = /* :: */[
            _v,
            /* [] */0
          ];
          var _menhir_env$1 = _menhir_env;
          var __menhir_stack = _menhir_stack;
          var __menhir_s = _menhir_s;
          var __v = _v$1;
          while(true) {
            var _v$2 = __v;
            var _menhir_s$1 = __menhir_s;
            var _menhir_stack$2 = __menhir_stack;
            if (_menhir_s$1 !== 88) {
              if (_menhir_s$1 !== 106) {
                return _menhir_fail(/* () */0);
              } else {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          777,
                          10
                        ]
                      ];
                }
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                var exit$1 = 0;
                if (typeof _tok$1 === "number" && _tok$1 === 19) {
                  var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                  var _menhir_s$2 = _menhir_stack$2[1];
                  var _menhir_stack$3 = _menhir_stack$2[0];
                  var exit$2 = 0;
                  var switcher = _menhir_s$2 - 2 | 0;
                  if (switcher > 118 || switcher < 0) {
                    if (switcher !== -1) {
                      var _v$3 = /* record */[
                        /* tpe : Query */0,
                        /* name */undefined,
                        /* variables : [] */0,
                        /* directives : [] */0,
                        /* selectionSet */_v$2
                      ];
                      return _menhir_goto_operation_definition(_menhir_env$2, _menhir_stack$3, _menhir_s$2, _v$3);
                    } else {
                      var match = _menhir_stack$3[0];
                      var match$1 = match[0];
                      var match$2 = match$1[0];
                      var _v_000 = /* tpe */match$2[2];
                      var _v_001 = /* name */match$1[2];
                      var _v_002 = /* variables */flat(match[1]);
                      var _v_003 = /* directives */flat(_menhir_stack$3[2]);
                      var _v$4 = /* record */[
                        _v_000,
                        _v_001,
                        _v_002,
                        _v_003,
                        /* selectionSet */_v$2
                      ];
                      return _menhir_goto_operation_definition(_menhir_env$2, match$2[0], match$2[1], _v$4);
                    }
                  } else {
                    switch (switcher) {
                      case 75 : 
                          var match$3 = _menhir_stack$3[0];
                          var match$4 = match$3[0];
                          var match$5 = match$4[0];
                          var _v_000$1 = /* name */match$4[2];
                          var _v_001$1 = /* condition */match$3[2];
                          var _v_002$1 = /* directives */flat(_menhir_stack$3[2]);
                          var _v$5 = /* record */[
                            _v_000$1,
                            _v_001$1,
                            _v_002$1,
                            /* selectionSet */_v$2
                          ];
                          var _v$6 = /* FragmentDefinition */Block.__(1, [_v$5]);
                          return _menhir_goto_executable_definition(_menhir_env$2, match$5[0], match$5[1], _v$6);
                      case 79 : 
                      case 81 : 
                          exit$2 = 2;
                          break;
                      case 76 : 
                      case 77 : 
                      case 78 : 
                      case 80 : 
                      case 82 : 
                      case 83 : 
                      case 84 : 
                      case 85 : 
                      case 86 : 
                      case 87 : 
                      case 88 : 
                          return _menhir_fail(/* () */0);
                      case 89 : 
                          var match$6 = _menhir_stack$3[0];
                          var match$7 = match$6[0];
                          var _v_000$2 = /* condition */match$6[2];
                          var _v_001$2 = /* directives */flat(_menhir_stack$3[2]);
                          var _v$7 = /* record */[
                            _v_000$2,
                            _v_001$2,
                            /* selectionSet */_v$2
                          ];
                          var _v$8 = /* InlineFragment */Block.__(2, [_v$7]);
                          return _menhir_goto_selection(_menhir_env$2, match$7[0], match$7[1], _v$8);
                      default:
                        return _menhir_fail(/* () */0);
                    }
                  }
                  if (exit$2 === 2) {
                    var _v$9 = _v$2;
                    return _menhir_goto_option_selection_set_(_menhir_env$2, _menhir_stack$3, _menhir_s$2, _v$9);
                  }
                  
                } else {
                  exit$1 = 1;
                }
                if (exit$1 === 1) {
                  if (_menhir_env$1[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            920,
                            12
                          ]
                        ];
                  }
                  _menhir_env$1[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, _menhir_s$1);
                }
                
              }
            } else {
              var _v_000$3 = _menhir_stack$2[2];
              var _v$10 = /* :: */[
                _v_000$3,
                _v$2
              ];
              __v = _v$10;
              __menhir_s = _menhir_stack$2[1];
              __menhir_stack = _menhir_stack$2[0];
              continue ;
            }
          };
      case 21 : 
          return _menhir_run20(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 22 : 
          return _menhir_run21(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 23 : 
          return _menhir_run22(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 24 : 
          return _menhir_run23(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 25 : 
          return _menhir_run24(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 29 : 
          return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 30 : 
          return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 31 : 
          return _menhir_run28(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 32 : 
          return _menhir_run29(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 33 : 
          return _menhir_run30(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 34 : 
          return _menhir_run31(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 38 : 
          return _menhir_run32(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 39 : 
          return _menhir_run33(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 40 : 
          return _menhir_run34(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 41 : 
          return _menhir_run35(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 42 : 
          return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 43 : 
          return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 44 : 
          return _menhir_run38(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 45 : 
          return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      case 47 : 
          return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState213 */88, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              1267,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState213 */88);
  }
  
}

function _menhir_reduce241(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_selection_set_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_run168(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              4150,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState168 */102);
  }
  
}

function _menhir_reduce227(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_directives_nc_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_operation_type(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var switcher = _menhir_s - 48 | 0;
  if (switcher > 62 || switcher < 0) {
    if ((switcher + 47 >>> 0) > 119) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                9131,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number") {
        switch (_tok) {
          case 0 : 
              return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 1 : 
              return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 2 : 
              return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 3 : 
              return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 4 : 
              return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 5 : 
              return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 6 : 
              return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 7 : 
              return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 8 : 
              return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 9 : 
              return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 10 : 
              return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 11 : 
              return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 12 : 
              return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 13 : 
              return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 15 : 
              return _menhir_run18(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 16 : 
              return _menhir_run19(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 21 : 
              return _menhir_run20(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 22 : 
              return _menhir_run21(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 23 : 
              return _menhir_run22(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 24 : 
              return _menhir_run23(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 25 : 
              return _menhir_run24(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 29 : 
              return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 30 : 
              return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 31 : 
              return _menhir_run28(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 32 : 
              return _menhir_run29(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 33 : 
              return _menhir_run30(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 34 : 
              return _menhir_run31(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 38 : 
              return _menhir_run32(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 39 : 
              return _menhir_run33(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 40 : 
              return _menhir_run34(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 41 : 
              return _menhir_run35(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 42 : 
              return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 43 : 
              return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 44 : 
              return _menhir_run38(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 45 : 
              return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 47 : 
              return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
          case 27 : 
          case 28 : 
          case 49 : 
              exit = 2;
              break;
          default:
            exit = 1;
        }
      } else if (_tok.tag === 1) {
        return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState411 */7, _tok[0]);
      } else {
        exit = 1;
      }
      switch (exit) {
        case 1 : 
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      9219,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState411 */7);
        case 2 : 
            return _menhir_goto_option_name_(_menhir_env, _menhir_stack$1, /* MenhirState411 */7, undefined);
        
      }
    } else {
      return _menhir_fail(/* () */0);
    }
  } else if (switcher > 60 || switcher < 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              9034,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 48) {
      var _menhir_env$1 = _menhir_discard(_menhir_env);
      var _tok$2 = _menhir_env$1[/* _menhir_token */2];
      var exit$2 = 0;
      if (typeof _tok$2 === "number") {
        switch (_tok$2) {
          case 0 : 
              return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 1 : 
              return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 2 : 
              return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 3 : 
              return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 4 : 
              return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 5 : 
              return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 6 : 
              return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 7 : 
              return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 8 : 
              return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 9 : 
              return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 10 : 
              return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 11 : 
              return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 12 : 
              return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 13 : 
              return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 15 : 
              return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 16 : 
              return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 21 : 
              return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 22 : 
              return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 23 : 
              return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 24 : 
              return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 25 : 
              return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 29 : 
              return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 30 : 
              return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 31 : 
              return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 32 : 
              return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 33 : 
              return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 34 : 
              return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 38 : 
              return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 39 : 
              return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 40 : 
              return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 41 : 
              return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 42 : 
              return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 43 : 
              return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 44 : 
              return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 45 : 
              return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          case 47 : 
              return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
          default:
            exit$2 = 2;
        }
      } else if (_tok$2.tag === 1) {
        return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108, _tok$2[0]);
      } else {
        exit$2 = 2;
      }
      if (exit$2 === 2) {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  9118,
                  16
                ]
              ];
        }
        _menhir_env$1[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState116 */108);
      }
      
    } else {
      exit$1 = 1;
    }
    if (exit$1 === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                9122,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    }
    
  } else {
    return _menhir_fail(/* () */0);
  }
}

function _menhir_goto_option_arguments_(_menhir_env, _menhir_stack, _v) {
  var match = _menhir_stack[0];
  var _menhir_s = match[1];
  var _menhir_stack$1 = match[0];
  var r_000 = /* name */_menhir_stack[2];
  var r_001 = /* arguments */flat(_v);
  var r = /* record */[
    r_000,
    r_001
  ];
  var _menhir_stack$2 = /* tuple */[
    _menhir_stack$1,
    _menhir_s,
    r
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            4308,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 49 : 
          return _menhir_run3(_menhir_env, _menhir_stack$2, /* MenhirState124 */107);
      case 14 : 
      case 17 : 
      case 20 : 
      case 26 : 
      case 27 : 
      case 35 : 
      case 46 : 
      case 48 : 
      case 50 : 
          exit = 1;
          break;
      default:
        exit = 2;
    }
  } else {
    switch (_tok.tag | 0) {
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      default:
        exit = 2;
    }
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  4324,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState124 */107);
    case 2 : 
        var _v$1 = /* :: */[
          r,
          /* [] */0
        ];
        var _menhir_env$1 = _menhir_env;
        var __menhir_stack = _menhir_stack$1;
        var __menhir_s = _menhir_s;
        var __v = _v$1;
        while(true) {
          var _v$2 = __v;
          var _menhir_s$1 = __menhir_s;
          var _menhir_stack$3 = __menhir_stack;
          var exit$1 = 0;
          if (_menhir_s$1 >= 14) {
            switch (_menhir_s$1 - 14 | 0) {
              case 93 : 
                  var _v_000 = _menhir_stack$3[2];
                  var _v$3 = /* :: */[
                    _v_000,
                    _v$2
                  ];
                  __v = _v$3;
                  __menhir_s = _menhir_stack$3[1];
                  __menhir_stack = _menhir_stack$3[0];
                  continue ;
              case 0 : 
              case 3 : 
              case 6 : 
              case 8 : 
              case 11 : 
              case 15 : 
              case 19 : 
              case 22 : 
              case 26 : 
              case 29 : 
              case 31 : 
              case 35 : 
              case 38 : 
              case 42 : 
              case 45 : 
              case 55 : 
              case 61 : 
              case 106 : 
                  exit$1 = 1;
                  break;
              case 1 : 
              case 2 : 
              case 4 : 
              case 5 : 
              case 7 : 
              case 9 : 
              case 10 : 
              case 12 : 
              case 13 : 
              case 14 : 
              case 16 : 
              case 17 : 
              case 18 : 
              case 20 : 
              case 21 : 
              case 23 : 
              case 24 : 
              case 25 : 
              case 27 : 
              case 28 : 
              case 30 : 
              case 32 : 
              case 33 : 
              case 34 : 
              case 36 : 
              case 37 : 
              case 39 : 
              case 40 : 
              case 41 : 
              case 43 : 
              case 44 : 
              case 46 : 
              case 47 : 
              case 48 : 
              case 49 : 
              case 50 : 
              case 51 : 
              case 52 : 
              case 53 : 
              case 54 : 
              case 56 : 
              case 57 : 
              case 58 : 
              case 59 : 
              case 60 : 
              case 62 : 
              case 63 : 
              case 64 : 
              case 65 : 
              case 66 : 
              case 67 : 
              case 68 : 
              case 69 : 
              case 70 : 
              case 71 : 
              case 72 : 
              case 73 : 
              case 74 : 
              case 75 : 
              case 76 : 
              case 77 : 
              case 78 : 
              case 79 : 
              case 80 : 
              case 81 : 
              case 82 : 
              case 83 : 
              case 84 : 
              case 85 : 
              case 86 : 
              case 87 : 
              case 88 : 
              case 89 : 
              case 90 : 
              case 91 : 
              case 92 : 
              case 94 : 
              case 95 : 
              case 96 : 
              case 97 : 
              case 98 : 
              case 99 : 
              case 100 : 
              case 101 : 
              case 102 : 
              case 103 : 
              case 104 : 
              case 105 : 
              case 107 : 
                  return _menhir_fail(/* () */0);
              
            }
          } else {
            return _menhir_fail(/* () */0);
          }
          if (exit$1 === 1) {
            var _menhir_stack$4 = /* tuple */[
              _menhir_stack$3,
              _menhir_s$1,
              _v$2
            ];
            if (_menhir_s$1 >= 14) {
              switch (_menhir_s$1 - 14 | 0) {
                case 22 : 
                    if (_menhir_env$1[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              2259,
                              14
                            ]
                          ];
                    }
                    var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                    var exit$2 = 0;
                    if (typeof _tok$1 === "number") {
                      switch (_tok$1) {
                        case 28 : 
                            return _menhir_run330(_menhir_env$1, _menhir_stack$4, /* MenhirState339 */31);
                        case 0 : 
                        case 1 : 
                        case 15 : 
                        case 16 : 
                        case 21 : 
                        case 22 : 
                        case 23 : 
                        case 29 : 
                        case 30 : 
                        case 32 : 
                        case 34 : 
                        case 37 : 
                        case 38 : 
                        case 47 : 
                            exit$2 = 3;
                            break;
                        default:
                          exit$2 = 2;
                      }
                    } else {
                      switch (_tok$1.tag | 0) {
                        case 0 : 
                        case 4 : 
                            exit$2 = 3;
                            break;
                        default:
                          exit$2 = 2;
                      }
                    }
                    switch (exit$2) {
                      case 2 : 
                          if (_menhir_env$1[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    2275,
                                    16
                                  ]
                                ];
                          }
                          _menhir_env$1[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$1, _menhir_stack$4, /* MenhirState339 */31);
                      case 3 : 
                          return _menhir_goto_option_enum_values_definition_(_menhir_env$1, _menhir_stack$4, /* MenhirState339 */31, undefined);
                      
                    }
                    break;
                case 26 : 
                    if (_menhir_env$1[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              2237,
                              14
                            ]
                          ];
                    }
                    var _tok$2 = _menhir_env$1[/* _menhir_token */2];
                    var exit$3 = 0;
                    if (typeof _tok$2 === "number") {
                      switch (_tok$2) {
                        case 28 : 
                            return _menhir_run321(_menhir_env$1, _menhir_stack$4, /* MenhirState325 */38);
                        case 0 : 
                        case 1 : 
                        case 15 : 
                        case 16 : 
                        case 21 : 
                        case 22 : 
                        case 23 : 
                        case 29 : 
                        case 30 : 
                        case 32 : 
                        case 34 : 
                        case 37 : 
                        case 38 : 
                        case 47 : 
                            exit$3 = 3;
                            break;
                        default:
                          exit$3 = 2;
                      }
                    } else {
                      switch (_tok$2.tag | 0) {
                        case 0 : 
                        case 4 : 
                            exit$3 = 3;
                            break;
                        default:
                          exit$3 = 2;
                      }
                    }
                    switch (exit$3) {
                      case 2 : 
                          if (_menhir_env$1[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    2253,
                                    16
                                  ]
                                ];
                          }
                          _menhir_env$1[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$1, _menhir_stack$4, /* MenhirState325 */38);
                      case 3 : 
                          return _menhir_goto_option_input_fields_definition_(_menhir_env$1, _menhir_stack$4, /* MenhirState325 */38, undefined);
                      
                    }
                    break;
                case 29 : 
                    if (_menhir_env$1[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              2215,
                              14
                            ]
                          ];
                    }
                    var _tok$3 = _menhir_env$1[/* _menhir_token */2];
                    var exit$4 = 0;
                    if (typeof _tok$3 === "number") {
                      switch (_tok$3) {
                        case 28 : 
                            return _menhir_run250(_menhir_env$1, _menhir_stack$4, /* MenhirState316 */42);
                        case 0 : 
                        case 1 : 
                        case 15 : 
                        case 16 : 
                        case 21 : 
                        case 22 : 
                        case 23 : 
                        case 29 : 
                        case 30 : 
                        case 32 : 
                        case 34 : 
                        case 37 : 
                        case 38 : 
                        case 47 : 
                            exit$4 = 3;
                            break;
                        default:
                          exit$4 = 2;
                      }
                    } else {
                      switch (_tok$3.tag | 0) {
                        case 0 : 
                        case 4 : 
                            exit$4 = 3;
                            break;
                        default:
                          exit$4 = 2;
                      }
                    }
                    switch (exit$4) {
                      case 2 : 
                          if (_menhir_env$1[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    2231,
                                    16
                                  ]
                                ];
                          }
                          _menhir_env$1[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$1, _menhir_stack$4, /* MenhirState316 */42);
                      case 3 : 
                          return _menhir_goto_option_fields_definition_(_menhir_env$1, _menhir_stack$4, /* MenhirState316 */42, undefined);
                      
                    }
                    break;
                case 35 : 
                    if (_menhir_env$1[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              2193,
                              14
                            ]
                          ];
                    }
                    var _tok$4 = _menhir_env$1[/* _menhir_token */2];
                    var exit$5 = 0;
                    if (typeof _tok$4 === "number") {
                      switch (_tok$4) {
                        case 28 : 
                            return _menhir_run303(_menhir_env$1, _menhir_stack$4, /* MenhirState307 */47);
                        case 0 : 
                        case 1 : 
                        case 15 : 
                        case 16 : 
                        case 21 : 
                        case 22 : 
                        case 23 : 
                        case 29 : 
                        case 30 : 
                        case 32 : 
                        case 34 : 
                        case 37 : 
                        case 38 : 
                        case 47 : 
                            exit$5 = 3;
                            break;
                        default:
                          exit$5 = 2;
                      }
                    } else {
                      switch (_tok$4.tag | 0) {
                        case 0 : 
                        case 4 : 
                            exit$5 = 3;
                            break;
                        default:
                          exit$5 = 2;
                      }
                    }
                    switch (exit$5) {
                      case 2 : 
                          if (_menhir_env$1[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    2209,
                                    16
                                  ]
                                ];
                          }
                          _menhir_env$1[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$1, _menhir_stack$4, /* MenhirState307 */47);
                      case 3 : 
                          return _menhir_goto_option_schema_extension_rest_(_menhir_env$1, _menhir_stack$4, /* MenhirState307 */47, undefined);
                      
                    }
                    break;
                case 38 : 
                    if (_menhir_env$1[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              2165,
                              14
                            ]
                          ];
                    }
                    var _tok$5 = _menhir_env$1[/* _menhir_token */2];
                    var exit$6 = 0;
                    if (typeof _tok$5 === "number") {
                      switch (_tok$5) {
                        case 28 : 
                            return _menhir_run250(_menhir_env$1, _menhir_stack$4, /* MenhirState297 */51);
                        case 0 : 
                        case 1 : 
                        case 15 : 
                        case 16 : 
                        case 21 : 
                        case 22 : 
                        case 23 : 
                        case 29 : 
                        case 30 : 
                        case 32 : 
                        case 34 : 
                        case 37 : 
                        case 38 : 
                        case 47 : 
                            return _menhir_reduce209(_menhir_env$1, _menhir_stack$4, /* MenhirState297 */51);
                        default:
                          exit$6 = 2;
                      }
                    } else {
                      switch (_tok$5.tag | 0) {
                        case 0 : 
                        case 4 : 
                            return _menhir_reduce209(_menhir_env$1, _menhir_stack$4, /* MenhirState297 */51);
                        default:
                          exit$6 = 2;
                      }
                    }
                    if (exit$6 === 2) {
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "gql_parser.ml",
                                2173,
                                16
                              ]
                            ];
                      }
                      _menhir_env$1[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$1, _menhir_stack$4, /* MenhirState297 */51);
                    }
                    break;
                case 55 : 
                    if (_menhir_env$1[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              2179,
                              14
                            ]
                          ];
                    }
                    var _tok$6 = _menhir_env$1[/* _menhir_token */2];
                    var exit$7 = 0;
                    if (typeof _tok$6 === "number") {
                      switch (_tok$6) {
                        case 28 : 
                            return _menhir_run250(_menhir_env$1, _menhir_stack$4, /* MenhirState300 */50);
                        case 0 : 
                        case 1 : 
                        case 15 : 
                        case 16 : 
                        case 21 : 
                        case 22 : 
                        case 23 : 
                        case 29 : 
                        case 30 : 
                        case 32 : 
                        case 34 : 
                        case 37 : 
                        case 38 : 
                        case 47 : 
                            return _menhir_reduce209(_menhir_env$1, _menhir_stack$4, /* MenhirState300 */50);
                        default:
                          exit$7 = 2;
                      }
                    } else {
                      switch (_tok$6.tag | 0) {
                        case 0 : 
                        case 4 : 
                            return _menhir_reduce209(_menhir_env$1, _menhir_stack$4, /* MenhirState300 */50);
                        default:
                          exit$7 = 2;
                      }
                    }
                    if (exit$7 === 2) {
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "gql_parser.ml",
                                2187,
                                16
                              ]
                            ];
                      }
                      _menhir_env$1[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$1, _menhir_stack$4, /* MenhirState300 */50);
                    }
                    break;
                case 61 : 
                    if (_menhir_env$1[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "gql_parser.ml",
                              2138,
                              14
                            ]
                          ];
                    }
                    var _tok$7 = _menhir_env$1[/* _menhir_token */2];
                    var exit$8 = 0;
                    if (typeof _tok$7 === "number") {
                      switch (_tok$7) {
                        case 36 : 
                            return _menhir_reduce226(_menhir_env$1, _menhir_stack$4);
                        case 0 : 
                        case 1 : 
                        case 15 : 
                        case 16 : 
                        case 21 : 
                        case 22 : 
                        case 23 : 
                        case 28 : 
                        case 29 : 
                        case 30 : 
                        case 32 : 
                        case 34 : 
                        case 37 : 
                        case 38 : 
                        case 47 : 
                            exit$8 = 3;
                            break;
                        default:
                          exit$8 = 2;
                      }
                    } else {
                      switch (_tok$7.tag | 0) {
                        case 0 : 
                        case 4 : 
                            exit$8 = 3;
                            break;
                        default:
                          exit$8 = 2;
                      }
                    }
                    switch (exit$8) {
                      case 2 : 
                          if (_menhir_env$1[/* _menhir_error */3]) {
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "gql_parser.ml",
                                    2156,
                                    16
                                  ]
                                ];
                          }
                          _menhir_env$1[/* _menhir_error */3] = true;
                          return _menhir_errorcase(_menhir_env$1, _menhir_stack$3, _menhir_s$1);
                      case 3 : 
                          var match$1 = _menhir_stack$3[0];
                          var _v_000$1 = /* name */_menhir_stack$3[2];
                          var _v$4 = /* record */[
                            _v_000$1,
                            /* directives */_v$2,
                            /* types : [] */0
                          ];
                          return _menhir_goto_union_type_extension(_menhir_env$1, match$1[0], match$1[1], _v$4);
                      
                    }
                    break;
                case 0 : 
                case 3 : 
                case 6 : 
                case 8 : 
                case 11 : 
                case 15 : 
                case 19 : 
                case 31 : 
                case 42 : 
                case 45 : 
                case 106 : 
                    return _menhir_reduce226(_menhir_env$1, _menhir_stack$4);
                case 1 : 
                case 2 : 
                case 4 : 
                case 5 : 
                case 7 : 
                case 9 : 
                case 10 : 
                case 12 : 
                case 13 : 
                case 14 : 
                case 16 : 
                case 17 : 
                case 18 : 
                case 20 : 
                case 21 : 
                case 23 : 
                case 24 : 
                case 25 : 
                case 27 : 
                case 28 : 
                case 30 : 
                case 32 : 
                case 33 : 
                case 34 : 
                case 36 : 
                case 37 : 
                case 39 : 
                case 40 : 
                case 41 : 
                case 43 : 
                case 44 : 
                case 46 : 
                case 47 : 
                case 48 : 
                case 49 : 
                case 50 : 
                case 51 : 
                case 52 : 
                case 53 : 
                case 54 : 
                case 56 : 
                case 57 : 
                case 58 : 
                case 59 : 
                case 60 : 
                case 62 : 
                case 63 : 
                case 64 : 
                case 65 : 
                case 66 : 
                case 67 : 
                case 68 : 
                case 69 : 
                case 70 : 
                case 71 : 
                case 72 : 
                case 73 : 
                case 74 : 
                case 75 : 
                case 76 : 
                case 77 : 
                case 78 : 
                case 79 : 
                case 80 : 
                case 81 : 
                case 82 : 
                case 83 : 
                case 84 : 
                case 85 : 
                case 86 : 
                case 87 : 
                case 88 : 
                case 89 : 
                case 90 : 
                case 91 : 
                case 92 : 
                case 93 : 
                case 94 : 
                case 95 : 
                case 96 : 
                case 97 : 
                case 98 : 
                case 99 : 
                case 100 : 
                case 101 : 
                case 102 : 
                case 103 : 
                case 104 : 
                case 105 : 
                case 107 : 
                    return _menhir_fail(/* () */0);
                
              }
            } else {
              return _menhir_fail(/* () */0);
            }
          }
          
        };
    
  }
}

function _menhir_goto_option_implements_interfaces_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            3326,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 28) {
      if (_tok !== 49) {
        exit = 1;
      } else {
        return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState361 */25);
      }
    } else {
      return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState361 */25);
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3334,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState361 */25);
  }
  
}

function _menhir_reduce223(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_description_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_run170(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 1 : 
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 2 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 3 : 
          return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 4 : 
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 5 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 6 : 
          return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 7 : 
          return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 8 : 
          return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 9 : 
          return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 10 : 
          return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 11 : 
          return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 12 : 
          return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 13 : 
          return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 15 : 
          return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 16 : 
          return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 21 : 
          return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 22 : 
          return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 23 : 
          return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 24 : 
          return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 25 : 
          return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 29 : 
          return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 30 : 
          return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 31 : 
          return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 32 : 
          return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 33 : 
          return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 34 : 
          return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 38 : 
          return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 39 : 
          return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 40 : 
          return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 41 : 
          return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 42 : 
          return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 43 : 
          return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 44 : 
          return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 45 : 
          return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      case 47 : 
          return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3628,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState170 */100);
  }
  
}

function _menhir_run113(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_operation_type(_menhir_env$1, _menhir_stack, _menhir_s, /* Mutation */1);
}

function _menhir_run286(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 14 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 46 : 
      case 48 : 
      case 49 : 
          exit = 1;
          break;
      case 50 : 
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _v = /* () */0;
          return _menhir_goto_option_AMPERSAND_(_menhir_env$2, _menhir_stack$1, _v);
      default:
        return _menhir_goto_option_AMPERSAND_(_menhir_env$1, _menhir_stack$1, undefined);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
      case 2 : 
      case 3 : 
      case 4 : 
          exit = 1;
          break;
      default:
        return _menhir_goto_option_AMPERSAND_(_menhir_env$1, _menhir_stack$1, undefined);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3444,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_reduce219(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_arguments_nc_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_run111(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_operation_type(_menhir_env$1, _menhir_stack, _menhir_s, /* Subscription */2);
}

function _menhir_goto_option_name_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            6001,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    var switcher = _tok - 27 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        return _menhir_goto_option_variable_definitions_(_menhir_env, _menhir_stack$1, undefined);
      } else {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var _tok$1 = _menhir_env$1[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok$1 === "number" && _tok$1 === 46) {
          return _menhir_run185(_menhir_env$1, _menhir_stack$1, /* MenhirState413 */6);
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    6013,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState413 */6);
        }
        
      }
    } else if (switcher !== 22) {
      exit = 1;
    } else {
      return _menhir_goto_option_variable_definitions_(_menhir_env, _menhir_stack$1, undefined);
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              6026,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_goto_tpe(__menhir_env, __menhir_stack, __menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    if (_menhir_s >= 57) {
      if (_menhir_s >= 64) {
        return _menhir_fail(/* () */0);
      } else {
        switch (_menhir_s - 57 | 0) {
          case 0 : 
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        3866,
                        10
                      ]
                    ];
              }
              var _tok = _menhir_env[/* _menhir_token */2];
              var exit = 0;
              if (typeof _tok === "number") {
                switch (_tok) {
                  case 49 : 
                      return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState279 */56);
                  case 14 : 
                  case 17 : 
                  case 18 : 
                  case 20 : 
                  case 26 : 
                  case 27 : 
                  case 28 : 
                  case 35 : 
                  case 36 : 
                  case 37 : 
                  case 46 : 
                  case 48 : 
                  case 50 : 
                      exit = 1;
                      break;
                  default:
                    return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState279 */56);
                }
              } else {
                switch (_tok.tag | 0) {
                  case 2 : 
                  case 3 : 
                      exit = 1;
                      break;
                  default:
                    return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState279 */56);
                }
              }
              if (exit === 1) {
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          3874,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState279 */56);
              }
              break;
          case 1 : 
          case 2 : 
          case 3 : 
          case 4 : 
              return _menhir_fail(/* () */0);
          case 5 : 
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        3784,
                        10
                      ]
                    ];
              }
              var _tok$1 = _menhir_env[/* _menhir_token */2];
              var exit$1 = 0;
              if (typeof _tok$1 === "number" && _tok$1 === 17) {
                var _menhir_env$1 = _menhir_discard(_menhir_env);
                var _menhir_s$1 = _menhir_stack[1];
                var _menhir_stack$2 = _menhir_stack[0];
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          3808,
                          14
                        ]
                      ];
                }
                var _tok$2 = _menhir_env$1[/* _menhir_token */2];
                var exit$2 = 0;
                if (typeof _tok$2 === "number") {
                  switch (_tok$2) {
                    case 35 : 
                        var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                        var _v$1 = /* ListType */Block.__(0, [_v]);
                        return _menhir_goto_non_null_type(_menhir_env$2, _menhir_stack$2, _menhir_s$1, _v$1);
                    case 14 : 
                    case 20 : 
                    case 26 : 
                    case 27 : 
                    case 28 : 
                    case 37 : 
                    case 48 : 
                    case 50 : 
                        exit$2 = 2;
                        break;
                    default:
                      exit$2 = 3;
                  }
                } else {
                  switch (_tok$2.tag | 0) {
                    case 2 : 
                    case 3 : 
                        exit$2 = 2;
                        break;
                    default:
                      exit$2 = 3;
                  }
                }
                switch (exit$2) {
                  case 2 : 
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "gql_parser.ml",
                                3836,
                                16
                              ]
                            ];
                      }
                      _menhir_env$1[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, _menhir_s$1);
                  case 3 : 
                      var _v$2 = /* ListType */Block.__(1, [_v]);
                      __v = _v$2;
                      __menhir_s = _menhir_s$1;
                      __menhir_stack = _menhir_stack$2;
                      __menhir_env = _menhir_env$1;
                      continue ;
                  
                }
              } else {
                exit$1 = 1;
              }
              if (exit$1 === 1) {
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          3843,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
              }
              break;
          case 6 : 
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        3852,
                        10
                      ]
                    ];
              }
              var _tok$3 = _menhir_env[/* _menhir_token */2];
              var exit$3 = 0;
              if (typeof _tok$3 === "number") {
                switch (_tok$3) {
                  case 36 : 
                      return _menhir_run267(_menhir_env, _menhir_stack$1, /* MenhirState266 */61);
                  case 14 : 
                  case 17 : 
                  case 20 : 
                  case 26 : 
                  case 27 : 
                  case 28 : 
                  case 35 : 
                  case 37 : 
                  case 46 : 
                  case 48 : 
                  case 50 : 
                      exit$3 = 1;
                      break;
                  default:
                    return _menhir_reduce221(_menhir_env, _menhir_stack$1, /* MenhirState266 */61);
                }
              } else {
                switch (_tok$3.tag | 0) {
                  case 2 : 
                  case 3 : 
                      exit$3 = 1;
                      break;
                  default:
                    return _menhir_reduce221(_menhir_env, _menhir_stack$1, /* MenhirState266 */61);
                }
              }
              if (exit$3 === 1) {
                if (_menhir_env[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          3860,
                          12
                        ]
                      ];
                }
                _menhir_env[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState266 */61);
              }
              break;
          
        }
      }
    } else if (_menhir_s !== 4) {
      return _menhir_fail(/* () */0);
    } else {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                3880,
                10
              ]
            ];
      }
      var _tok$4 = _menhir_env[/* _menhir_token */2];
      var exit$4 = 0;
      if (typeof _tok$4 === "number") {
        var switcher = _tok$4 - 19 | 0;
        if (switcher > 26 || switcher < 0) {
          if ((switcher + 1 >>> 0) > 28) {
            exit$4 = 1;
          } else {
            return _menhir_reduce221(_menhir_env, _menhir_stack$1, /* MenhirState416 */3);
          }
        } else if (switcher !== 17) {
          exit$4 = 1;
        } else {
          return _menhir_run267(_menhir_env, _menhir_stack$1, /* MenhirState416 */3);
        }
      } else {
        exit$4 = 1;
      }
      if (exit$4 === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  3888,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState416 */3);
      }
      
    }
  };
}

function _menhir_run254(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 14 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 46 : 
      case 48 : 
      case 49 : 
      case 50 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState254 */65);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState254 */65, _tok[0]);
      case 2 : 
      case 3 : 
          exit = 1;
          break;
      case 4 : 
          return _menhir_run91(_menhir_env$1, _menhir_stack$1, /* MenhirState254 */65, _tok[0]);
      default:
        return _menhir_reduce223(_menhir_env$1, _menhir_stack$1, /* MenhirState254 */65);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3394,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState254 */65);
  }
  
}

function _menhir_reduce217(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_arguments_definition_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_rev_union_member_types(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            3916,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 20 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$1[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 0 : 
                  return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 1 : 
                  return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 2 : 
                  return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 3 : 
                  return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 4 : 
                  return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 5 : 
                  return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 6 : 
                  return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 7 : 
                  return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 8 : 
                  return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 9 : 
                  return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 10 : 
                  return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 11 : 
                  return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 12 : 
                  return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 13 : 
                  return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 15 : 
                  return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 16 : 
                  return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 21 : 
                  return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 22 : 
                  return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 23 : 
                  return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 24 : 
                  return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 25 : 
                  return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 29 : 
                  return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 30 : 
                  return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 31 : 
                  return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 32 : 
                  return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 33 : 
                  return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 34 : 
                  return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 38 : 
                  return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 39 : 
                  return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 40 : 
                  return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 41 : 
                  return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 42 : 
                  return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 43 : 
                  return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 44 : 
                  return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 45 : 
                  return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              case 47 : 
                  return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
              default:
                exit$1 = 3;
            }
          } else if (_tok$1.tag === 1) {
            return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71, _tok$1[0]);
          } else {
            exit$1 = 3;
          }
          if (exit$1 === 3) {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      4000,
                      12
                    ]
                  ];
            }
            _menhir_env$1[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState245 */71);
          }
          break;
      case 0 : 
      case 1 : 
      case 15 : 
      case 16 : 
      case 21 : 
      case 22 : 
      case 23 : 
      case 28 : 
      case 29 : 
      case 30 : 
      case 32 : 
      case 34 : 
      case 37 : 
      case 38 : 
      case 47 : 
          exit = 2;
          break;
      default:
        exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
      case 4 : 
          exit = 2;
          break;
      default:
        exit = 1;
    }
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  4053,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    case 2 : 
        var _v$1 = List.rev(_v);
        if (_menhir_s !== 28) {
          if (_menhir_s !== 74) {
            return _menhir_fail(/* () */0);
          } else {
            var match = _menhir_stack[0];
            var match$1 = match[0];
            var _v_000 = /* name */match[2];
            var _v_001 = /* directives */flat(_menhir_stack[2]);
            var _v$2 = /* record */[
              _v_000,
              _v_001,
              /* types */_v$1
            ];
            return _menhir_goto_union_type_extension(_menhir_env, match$1[0], match$1[1], _v$2);
          }
        } else {
          var _v$3 = _v$1;
          return _menhir_goto_option_union_member_types_(_menhir_env, _menhir_stack, _menhir_s, _v$3);
        }
    
  }
}

function _menhir_run112(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_operation_type(_menhir_env$1, _menhir_stack, _menhir_s, /* Query */0);
}

function _menhir_goto_rev_implements_interfaces(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            3637,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
      case 1 : 
      case 15 : 
      case 16 : 
      case 21 : 
      case 22 : 
      case 23 : 
      case 28 : 
      case 29 : 
      case 30 : 
      case 32 : 
      case 34 : 
      case 37 : 
      case 38 : 
      case 47 : 
      case 49 : 
          exit = 2;
          break;
      case 50 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$1[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 0 : 
                  return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 1 : 
                  return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 2 : 
                  return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 3 : 
                  return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 4 : 
                  return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 5 : 
                  return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 6 : 
                  return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 7 : 
                  return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 8 : 
                  return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 9 : 
                  return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 10 : 
                  return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 11 : 
                  return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 12 : 
                  return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 13 : 
                  return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 15 : 
                  return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 16 : 
                  return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 21 : 
                  return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 22 : 
                  return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 23 : 
                  return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 24 : 
                  return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 25 : 
                  return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 29 : 
                  return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 30 : 
                  return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 31 : 
                  return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 32 : 
                  return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 33 : 
                  return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 34 : 
                  return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 38 : 
                  return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 39 : 
                  return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 40 : 
                  return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 41 : 
                  return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 42 : 
                  return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 43 : 
                  return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 44 : 
                  return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 45 : 
                  return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              case 47 : 
                  return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
              default:
                exit$1 = 3;
            }
          } else if (_tok$1.tag === 1) {
            return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53, _tok$1[0]);
          } else {
            exit$1 = 3;
          }
          if (exit$1 === 3) {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      3721,
                      12
                    ]
                  ];
            }
            _menhir_env$1[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState291 */53);
          }
          break;
      default:
        exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
      case 4 : 
          exit = 2;
          break;
      default:
        exit = 1;
    }
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  3770,
                  8
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    case 2 : 
        var _v$1 = List.rev(_v);
        var _menhir_stack$2 = /* tuple */[
          _menhir_stack,
          _menhir_s,
          _v$1
        ];
        if (_menhir_s !== 26) {
          if (_menhir_s !== 69) {
            return _menhir_fail(/* () */0);
          } else {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      3742,
                      14
                    ]
                  ];
            }
            var _tok$2 = _menhir_env[/* _menhir_token */2];
            var exit$2 = 0;
            if (typeof _tok$2 === "number") {
              switch (_tok$2) {
                case 28 : 
                    return _menhir_run250(_menhir_env, _menhir_stack$2, /* MenhirState293 */52);
                case 0 : 
                case 1 : 
                case 15 : 
                case 16 : 
                case 21 : 
                case 22 : 
                case 23 : 
                case 29 : 
                case 30 : 
                case 32 : 
                case 34 : 
                case 37 : 
                case 38 : 
                case 47 : 
                    return _menhir_reduce209(_menhir_env, _menhir_stack$2, /* MenhirState293 */52);
                case 49 : 
                    return _menhir_run3(_menhir_env, _menhir_stack$2, /* MenhirState293 */52);
                default:
                  exit$2 = 3;
              }
            } else {
              switch (_tok$2.tag | 0) {
                case 0 : 
                case 4 : 
                    return _menhir_reduce209(_menhir_env, _menhir_stack$2, /* MenhirState293 */52);
                default:
                  exit$2 = 3;
              }
            }
            if (exit$2 === 3) {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        3752,
                        16
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState293 */52);
            }
            
          }
        } else {
          var _v$2 = _v$1;
          return _menhir_goto_option_implements_interfaces_(_menhir_env, _menhir_stack, _menhir_s, _v$2);
        }
        break;
    
  }
}

function _menhir_goto_non_null_type(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* NonNullType */Block.__(2, [_v]);
  return _menhir_goto_tpe(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_option_directives_nc_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_s >= 78) {
    if (_menhir_s >= 104) {
      return _menhir_fail(/* () */0);
    } else {
      switch (_menhir_s - 78 | 0) {
        case 0 : 
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      2030,
                      10
                    ]
                  ];
            }
            var _tok = _menhir_env[/* _menhir_token */2];
            var exit = 0;
            if (typeof _tok === "number" && _tok === 28) {
              return _menhir_run126(_menhir_env, _menhir_stack$1, /* MenhirState233 */77);
            } else {
              exit = 1;
            }
            if (exit === 1) {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        2036,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState233 */77);
            }
            break;
        case 4 : 
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      2016,
                      10
                    ]
                  ];
            }
            var _tok$1 = _menhir_env[/* _menhir_token */2];
            var exit$1 = 0;
            if (typeof _tok$1 === "number") {
              switch (_tok$1) {
                case 28 : 
                    return _menhir_run126(_menhir_env, _menhir_stack$1, /* MenhirState223 */81);
                case 17 : 
                case 18 : 
                case 20 : 
                case 26 : 
                case 27 : 
                case 35 : 
                case 36 : 
                case 37 : 
                case 46 : 
                case 48 : 
                case 49 : 
                case 50 : 
                    exit$1 = 1;
                    break;
                default:
                  return _menhir_reduce241(_menhir_env, _menhir_stack$1, /* MenhirState223 */81);
              }
            } else {
              switch (_tok$1.tag | 0) {
                case 0 : 
                case 2 : 
                case 3 : 
                case 4 : 
                    exit$1 = 1;
                    break;
                default:
                  return _menhir_reduce241(_menhir_env, _menhir_stack$1, /* MenhirState223 */81);
              }
            }
            if (exit$1 === 1) {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        2024,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState223 */81);
            }
            break;
        case 6 : 
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      2002,
                      10
                    ]
                  ];
            }
            var _tok$2 = _menhir_env[/* _menhir_token */2];
            var exit$2 = 0;
            if (typeof _tok$2 === "number") {
              switch (_tok$2) {
                case 28 : 
                    return _menhir_run126(_menhir_env, _menhir_stack$1, /* MenhirState219 */83);
                case 17 : 
                case 18 : 
                case 20 : 
                case 26 : 
                case 27 : 
                case 35 : 
                case 36 : 
                case 37 : 
                case 46 : 
                case 48 : 
                case 49 : 
                case 50 : 
                    exit$2 = 1;
                    break;
                default:
                  return _menhir_reduce241(_menhir_env, _menhir_stack$1, /* MenhirState219 */83);
              }
            } else {
              switch (_tok$2.tag | 0) {
                case 0 : 
                case 2 : 
                case 3 : 
                case 4 : 
                    exit$2 = 1;
                    break;
                default:
                  return _menhir_reduce241(_menhir_env, _menhir_stack$1, /* MenhirState219 */83);
              }
            }
            if (exit$2 === 1) {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        2010,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState219 */83);
            }
            break;
        case 11 : 
            var match = _menhir_stack[0];
            var v_000 = /* name */_menhir_stack[2];
            var v_001 = /* directives */flat(_v);
            var v = /* record */[
              v_000,
              v_001
            ];
            var _v$1 = /* FragmentSpread */Block.__(1, [v]);
            return _menhir_goto_selection(_menhir_env, match[0], match[1], _v$1);
        case 1 : 
        case 2 : 
        case 3 : 
        case 5 : 
        case 7 : 
        case 8 : 
        case 9 : 
        case 10 : 
        case 12 : 
        case 13 : 
        case 14 : 
        case 15 : 
        case 16 : 
        case 17 : 
        case 18 : 
        case 19 : 
        case 20 : 
        case 21 : 
        case 22 : 
        case 23 : 
        case 24 : 
            return _menhir_fail(/* () */0);
        case 25 : 
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      1960,
                      10
                    ]
                  ];
            }
            var _tok$3 = _menhir_env[/* _menhir_token */2];
            var exit$3 = 0;
            if (typeof _tok$3 === "number" && _tok$3 === 28) {
              return _menhir_run126(_menhir_env, _menhir_stack$1, /* MenhirState205 */91);
            } else {
              exit$3 = 1;
            }
            if (exit$3 === 1) {
              if (_menhir_env[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        1966,
                        12
                      ]
                    ];
              }
              _menhir_env[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState205 */91);
            }
            break;
        
      }
    }
  } else if (_menhir_s !== 2) {
    return _menhir_fail(/* () */0);
  } else {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              2042,
              10
            ]
          ];
    }
    var _tok$4 = _menhir_env[/* _menhir_token */2];
    var exit$4 = 0;
    if (typeof _tok$4 === "number" && _tok$4 === 28) {
      return _menhir_run126(_menhir_env, _menhir_stack$1, /* MenhirState423 */1);
    } else {
      exit$4 = 1;
    }
    if (exit$4 === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                2048,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState423 */1);
    }
    
  }
}

function _menhir_run267(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run47(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 1 : 
          return _menhir_run48(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 2 : 
          return _menhir_run49(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 3 : 
          return _menhir_run50(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 4 : 
          return _menhir_run51(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 5 : 
          return _menhir_run52(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 6 : 
          return _menhir_run53(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 7 : 
          return _menhir_run54(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 8 : 
          return _menhir_run55(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 9 : 
          return _menhir_run56(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 10 : 
          return _menhir_run57(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 11 : 
          return _menhir_run58(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 12 : 
          return _menhir_run59(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 13 : 
          return _menhir_run60(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 15 : 
          return _menhir_run61(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 16 : 
          return _menhir_run62(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 21 : 
          return _menhir_run63(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 22 : 
          return _menhir_run64(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 23 : 
          return _menhir_run65(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 24 : 
          return _menhir_run66(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 25 : 
          return _menhir_run67(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 26 : 
          return _menhir_run69(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 28 : 
          return _menhir_run70(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 29 : 
          return _menhir_run74(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 30 : 
          return _menhir_run76(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 31 : 
          return _menhir_run77(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 32 : 
          return _menhir_run78(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 33 : 
          return _menhir_run80(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 34 : 
          return _menhir_run81(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 38 : 
          return _menhir_run82(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 39 : 
          return _menhir_run83(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 40 : 
          return _menhir_run84(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 41 : 
          return _menhir_run85(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 42 : 
          return _menhir_run86(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 43 : 
          return _menhir_run87(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 44 : 
          return _menhir_run88(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 45 : 
          return _menhir_run89(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      case 47 : 
          return _menhir_run90(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
      default:
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  1932,
                  8
                ]
              ];
        }
        _menhir_env$1[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60, _tok[0]);
      case 1 : 
          return _menhir_run68(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60, _tok[0]);
      case 2 : 
          return _menhir_run75(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60, _tok[0]);
      case 3 : 
          return _menhir_run79(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60, _tok[0]);
      case 4 : 
          return _menhir_run91(_menhir_env$1, _menhir_stack$1, /* MenhirState267 */60, _tok[0]);
      
    }
  }
}

function _menhir_reduce221(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_default_value_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_option_AMPERSAND_(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "gql_parser.ml",
            1739,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 1 : 
          return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 2 : 
          return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 3 : 
          return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 4 : 
          return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 5 : 
          return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 6 : 
          return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 7 : 
          return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 8 : 
          return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 9 : 
          return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 10 : 
          return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 11 : 
          return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 12 : 
          return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 13 : 
          return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 15 : 
          return _menhir_run18(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 16 : 
          return _menhir_run19(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 21 : 
          return _menhir_run20(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 22 : 
          return _menhir_run21(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 23 : 
          return _menhir_run22(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 24 : 
          return _menhir_run23(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 25 : 
          return _menhir_run24(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 29 : 
          return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 30 : 
          return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 31 : 
          return _menhir_run28(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 32 : 
          return _menhir_run29(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 33 : 
          return _menhir_run30(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 34 : 
          return _menhir_run31(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 38 : 
          return _menhir_run32(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 39 : 
          return _menhir_run33(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 40 : 
          return _menhir_run34(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 41 : 
          return _menhir_run35(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 42 : 
          return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 43 : 
          return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 44 : 
          return _menhir_run38(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 45 : 
          return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      case 47 : 
          return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState288 */54, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              1817,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState288 */54);
  }
  
}

function _menhir_goto_opt_dir_fields(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var match = _menhir_stack[0];
  var match$1 = match[0];
  var _v_000 = /* name */match[2];
  var _v_001 = /* implements */_menhir_stack[2];
  var _v_002 = /* directives */_v[/* directives */2];
  var _v_003 = /* fields */_v[/* fields */3];
  var _v$1 = /* record */[
    _v_000,
    _v_001,
    _v_002,
    _v_003
  ];
  return _menhir_goto_object_type_extension(_menhir_env, match$1[0], match$1[1], _v$1);
}

function _menhir_goto_object_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* ObjectTypeExtension */Block.__(1, [_v]);
  return _menhir_goto_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_directive_location(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s !== 8) {
    if (_menhir_s !== 9) {
      return _menhir_fail(/* () */0);
    } else {
      var _v_001 = _menhir_stack[2];
      var _v$1 = /* :: */[
        _v,
        _v_001
      ];
      return _menhir_goto_rev_directive_locations(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$1);
    }
  } else {
    var _v$2 = /* :: */[
      _v,
      /* [] */0
    ];
    return _menhir_goto_rev_directive_locations(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$2);
  }
}

function _menhir_goto_enum_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* EnumTypeExtension */Block.__(4, [_v]);
  return _menhir_goto_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_string_value(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var exit = 0;
  var switcher = _menhir_s - 1 | 0;
  if (switcher > 91 || switcher < 0) {
    if (switcher >= 0) {
      switch (switcher - 92 | 0) {
        case 0 : 
        case 2 : 
        case 5 : 
        case 6 : 
            exit = 2;
            break;
        case 19 : 
        case 20 : 
        case 23 : 
        case 24 : 
            exit = 1;
            break;
        case 1 : 
        case 3 : 
        case 4 : 
        case 7 : 
        case 8 : 
        case 9 : 
        case 10 : 
        case 11 : 
        case 12 : 
        case 13 : 
        case 14 : 
        case 15 : 
        case 16 : 
        case 17 : 
        case 18 : 
        case 21 : 
        case 22 : 
        case 25 : 
        case 26 : 
        case 27 : 
            return _menhir_fail(/* () */0);
        case 28 : 
            exit = 3;
            break;
        
      }
    } else {
      exit = 3;
    }
  } else {
    switch (switcher) {
      case 59 : 
          exit = 1;
          break;
      case 32 : 
      case 33 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 39 : 
      case 40 : 
      case 41 : 
      case 42 : 
      case 43 : 
      case 44 : 
      case 45 : 
      case 46 : 
      case 47 : 
      case 48 : 
      case 49 : 
      case 50 : 
      case 51 : 
      case 52 : 
      case 53 : 
      case 55 : 
      case 56 : 
      case 58 : 
      case 60 : 
      case 61 : 
      case 62 : 
      case 63 : 
      case 65 : 
      case 66 : 
          return _menhir_fail(/* () */0);
      case 31 : 
      case 34 : 
      case 38 : 
      case 54 : 
      case 57 : 
      case 64 : 
      case 67 : 
          exit = 3;
          break;
      default:
        return _menhir_fail(/* () */0);
    }
  }
  switch (exit) {
    case 1 : 
        var v = /* StringValue */Block.__(2, [_v]);
        return _menhir_goto_value(_menhir_env, _menhir_stack, _menhir_s, v);
    case 2 : 
        var _v$1 = /* StringValue */Block.__(3, [_v]);
        return _menhir_goto_value_nc(_menhir_env, _menhir_stack, _menhir_s, _v$1);
    case 3 : 
        var _v$2 = _v;
        return _menhir_goto_option_description_(_menhir_env, _menhir_stack, _menhir_s, _v$2);
    
  }
}

function _menhir_goto_type_definition(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* TypeDefinition */Block.__(1, [_v]);
  return _menhir_goto_type_system_definition(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run239(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 20 : 
          return _menhir_run240(_menhir_env$1, _menhir_stack$1, /* MenhirState239 */73);
      case 14 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 46 : 
      case 48 : 
      case 49 : 
      case 50 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce213(_menhir_env$1, _menhir_stack$1, /* MenhirState239 */73);
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
      case 2 : 
      case 3 : 
      case 4 : 
          exit = 1;
          break;
      default:
        return _menhir_reduce213(_menhir_env$1, _menhir_stack$1, /* MenhirState239 */73);
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              3300,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState239 */73);
  }
  
}

function _menhir_goto_option_union_member_types_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var match = _menhir_stack[0];
  var match$1 = match[0];
  var _v_000 = /* description */match$1[2];
  var _v_001 = /* name */match[2];
  var _v_002 = /* directives */flat(_menhir_stack[2]);
  var _v_003 = /* types */flat(_v);
  var _v$1 = /* record */[
    _v_000,
    _v_001,
    _v_002,
    _v_003
  ];
  var _v$2 = /* UnionTypeDefinition */Block.__(3, [_v$1]);
  return _menhir_goto_type_definition(_menhir_env, match$1[0], match$1[1], _v$2);
}

function _menhir_goto_option_description_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  var switcher = _menhir_s - 1 | 0;
  if (switcher > 119 || switcher < 0) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              8404,
              10
            ]
          ];
    }
    var _tok = _menhir_env[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok === "number") {
      if (_tok >= 17) {
        if (_tok >= 39) {
          if (_tok !== 47) {
            exit$1 = 4;
          } else {
            var _menhir_env$1 = _menhir_discard(_menhir_env);
            var _tok$1 = _menhir_env$1[/* _menhir_token */2];
            var exit$2 = 0;
            if (typeof _tok$1 === "number" && _tok$1 === 49) {
              var _menhir_env$2 = _menhir_discard(_menhir_env$1);
              var _tok$2 = _menhir_env$2[/* _menhir_token */2];
              var exit$3 = 0;
              if (typeof _tok$2 === "number") {
                switch (_tok$2) {
                  case 0 : 
                      return _menhir_run4(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 1 : 
                      return _menhir_run5(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 2 : 
                      return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 3 : 
                      return _menhir_run7(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 4 : 
                      return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 5 : 
                      return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 6 : 
                      return _menhir_run10(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 7 : 
                      return _menhir_run11(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 8 : 
                      return _menhir_run12(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 9 : 
                      return _menhir_run13(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 10 : 
                      return _menhir_run14(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 11 : 
                      return _menhir_run15(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 12 : 
                      return _menhir_run16(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 13 : 
                      return _menhir_run17(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 15 : 
                      return _menhir_run18(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 16 : 
                      return _menhir_run19(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 21 : 
                      return _menhir_run20(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 22 : 
                      return _menhir_run21(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 23 : 
                      return _menhir_run22(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 24 : 
                      return _menhir_run23(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 25 : 
                      return _menhir_run24(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 29 : 
                      return _menhir_run26(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 30 : 
                      return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 31 : 
                      return _menhir_run28(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 32 : 
                      return _menhir_run29(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 33 : 
                      return _menhir_run30(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 34 : 
                      return _menhir_run31(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 38 : 
                      return _menhir_run32(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 39 : 
                      return _menhir_run33(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 40 : 
                      return _menhir_run34(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 41 : 
                      return _menhir_run35(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 42 : 
                      return _menhir_run36(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 43 : 
                      return _menhir_run37(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 44 : 
                      return _menhir_run38(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 45 : 
                      return _menhir_run39(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  case 47 : 
                      return _menhir_run40(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
                  default:
                    exit$3 = 6;
                }
              } else if (_tok$2.tag === 1) {
                return _menhir_run25(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12, _tok$2[0]);
              } else {
                exit$3 = 6;
              }
              if (exit$3 === 6) {
                if (_menhir_env$2[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          8494,
                          20
                        ]
                      ];
                }
                _menhir_env$2[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState381 */12);
              }
              
            } else {
              exit$2 = 5;
            }
            if (exit$2 === 5) {
              if (_menhir_env$1[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        8498,
                        16
                      ]
                    ];
              }
              _menhir_env$1[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
            }
            
          }
        } else if (_tok >= 29) {
          switch (_tok - 29 | 0) {
            case 0 : 
                var _menhir_env$3 = _menhir_discard(_menhir_env);
                var _tok$3 = _menhir_env$3[/* _menhir_token */2];
                var exit$4 = 0;
                if (typeof _tok$3 === "number") {
                  switch (_tok$3) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 1 : 
                        return _menhir_run5(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 2 : 
                        return _menhir_run6(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 3 : 
                        return _menhir_run7(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 4 : 
                        return _menhir_run8(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 5 : 
                        return _menhir_run9(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 6 : 
                        return _menhir_run10(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 7 : 
                        return _menhir_run11(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 8 : 
                        return _menhir_run12(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 9 : 
                        return _menhir_run13(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 10 : 
                        return _menhir_run14(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 11 : 
                        return _menhir_run15(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 12 : 
                        return _menhir_run16(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 13 : 
                        return _menhir_run17(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 15 : 
                        return _menhir_run18(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 16 : 
                        return _menhir_run19(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 21 : 
                        return _menhir_run20(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 22 : 
                        return _menhir_run21(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 23 : 
                        return _menhir_run22(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 24 : 
                        return _menhir_run23(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 25 : 
                        return _menhir_run24(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 29 : 
                        return _menhir_run26(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 30 : 
                        return _menhir_run27(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 31 : 
                        return _menhir_run28(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 32 : 
                        return _menhir_run29(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 33 : 
                        return _menhir_run30(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 34 : 
                        return _menhir_run31(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 38 : 
                        return _menhir_run32(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 39 : 
                        return _menhir_run33(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 40 : 
                        return _menhir_run34(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 41 : 
                        return _menhir_run35(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 42 : 
                        return _menhir_run36(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 43 : 
                        return _menhir_run37(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 44 : 
                        return _menhir_run38(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 45 : 
                        return _menhir_run39(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    case 47 : 
                        return _menhir_run40(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                    default:
                      exit$4 = 5;
                  }
                } else if (_tok$3.tag === 1) {
                  return _menhir_run25(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21, _tok$3[0]);
                } else {
                  exit$4 = 5;
                }
                if (exit$4 === 5) {
                  if (_menhir_env$3[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            8753,
                            16
                          ]
                        ];
                  }
                  _menhir_env$3[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState368 */21);
                }
                break;
            case 1 : 
                var _menhir_env$4 = _menhir_discard(_menhir_env);
                var _tok$4 = _menhir_env$4[/* _menhir_token */2];
                var exit$5 = 0;
                if (typeof _tok$4 === "number") {
                  switch (_tok$4) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 1 : 
                        return _menhir_run5(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 2 : 
                        return _menhir_run6(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 3 : 
                        return _menhir_run7(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 4 : 
                        return _menhir_run8(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 5 : 
                        return _menhir_run9(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 6 : 
                        return _menhir_run10(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 7 : 
                        return _menhir_run11(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 8 : 
                        return _menhir_run12(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 9 : 
                        return _menhir_run13(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 10 : 
                        return _menhir_run14(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 11 : 
                        return _menhir_run15(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 12 : 
                        return _menhir_run16(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 13 : 
                        return _menhir_run17(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 15 : 
                        return _menhir_run18(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 16 : 
                        return _menhir_run19(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 21 : 
                        return _menhir_run20(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 22 : 
                        return _menhir_run21(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 23 : 
                        return _menhir_run22(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 24 : 
                        return _menhir_run23(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 25 : 
                        return _menhir_run24(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 29 : 
                        return _menhir_run26(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 30 : 
                        return _menhir_run27(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 31 : 
                        return _menhir_run28(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 32 : 
                        return _menhir_run29(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 33 : 
                        return _menhir_run30(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 34 : 
                        return _menhir_run31(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 38 : 
                        return _menhir_run32(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 39 : 
                        return _menhir_run33(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 40 : 
                        return _menhir_run34(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 41 : 
                        return _menhir_run35(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 42 : 
                        return _menhir_run36(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 43 : 
                        return _menhir_run37(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 44 : 
                        return _menhir_run38(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 45 : 
                        return _menhir_run39(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    case 47 : 
                        return _menhir_run40(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                    default:
                      exit$5 = 5;
                  }
                } else if (_tok$4.tag === 1) {
                  return _menhir_run25(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18, _tok$4[0]);
                } else {
                  exit$5 = 5;
                }
                if (exit$5 === 5) {
                  if (_menhir_env$4[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            8669,
                            16
                          ]
                        ];
                  }
                  _menhir_env$4[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$4, _menhir_stack$1, /* MenhirState372 */18);
                }
                break;
            case 2 : 
            case 3 : 
            case 4 : 
            case 5 : 
            case 6 : 
            case 7 : 
            case 8 : 
                exit$1 = 4;
                break;
            case 9 : 
                var _menhir_env$5 = _menhir_discard(_menhir_env);
                var _tok$5 = _menhir_env$5[/* _menhir_token */2];
                var exit$6 = 0;
                if (typeof _tok$5 === "number") {
                  switch (_tok$5) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 1 : 
                        return _menhir_run5(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 2 : 
                        return _menhir_run6(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 3 : 
                        return _menhir_run7(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 4 : 
                        return _menhir_run8(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 5 : 
                        return _menhir_run9(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 6 : 
                        return _menhir_run10(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 7 : 
                        return _menhir_run11(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 8 : 
                        return _menhir_run12(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 9 : 
                        return _menhir_run13(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 10 : 
                        return _menhir_run14(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 11 : 
                        return _menhir_run15(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 12 : 
                        return _menhir_run16(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 13 : 
                        return _menhir_run17(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 15 : 
                        return _menhir_run18(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 16 : 
                        return _menhir_run19(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 21 : 
                        return _menhir_run20(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 22 : 
                        return _menhir_run21(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 23 : 
                        return _menhir_run22(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 24 : 
                        return _menhir_run23(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 25 : 
                        return _menhir_run24(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 29 : 
                        return _menhir_run26(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 30 : 
                        return _menhir_run27(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 31 : 
                        return _menhir_run28(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 32 : 
                        return _menhir_run29(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 33 : 
                        return _menhir_run30(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 34 : 
                        return _menhir_run31(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 38 : 
                        return _menhir_run32(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 39 : 
                        return _menhir_run33(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 40 : 
                        return _menhir_run34(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 41 : 
                        return _menhir_run35(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 42 : 
                        return _menhir_run36(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 43 : 
                        return _menhir_run37(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 44 : 
                        return _menhir_run38(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 45 : 
                        return _menhir_run39(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    case 47 : 
                        return _menhir_run40(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                    default:
                      exit$6 = 5;
                  }
                } else if (_tok$5.tag === 1) {
                  return _menhir_run25(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15, _tok$5[0]);
                } else {
                  exit$6 = 5;
                }
                if (exit$6 === 5) {
                  if (_menhir_env$5[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            8585,
                            16
                          ]
                        ];
                  }
                  _menhir_env$5[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$5, _menhir_stack$1, /* MenhirState376 */15);
                }
                break;
            
          }
        } else {
          exit$1 = 4;
        }
      } else if (_tok >= 2) {
        if (_tok >= 16) {
          var _menhir_env$6 = _menhir_discard(_menhir_env);
          var _tok$6 = _menhir_env$6[/* _menhir_token */2];
          var exit$7 = 0;
          if (typeof _tok$6 === "number") {
            switch (_tok$6) {
              case 0 : 
                  return _menhir_run4(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 1 : 
                  return _menhir_run5(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 2 : 
                  return _menhir_run6(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 3 : 
                  return _menhir_run7(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 4 : 
                  return _menhir_run8(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 5 : 
                  return _menhir_run9(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 6 : 
                  return _menhir_run10(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 7 : 
                  return _menhir_run11(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 8 : 
                  return _menhir_run12(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 9 : 
                  return _menhir_run13(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 10 : 
                  return _menhir_run14(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 11 : 
                  return _menhir_run15(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 12 : 
                  return _menhir_run16(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 13 : 
                  return _menhir_run17(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 15 : 
                  return _menhir_run18(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 16 : 
                  return _menhir_run19(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 21 : 
                  return _menhir_run20(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 22 : 
                  return _menhir_run21(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 23 : 
                  return _menhir_run22(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 24 : 
                  return _menhir_run23(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 25 : 
                  return _menhir_run24(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 29 : 
                  return _menhir_run26(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 30 : 
                  return _menhir_run27(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 31 : 
                  return _menhir_run28(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 32 : 
                  return _menhir_run29(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 33 : 
                  return _menhir_run30(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 34 : 
                  return _menhir_run31(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 38 : 
                  return _menhir_run32(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 39 : 
                  return _menhir_run33(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 40 : 
                  return _menhir_run34(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 41 : 
                  return _menhir_run35(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 42 : 
                  return _menhir_run36(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 43 : 
                  return _menhir_run37(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 44 : 
                  return _menhir_run38(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 45 : 
                  return _menhir_run39(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              case 47 : 
                  return _menhir_run40(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
              default:
                exit$7 = 5;
            }
          } else if (_tok$6.tag === 1) {
            return _menhir_run25(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23, _tok$6[0]);
          } else {
            exit$7 = 5;
          }
          if (exit$7 === 5) {
            if (_menhir_env$6[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      8837,
                      16
                    ]
                  ];
            }
            _menhir_env$6[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$6, _menhir_stack$1, /* MenhirState365 */23);
          }
          
        } else {
          exit$1 = 4;
        }
      } else if (_tok !== 0) {
        var _menhir_env$7 = _menhir_discard(_menhir_env);
        var _tok$7 = _menhir_env$7[/* _menhir_token */2];
        var exit$8 = 0;
        if (typeof _tok$7 === "number") {
          switch (_tok$7) {
            case 0 : 
                return _menhir_run4(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 1 : 
                return _menhir_run5(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 2 : 
                return _menhir_run6(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 3 : 
                return _menhir_run7(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 4 : 
                return _menhir_run8(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 5 : 
                return _menhir_run9(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 6 : 
                return _menhir_run10(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 7 : 
                return _menhir_run11(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 8 : 
                return _menhir_run12(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 9 : 
                return _menhir_run13(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 10 : 
                return _menhir_run14(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 11 : 
                return _menhir_run15(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 12 : 
                return _menhir_run16(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 13 : 
                return _menhir_run17(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 15 : 
                return _menhir_run18(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 16 : 
                return _menhir_run19(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 21 : 
                return _menhir_run20(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 22 : 
                return _menhir_run21(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 23 : 
                return _menhir_run22(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 24 : 
                return _menhir_run23(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 25 : 
                return _menhir_run24(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 29 : 
                return _menhir_run26(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 30 : 
                return _menhir_run27(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 31 : 
                return _menhir_run28(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 32 : 
                return _menhir_run29(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 33 : 
                return _menhir_run30(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 34 : 
                return _menhir_run31(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 38 : 
                return _menhir_run32(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 39 : 
                return _menhir_run33(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 40 : 
                return _menhir_run34(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 41 : 
                return _menhir_run35(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 42 : 
                return _menhir_run36(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 43 : 
                return _menhir_run37(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 44 : 
                return _menhir_run38(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 45 : 
                return _menhir_run39(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            case 47 : 
                return _menhir_run40(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
            default:
              exit$8 = 5;
          }
        } else if (_tok$7.tag === 1) {
          return _menhir_run25(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27, _tok$7[0]);
        } else {
          exit$8 = 5;
        }
        if (exit$8 === 5) {
          if (_menhir_env$7[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    8921,
                    16
                  ]
                ];
          }
          _menhir_env$7[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$7, _menhir_stack$1, /* MenhirState359 */27);
        }
        
      } else {
        var _menhir_env$8 = _menhir_discard(_menhir_env);
        var _tok$8 = _menhir_env$8[/* _menhir_token */2];
        var exit$9 = 0;
        if (typeof _tok$8 === "number") {
          switch (_tok$8) {
            case 0 : 
                return _menhir_run4(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 1 : 
                return _menhir_run5(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 2 : 
                return _menhir_run6(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 3 : 
                return _menhir_run7(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 4 : 
                return _menhir_run8(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 5 : 
                return _menhir_run9(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 6 : 
                return _menhir_run10(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 7 : 
                return _menhir_run11(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 8 : 
                return _menhir_run12(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 9 : 
                return _menhir_run13(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 10 : 
                return _menhir_run14(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 11 : 
                return _menhir_run15(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 12 : 
                return _menhir_run16(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 13 : 
                return _menhir_run17(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 15 : 
                return _menhir_run18(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 16 : 
                return _menhir_run19(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 21 : 
                return _menhir_run20(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 22 : 
                return _menhir_run21(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 23 : 
                return _menhir_run22(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 24 : 
                return _menhir_run23(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 25 : 
                return _menhir_run24(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 29 : 
                return _menhir_run26(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 30 : 
                return _menhir_run27(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 31 : 
                return _menhir_run28(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 32 : 
                return _menhir_run29(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 33 : 
                return _menhir_run30(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 34 : 
                return _menhir_run31(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 38 : 
                return _menhir_run32(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 39 : 
                return _menhir_run33(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 40 : 
                return _menhir_run34(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 41 : 
                return _menhir_run35(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 42 : 
                return _menhir_run36(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 43 : 
                return _menhir_run37(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 44 : 
                return _menhir_run38(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 45 : 
                return _menhir_run39(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            case 47 : 
                return _menhir_run40(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
            default:
              exit$9 = 5;
          }
        } else if (_tok$8.tag === 1) {
          return _menhir_run25(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30, _tok$8[0]);
        } else {
          exit$9 = 5;
        }
        if (exit$9 === 5) {
          if (_menhir_env$8[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    9005,
                    16
                  ]
                ];
          }
          _menhir_env$8[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$8, _menhir_stack$1, /* MenhirState354 */30);
        }
        
      }
    } else {
      exit$1 = 4;
    }
    if (exit$1 === 4) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                9009,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    }
    
  } else {
    switch (switcher) {
      case 31 : 
      case 34 : 
          exit = 3;
          break;
      case 38 : 
      case 57 : 
      case 64 : 
          exit = 2;
          break;
      case 32 : 
      case 33 : 
      case 35 : 
      case 36 : 
      case 37 : 
      case 39 : 
      case 40 : 
      case 41 : 
      case 42 : 
      case 43 : 
      case 44 : 
      case 45 : 
      case 46 : 
      case 47 : 
      case 48 : 
      case 49 : 
      case 50 : 
      case 51 : 
      case 52 : 
      case 53 : 
      case 55 : 
      case 56 : 
      case 58 : 
      case 59 : 
      case 60 : 
      case 61 : 
      case 62 : 
      case 63 : 
      case 65 : 
      case 66 : 
          return _menhir_fail(/* () */0);
      case 54 : 
      case 67 : 
          exit = 1;
          break;
      default:
        return _menhir_fail(/* () */0);
    }
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  8158,
                  10
                ]
              ];
        }
        var _tok$9 = _menhir_env[/* _menhir_token */2];
        var exit$10 = 0;
        if (typeof _tok$9 === "number") {
          switch (_tok$9) {
            case 0 : 
                return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 1 : 
                return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 2 : 
                return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 3 : 
                return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 4 : 
                return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 5 : 
                return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 6 : 
                return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 7 : 
                return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 8 : 
                return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 9 : 
                return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 10 : 
                return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 11 : 
                return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 12 : 
                return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 13 : 
                return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 15 : 
                return _menhir_run18(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 16 : 
                return _menhir_run19(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 21 : 
                return _menhir_run20(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 22 : 
                return _menhir_run21(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 23 : 
                return _menhir_run22(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 24 : 
                return _menhir_run23(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 25 : 
                return _menhir_run24(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 29 : 
                return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 30 : 
                return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 31 : 
                return _menhir_run28(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 32 : 
                return _menhir_run29(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 33 : 
                return _menhir_run30(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 34 : 
                return _menhir_run31(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 38 : 
                return _menhir_run32(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 39 : 
                return _menhir_run33(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 40 : 
                return _menhir_run34(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 41 : 
                return _menhir_run35(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 42 : 
                return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 43 : 
                return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 44 : 
                return _menhir_run38(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 45 : 
                return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            case 47 : 
                return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
            default:
              exit$10 = 4;
          }
        } else if (_tok$9.tag === 1) {
          return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState252 */67, _tok$9[0]);
        } else {
          exit$10 = 4;
        }
        if (exit$10 === 4) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    8236,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState252 */67);
        }
        break;
    case 2 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  8242,
                  10
                ]
              ];
        }
        var _tok$10 = _menhir_env[/* _menhir_token */2];
        var exit$11 = 0;
        if (typeof _tok$10 === "number") {
          switch (_tok$10) {
            case 0 : 
                return _menhir_run4(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 1 : 
                return _menhir_run5(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 2 : 
                return _menhir_run6(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 3 : 
                return _menhir_run7(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 4 : 
                return _menhir_run8(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 5 : 
                return _menhir_run9(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 6 : 
                return _menhir_run10(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 7 : 
                return _menhir_run11(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 8 : 
                return _menhir_run12(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 9 : 
                return _menhir_run13(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 10 : 
                return _menhir_run14(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 11 : 
                return _menhir_run15(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 12 : 
                return _menhir_run16(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 13 : 
                return _menhir_run17(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 15 : 
                return _menhir_run18(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 16 : 
                return _menhir_run19(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 21 : 
                return _menhir_run20(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 22 : 
                return _menhir_run21(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 23 : 
                return _menhir_run22(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 24 : 
                return _menhir_run23(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 25 : 
                return _menhir_run24(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 29 : 
                return _menhir_run26(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 30 : 
                return _menhir_run27(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 31 : 
                return _menhir_run28(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 32 : 
                return _menhir_run29(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 33 : 
                return _menhir_run30(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 34 : 
                return _menhir_run31(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 38 : 
                return _menhir_run32(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 39 : 
                return _menhir_run33(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 40 : 
                return _menhir_run34(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 41 : 
                return _menhir_run35(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 42 : 
                return _menhir_run36(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 43 : 
                return _menhir_run37(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 44 : 
                return _menhir_run38(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 45 : 
                return _menhir_run39(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            case 47 : 
                return _menhir_run40(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
            default:
              exit$11 = 4;
          }
        } else if (_tok$10.tag === 1) {
          return _menhir_run25(_menhir_env, _menhir_stack$1, /* MenhirState255 */64, _tok$10[0]);
        } else {
          exit$11 = 4;
        }
        if (exit$11 === 4) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    8320,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState255 */64);
        }
        break;
    case 3 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  8326,
                  10
                ]
              ];
        }
        var _tok$11 = _menhir_env[/* _menhir_token */2];
        var exit$12 = 0;
        if (typeof _tok$11 === "number") {
          switch (_tok$11) {
            case 0 : 
                return _menhir_run47(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 1 : 
                return _menhir_run48(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 2 : 
                return _menhir_run49(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 3 : 
                return _menhir_run50(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 4 : 
                return _menhir_run51(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 5 : 
                return _menhir_run52(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 6 : 
                return _menhir_run53(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 7 : 
                return _menhir_run54(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 8 : 
                return _menhir_run55(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 9 : 
                return _menhir_run56(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 10 : 
                return _menhir_run57(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 11 : 
                return _menhir_run58(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 12 : 
                return _menhir_run59(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 15 : 
                return _menhir_run61(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 16 : 
                return _menhir_run62(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 21 : 
                return _menhir_run63(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 22 : 
                return _menhir_run64(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 23 : 
                return _menhir_run65(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 24 : 
                return _menhir_run66(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 29 : 
                return _menhir_run74(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 30 : 
                return _menhir_run76(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 31 : 
                return _menhir_run77(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 32 : 
                return _menhir_run78(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 34 : 
                return _menhir_run81(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 38 : 
                return _menhir_run82(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 39 : 
                return _menhir_run83(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 40 : 
                return _menhir_run84(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 41 : 
                return _menhir_run85(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 42 : 
                return _menhir_run86(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 43 : 
                return _menhir_run87(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 44 : 
                return _menhir_run88(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 45 : 
                return _menhir_run89(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            case 47 : 
                return _menhir_run90(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
            default:
              exit$12 = 4;
          }
        } else if (_tok$11.tag === 1) {
          return _menhir_run68(_menhir_env, _menhir_stack$1, /* MenhirState331 */34, _tok$11[0]);
        } else {
          exit$12 = 4;
        }
        if (exit$12 === 4) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    8398,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState331 */34);
        }
        break;
    
  }
}

function _menhir_run230(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run128(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 1 : 
          return _menhir_run129(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 2 : 
          return _menhir_run130(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 3 : 
          return _menhir_run131(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 4 : 
          return _menhir_run132(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 5 : 
          return _menhir_run133(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 6 : 
          return _menhir_run134(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 7 : 
          return _menhir_run135(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 8 : 
          return _menhir_run136(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 9 : 
          return _menhir_run137(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 10 : 
          return _menhir_run138(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 11 : 
          return _menhir_run139(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 12 : 
          return _menhir_run140(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 13 : 
          return _menhir_run141(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 15 : 
          return _menhir_run142(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 16 : 
          return _menhir_run143(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 21 : 
          return _menhir_run144(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 22 : 
          return _menhir_run145(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 23 : 
          return _menhir_run146(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 25 : 
          return _menhir_run149(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 29 : 
          return _menhir_run151(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 30 : 
          return _menhir_run152(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 31 : 
          return _menhir_run153(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 32 : 
          return _menhir_run154(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 33 : 
          return _menhir_run155(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 34 : 
          return _menhir_run156(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 38 : 
          return _menhir_run157(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 39 : 
          return _menhir_run158(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 40 : 
          return _menhir_run159(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 41 : 
          return _menhir_run160(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 42 : 
          return _menhir_run161(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 43 : 
          return _menhir_run162(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 44 : 
          return _menhir_run163(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 45 : 
          return _menhir_run164(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      case 47 : 
          return _menhir_run165(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run150(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              11405,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState230 */80);
  }
  
}

function _menhir_run2(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 28) {
      if (_tok !== 49) {
        exit = 1;
      } else {
        return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */120);
      }
    } else {
      return _menhir_reduce225(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */120);
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              11193,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState2 */120);
  }
  
}

function _menhir_run235(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok >= 16) {
      if (_tok >= 29) {
        if (_tok >= 39) {
          exit = 1;
        } else {
          switch (_tok - 29 | 0) {
            case 0 : 
                var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                var _tok$1 = _menhir_env$2[/* _menhir_token */2];
                var exit$1 = 0;
                if (typeof _tok$1 === "number") {
                  switch (_tok$1) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 1 : 
                        return _menhir_run5(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 2 : 
                        return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 3 : 
                        return _menhir_run7(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 4 : 
                        return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 5 : 
                        return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 6 : 
                        return _menhir_run10(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 7 : 
                        return _menhir_run11(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 8 : 
                        return _menhir_run12(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 9 : 
                        return _menhir_run13(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 10 : 
                        return _menhir_run14(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 11 : 
                        return _menhir_run15(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 12 : 
                        return _menhir_run16(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 13 : 
                        return _menhir_run17(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 15 : 
                        return _menhir_run18(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 16 : 
                        return _menhir_run19(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 21 : 
                        return _menhir_run20(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 22 : 
                        return _menhir_run21(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 23 : 
                        return _menhir_run22(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 24 : 
                        return _menhir_run23(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 25 : 
                        return _menhir_run24(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 29 : 
                        return _menhir_run26(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 30 : 
                        return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 31 : 
                        return _menhir_run28(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 32 : 
                        return _menhir_run29(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 33 : 
                        return _menhir_run30(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 34 : 
                        return _menhir_run31(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 38 : 
                        return _menhir_run32(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 39 : 
                        return _menhir_run33(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 40 : 
                        return _menhir_run34(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 41 : 
                        return _menhir_run35(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 42 : 
                        return _menhir_run36(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 43 : 
                        return _menhir_run37(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 44 : 
                        return _menhir_run38(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 45 : 
                        return _menhir_run39(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    case 47 : 
                        return _menhir_run40(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                    default:
                      exit$1 = 2;
                  }
                } else if (_tok$1.tag === 1) {
                  return _menhir_run25(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44, _tok$1[0]);
                } else {
                  exit$1 = 2;
                }
                if (exit$1 === 2) {
                  if (_menhir_env$2[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            11664,
                            12
                          ]
                        ];
                  }
                  _menhir_env$2[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState313 */44);
                }
                break;
            case 1 : 
                var _menhir_env$3 = _menhir_discard(_menhir_env$1);
                var _tok$2 = _menhir_env$3[/* _menhir_token */2];
                var exit$2 = 0;
                if (typeof _tok$2 === "number") {
                  switch (_tok$2) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 1 : 
                        return _menhir_run5(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 2 : 
                        return _menhir_run6(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 3 : 
                        return _menhir_run7(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 4 : 
                        return _menhir_run8(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 5 : 
                        return _menhir_run9(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 6 : 
                        return _menhir_run10(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 7 : 
                        return _menhir_run11(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 8 : 
                        return _menhir_run12(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 9 : 
                        return _menhir_run13(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 10 : 
                        return _menhir_run14(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 11 : 
                        return _menhir_run15(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 12 : 
                        return _menhir_run16(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 13 : 
                        return _menhir_run17(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 15 : 
                        return _menhir_run18(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 16 : 
                        return _menhir_run19(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 21 : 
                        return _menhir_run20(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 22 : 
                        return _menhir_run21(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 23 : 
                        return _menhir_run22(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 24 : 
                        return _menhir_run23(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 25 : 
                        return _menhir_run24(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 29 : 
                        return _menhir_run26(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 30 : 
                        return _menhir_run27(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 31 : 
                        return _menhir_run28(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 32 : 
                        return _menhir_run29(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 33 : 
                        return _menhir_run30(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 34 : 
                        return _menhir_run31(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 38 : 
                        return _menhir_run32(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 39 : 
                        return _menhir_run33(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 40 : 
                        return _menhir_run34(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 41 : 
                        return _menhir_run35(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 42 : 
                        return _menhir_run36(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 43 : 
                        return _menhir_run37(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 44 : 
                        return _menhir_run38(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 45 : 
                        return _menhir_run39(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    case 47 : 
                        return _menhir_run40(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                    default:
                      exit$2 = 2;
                  }
                } else if (_tok$2.tag === 1) {
                  return _menhir_run25(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41, _tok$2[0]);
                } else {
                  exit$2 = 2;
                }
                if (exit$2 === 2) {
                  if (_menhir_env$3[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            11580,
                            12
                          ]
                        ];
                  }
                  _menhir_env$3[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState319 */41);
                }
                break;
            case 2 : 
            case 3 : 
            case 4 : 
            case 5 : 
            case 6 : 
            case 7 : 
            case 8 : 
                exit = 1;
                break;
            case 9 : 
                var _menhir_env$4 = _menhir_discard(_menhir_env$1);
                var _tok$3 = _menhir_env$4[/* _menhir_token */2];
                var exit$3 = 0;
                if (typeof _tok$3 === "number") {
                  switch (_tok$3) {
                    case 0 : 
                        return _menhir_run4(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 1 : 
                        return _menhir_run5(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 2 : 
                        return _menhir_run6(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 3 : 
                        return _menhir_run7(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 4 : 
                        return _menhir_run8(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 5 : 
                        return _menhir_run9(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 6 : 
                        return _menhir_run10(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 7 : 
                        return _menhir_run11(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 8 : 
                        return _menhir_run12(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 9 : 
                        return _menhir_run13(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 10 : 
                        return _menhir_run14(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 11 : 
                        return _menhir_run15(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 12 : 
                        return _menhir_run16(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 13 : 
                        return _menhir_run17(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 15 : 
                        return _menhir_run18(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 16 : 
                        return _menhir_run19(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 21 : 
                        return _menhir_run20(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 22 : 
                        return _menhir_run21(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 23 : 
                        return _menhir_run22(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 24 : 
                        return _menhir_run23(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 25 : 
                        return _menhir_run24(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 29 : 
                        return _menhir_run26(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 30 : 
                        return _menhir_run27(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 31 : 
                        return _menhir_run28(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 32 : 
                        return _menhir_run29(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 33 : 
                        return _menhir_run30(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 34 : 
                        return _menhir_run31(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 38 : 
                        return _menhir_run32(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 39 : 
                        return _menhir_run33(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 40 : 
                        return _menhir_run34(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 41 : 
                        return _menhir_run35(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 42 : 
                        return _menhir_run36(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 43 : 
                        return _menhir_run37(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 44 : 
                        return _menhir_run38(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 45 : 
                        return _menhir_run39(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    case 47 : 
                        return _menhir_run40(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                    default:
                      exit$3 = 2;
                  }
                } else if (_tok$3.tag === 1) {
                  return _menhir_run25(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37, _tok$3[0]);
                } else {
                  exit$3 = 2;
                }
                if (exit$3 === 2) {
                  if (_menhir_env$4[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "gql_parser.ml",
                            11496,
                            12
                          ]
                        ];
                  }
                  _menhir_env$4[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$4, _menhir_stack$1, /* MenhirState328 */37);
                }
                break;
            
          }
        }
      } else if (_tok >= 17) {
        exit = 1;
      } else {
        var _menhir_env$5 = _menhir_discard(_menhir_env$1);
        var _tok$4 = _menhir_env$5[/* _menhir_token */2];
        var exit$4 = 0;
        if (typeof _tok$4 === "number") {
          switch (_tok$4) {
            case 0 : 
                return _menhir_run4(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 1 : 
                return _menhir_run5(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 2 : 
                return _menhir_run6(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 3 : 
                return _menhir_run7(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 4 : 
                return _menhir_run8(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 5 : 
                return _menhir_run9(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 6 : 
                return _menhir_run10(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 7 : 
                return _menhir_run11(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 8 : 
                return _menhir_run12(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 9 : 
                return _menhir_run13(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 10 : 
                return _menhir_run14(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 11 : 
                return _menhir_run15(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 12 : 
                return _menhir_run16(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 13 : 
                return _menhir_run17(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 15 : 
                return _menhir_run18(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 16 : 
                return _menhir_run19(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 21 : 
                return _menhir_run20(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 22 : 
                return _menhir_run21(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 23 : 
                return _menhir_run22(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 24 : 
                return _menhir_run23(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 25 : 
                return _menhir_run24(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 29 : 
                return _menhir_run26(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 30 : 
                return _menhir_run27(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 31 : 
                return _menhir_run28(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 32 : 
                return _menhir_run29(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 33 : 
                return _menhir_run30(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 34 : 
                return _menhir_run31(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 38 : 
                return _menhir_run32(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 39 : 
                return _menhir_run33(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 40 : 
                return _menhir_run34(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 41 : 
                return _menhir_run35(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 42 : 
                return _menhir_run36(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 43 : 
                return _menhir_run37(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 44 : 
                return _menhir_run38(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 45 : 
                return _menhir_run39(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            case 47 : 
                return _menhir_run40(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
            default:
              exit$4 = 2;
          }
        } else if (_tok$4.tag === 1) {
          return _menhir_run25(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46, _tok$4[0]);
        } else {
          exit$4 = 2;
        }
        if (exit$4 === 2) {
          if (_menhir_env$5[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    11748,
                    12
                  ]
                ];
          }
          _menhir_env$5[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$5, _menhir_stack$1, /* MenhirState310 */46);
        }
        
      }
    } else if (_tok >= 2) {
      if (_tok >= 15) {
        var _menhir_env$6 = _menhir_discard(_menhir_env$1);
        var _tok$5 = _menhir_env$6[/* _menhir_token */2];
        var exit$5 = 0;
        if (typeof _tok$5 === "number") {
          if (_tok$5 !== 28) {
            if (_tok$5 !== 49) {
              exit$5 = 2;
            } else {
              return _menhir_run3(_menhir_env$6, _menhir_stack$1, /* MenhirState302 */49);
            }
          } else {
            return _menhir_run303(_menhir_env$6, _menhir_stack$1, /* MenhirState302 */49);
          }
        } else {
          exit$5 = 2;
        }
        if (exit$5 === 2) {
          if (_menhir_env$6[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    11762,
                    12
                  ]
                ];
          }
          _menhir_env$6[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$6, _menhir_stack$1, /* MenhirState302 */49);
        }
        
      } else {
        exit = 1;
      }
    } else if (_tok !== 0) {
      var _menhir_env$7 = _menhir_discard(_menhir_env$1);
      var _tok$6 = _menhir_env$7[/* _menhir_token */2];
      var exit$6 = 0;
      if (typeof _tok$6 === "number") {
        switch (_tok$6) {
          case 0 : 
              return _menhir_run4(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 1 : 
              return _menhir_run5(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 2 : 
              return _menhir_run6(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 3 : 
              return _menhir_run7(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 4 : 
              return _menhir_run8(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 5 : 
              return _menhir_run9(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 6 : 
              return _menhir_run10(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 7 : 
              return _menhir_run11(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 8 : 
              return _menhir_run12(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 9 : 
              return _menhir_run13(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 10 : 
              return _menhir_run14(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 11 : 
              return _menhir_run15(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 12 : 
              return _menhir_run16(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 13 : 
              return _menhir_run17(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 15 : 
              return _menhir_run18(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 16 : 
              return _menhir_run19(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 21 : 
              return _menhir_run20(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 22 : 
              return _menhir_run21(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 23 : 
              return _menhir_run22(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 24 : 
              return _menhir_run23(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 25 : 
              return _menhir_run24(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 29 : 
              return _menhir_run26(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 30 : 
              return _menhir_run27(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 31 : 
              return _menhir_run28(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 32 : 
              return _menhir_run29(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 33 : 
              return _menhir_run30(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 34 : 
              return _menhir_run31(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 38 : 
              return _menhir_run32(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 39 : 
              return _menhir_run33(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 40 : 
              return _menhir_run34(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 41 : 
              return _menhir_run35(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 42 : 
              return _menhir_run36(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 43 : 
              return _menhir_run37(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 44 : 
              return _menhir_run38(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 45 : 
              return _menhir_run39(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          case 47 : 
              return _menhir_run40(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
          default:
            exit$6 = 2;
        }
      } else if (_tok$6.tag === 1) {
        return _menhir_run25(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70, _tok$6[0]);
      } else {
        exit$6 = 2;
      }
      if (exit$6 === 2) {
        if (_menhir_env$7[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  11846,
                  12
                ]
              ];
        }
        _menhir_env$7[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$7, _menhir_stack$1, /* MenhirState248 */70);
      }
      
    } else {
      var _menhir_env$8 = _menhir_discard(_menhir_env$1);
      var _tok$7 = _menhir_env$8[/* _menhir_token */2];
      var exit$7 = 0;
      if (typeof _tok$7 === "number") {
        switch (_tok$7) {
          case 0 : 
              return _menhir_run4(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 1 : 
              return _menhir_run5(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 2 : 
              return _menhir_run6(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 3 : 
              return _menhir_run7(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 4 : 
              return _menhir_run8(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 5 : 
              return _menhir_run9(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 6 : 
              return _menhir_run10(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 7 : 
              return _menhir_run11(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 8 : 
              return _menhir_run12(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 9 : 
              return _menhir_run13(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 10 : 
              return _menhir_run14(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 11 : 
              return _menhir_run15(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 12 : 
              return _menhir_run16(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 13 : 
              return _menhir_run17(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 15 : 
              return _menhir_run18(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 16 : 
              return _menhir_run19(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 21 : 
              return _menhir_run20(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 22 : 
              return _menhir_run21(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 23 : 
              return _menhir_run22(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 24 : 
              return _menhir_run23(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 25 : 
              return _menhir_run24(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 29 : 
              return _menhir_run26(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 30 : 
              return _menhir_run27(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 31 : 
              return _menhir_run28(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 32 : 
              return _menhir_run29(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 33 : 
              return _menhir_run30(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 34 : 
              return _menhir_run31(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 38 : 
              return _menhir_run32(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 39 : 
              return _menhir_run33(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 40 : 
              return _menhir_run34(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 41 : 
              return _menhir_run35(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 42 : 
              return _menhir_run36(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 43 : 
              return _menhir_run37(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 44 : 
              return _menhir_run38(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 45 : 
              return _menhir_run39(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          case 47 : 
              return _menhir_run40(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
          default:
            exit$7 = 2;
        }
      } else if (_tok$7.tag === 1) {
        return _menhir_run25(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76, _tok$7[0]);
      } else {
        exit$7 = 2;
      }
      if (exit$7 === 2) {
        if (_menhir_env$8[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  11930,
                  12
                ]
              ];
        }
        _menhir_env$8[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$8, _menhir_stack$1, /* MenhirState236 */76);
      }
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              11934,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_goto_option_default_value_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_s !== 3) {
    if (_menhir_s !== 61) {
      return _menhir_fail(/* () */0);
    } else {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                4784,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number") {
        switch (_tok) {
          case 49 : 
              return _menhir_run3(_menhir_env, _menhir_stack$1, /* MenhirState269 */59);
          case 14 : 
          case 17 : 
          case 20 : 
          case 26 : 
          case 27 : 
          case 28 : 
          case 35 : 
          case 36 : 
          case 37 : 
          case 46 : 
          case 48 : 
          case 50 : 
              exit = 1;
              break;
          default:
            return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState269 */59);
        }
      } else {
        switch (_tok.tag | 0) {
          case 2 : 
          case 3 : 
              exit = 1;
              break;
          default:
            return _menhir_reduce225(_menhir_env, _menhir_stack$1, /* MenhirState269 */59);
        }
      }
      if (exit === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  4792,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState269 */59);
      }
      
    }
  } else {
    var match = _menhir_stack[0];
    var _menhir_s$1 = match[1];
    var _menhir_stack$2 = match[0];
    var _v_000 = /* variable */match[2];
    var _v_001 = /* tpe */_menhir_stack[2];
    var _v$1 = /* record */[
      _v_000,
      _v_001,
      /* defaultValue */_v
    ];
    var _menhir_stack$3 = /* tuple */[
      _menhir_stack$2,
      _menhir_s$1,
      _v$1
    ];
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              4817,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number") {
      if (_tok$1 !== 18) {
        if (_tok$1 !== 46) {
          exit$1 = 1;
        } else {
          return _menhir_run185(_menhir_env, _menhir_stack$3, /* MenhirState414 */5);
        }
      } else {
        var _v$2 = /* :: */[
          _v$1,
          /* [] */0
        ];
        var _menhir_env$1 = _menhir_env;
        var __menhir_stack = _menhir_stack$2;
        var __menhir_s = _menhir_s$1;
        var __v = _v$2;
        while(true) {
          var _v$3 = __v;
          var _menhir_s$2 = __menhir_s;
          var _menhir_stack$4 = __menhir_stack;
          if (_menhir_s$2 !== 5) {
            if (_menhir_s$2 !== 6) {
              return _menhir_fail(/* () */0);
            } else {
              if (_menhir_env$1[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "gql_parser.ml",
                        2519,
                        10
                      ]
                    ];
              }
              var _tok$2 = _menhir_env$1[/* _menhir_token */2];
              var exit$2 = 0;
              if (typeof _tok$2 === "number" && _tok$2 === 18) {
                var _menhir_env$2 = _menhir_discard(_menhir_env$1);
                var _v$4 = _v$3;
                return _menhir_goto_option_variable_definitions_(_menhir_env$2, _menhir_stack$4, _v$4);
              } else {
                exit$2 = 1;
              }
              if (exit$2 === 1) {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "gql_parser.ml",
                          2552,
                          12
                        ]
                      ];
                }
                _menhir_env$1[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$1, _menhir_stack$4, _menhir_s$2);
              }
              
            }
          } else {
            var _v_000$1 = _menhir_stack$4[2];
            var _v$5 = /* :: */[
              _v_000$1,
              _v$3
            ];
            __v = _v$5;
            __menhir_s = _menhir_stack$4[1];
            __menhir_stack = _menhir_stack$4[0];
            continue ;
          }
        };
      }
    } else {
      exit$1 = 1;
    }
    if (exit$1 === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                4833,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$3, /* MenhirState414 */5);
    }
    
  }
}

function _menhir_goto_option_arguments_nc_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_s >= 88) {
    if (_menhir_s !== 101) {
      return _menhir_fail(/* () */0);
    } else {
      var match = _menhir_stack[0];
      var _menhir_s$1 = match[1];
      var _menhir_stack$2 = match[0];
      var _v_000 = /* name */_menhir_stack[2];
      var _v_001 = /* arguments */flat(_v);
      var _v$1 = /* record */[
        _v_000,
        _v_001
      ];
      var _menhir_stack$3 = /* tuple */[
        _menhir_stack$2,
        _menhir_s$1,
        _v$1
      ];
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                2322,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number") {
        switch (_tok) {
          case 49 : 
              return _menhir_run168(_menhir_env, _menhir_stack$3, /* MenhirState209 */90);
          case 17 : 
          case 18 : 
          case 20 : 
          case 26 : 
          case 27 : 
          case 35 : 
          case 36 : 
          case 37 : 
          case 46 : 
          case 48 : 
          case 50 : 
              exit = 1;
              break;
          default:
            exit = 2;
        }
      } else {
        switch (_tok.tag | 0) {
          case 0 : 
          case 2 : 
          case 3 : 
          case 4 : 
              exit = 1;
              break;
          default:
            exit = 2;
        }
      }
      switch (exit) {
        case 1 : 
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      2338,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$3, /* MenhirState209 */90);
        case 2 : 
            var _v$2 = /* :: */[
              _v$1,
              /* [] */0
            ];
            var _menhir_env$1 = _menhir_env;
            var __menhir_stack = _menhir_stack$2;
            var __menhir_s = _menhir_s$1;
            var __v = _v$2;
            while(true) {
              var _v$3 = __v;
              var _menhir_s$2 = __menhir_s;
              var _menhir_stack$4 = __menhir_stack;
              var exit$1 = 0;
              if (_menhir_s$2 >= 78) {
                if (_menhir_s$2 >= 104) {
                  return _menhir_fail(/* () */0);
                } else {
                  switch (_menhir_s$2 - 78 | 0) {
                    case 12 : 
                        var _v_000$1 = _menhir_stack$4[2];
                        var _v$4 = /* :: */[
                          _v_000$1,
                          _v$3
                        ];
                        __v = _v$4;
                        __menhir_s = _menhir_stack$4[1];
                        __menhir_stack = _menhir_stack$4[0];
                        continue ;
                    case 1 : 
                    case 2 : 
                    case 3 : 
                    case 5 : 
                    case 7 : 
                    case 8 : 
                    case 9 : 
                    case 10 : 
                    case 13 : 
                    case 14 : 
                    case 15 : 
                    case 16 : 
                    case 17 : 
                    case 18 : 
                    case 19 : 
                    case 20 : 
                    case 21 : 
                    case 22 : 
                    case 23 : 
                    case 24 : 
                        return _menhir_fail(/* () */0);
                    case 0 : 
                    case 4 : 
                    case 6 : 
                    case 11 : 
                    case 25 : 
                        exit$1 = 1;
                        break;
                    
                  }
                }
              } else if (_menhir_s$2 !== 2) {
                return _menhir_fail(/* () */0);
              } else {
                exit$1 = 1;
              }
              if (exit$1 === 1) {
                var _v$5 = _v$3;
                return _menhir_goto_option_directives_nc_(_menhir_env$1, _menhir_stack$4, _menhir_s$2, _v$5);
              }
              
            };
        
      }
    }
  } else if (_menhir_s >= 85) {
    switch (_menhir_s - 85 | 0) {
      case 0 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    2344,
                    10
                  ]
                ];
          }
          var _tok$1 = _menhir_env[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 49 : 
                  return _menhir_run168(_menhir_env, _menhir_stack$1, /* MenhirState218 */84);
              case 17 : 
              case 18 : 
              case 20 : 
              case 26 : 
              case 27 : 
              case 35 : 
              case 36 : 
              case 37 : 
              case 46 : 
              case 48 : 
              case 50 : 
                  exit$2 = 1;
                  break;
              default:
                return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState218 */84);
            }
          } else {
            switch (_tok$1.tag | 0) {
              case 0 : 
              case 2 : 
              case 3 : 
              case 4 : 
                  exit$2 = 1;
                  break;
              default:
                return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState218 */84);
            }
          }
          if (exit$2 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      2352,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState218 */84);
          }
          break;
      case 1 : 
          return _menhir_fail(/* () */0);
      case 2 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    2358,
                    10
                  ]
                ];
          }
          var _tok$2 = _menhir_env[/* _menhir_token */2];
          var exit$3 = 0;
          if (typeof _tok$2 === "number") {
            switch (_tok$2) {
              case 49 : 
                  return _menhir_run168(_menhir_env, _menhir_stack$1, /* MenhirState222 */82);
              case 17 : 
              case 18 : 
              case 20 : 
              case 26 : 
              case 27 : 
              case 35 : 
              case 36 : 
              case 37 : 
              case 46 : 
              case 48 : 
              case 50 : 
                  exit$3 = 1;
                  break;
              default:
                return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState222 */82);
            }
          } else {
            switch (_tok$2.tag | 0) {
              case 0 : 
              case 2 : 
              case 3 : 
              case 4 : 
                  exit$3 = 1;
                  break;
              default:
                return _menhir_reduce227(_menhir_env, _menhir_stack$1, /* MenhirState222 */82);
            }
          }
          if (exit$3 === 1) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "gql_parser.ml",
                      2366,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$1, /* MenhirState222 */82);
          }
          break;
      
    }
  } else {
    return _menhir_fail(/* () */0);
  }
}

function _menhir_goto_field(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* Field */Block.__(0, [_v]);
  return _menhir_goto_selection(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_reduce122(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 96) {
      if (_menhir_s$1 !== 97) {
        return _menhir_fail(/* () */0);
      } else {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  2455,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 19) {
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _v$1 = /* ObjectValue */Block.__(7, [_v]);
          return _menhir_goto_value_nc(_menhir_env$2, _menhir_stack$1[0], _menhir_stack$1[1], _v$1);
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    2491,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$2 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$2;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_goto_option_arguments_definition_(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_s !== 11) {
    if (_menhir_s !== 66) {
      return _menhir_fail(/* () */0);
    } else {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                1608,
                10
              ]
            ];
      }
      var _tok = _menhir_env[/* _menhir_token */2];
      var exit = 0;
      if (typeof _tok === "number" && _tok === 48) {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var _tok$1 = _menhir_env$1[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok$1 === "number") {
          switch (_tok$1) {
            case 0 : 
                return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 1 : 
                return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 2 : 
                return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 3 : 
                return _menhir_run7(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 4 : 
                return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 5 : 
                return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 6 : 
                return _menhir_run10(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 7 : 
                return _menhir_run11(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 8 : 
                return _menhir_run12(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 9 : 
                return _menhir_run13(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 10 : 
                return _menhir_run14(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 11 : 
                return _menhir_run15(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 12 : 
                return _menhir_run16(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 13 : 
                return _menhir_run17(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 15 : 
                return _menhir_run18(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 16 : 
                return _menhir_run19(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 21 : 
                return _menhir_run20(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 22 : 
                return _menhir_run21(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 23 : 
                return _menhir_run22(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 24 : 
                return _menhir_run23(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 25 : 
                return _menhir_run24(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 26 : 
                return _menhir_run258(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 29 : 
                return _menhir_run26(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 30 : 
                return _menhir_run27(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 31 : 
                return _menhir_run28(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 32 : 
                return _menhir_run29(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 33 : 
                return _menhir_run30(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 34 : 
                return _menhir_run31(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 38 : 
                return _menhir_run32(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 39 : 
                return _menhir_run33(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 40 : 
                return _menhir_run34(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 41 : 
                return _menhir_run35(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 42 : 
                return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 43 : 
                return _menhir_run37(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 44 : 
                return _menhir_run38(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 45 : 
                return _menhir_run39(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            case 47 : 
                return _menhir_run40(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
            default:
              exit$1 = 2;
          }
        } else if (_tok$1.tag === 1) {
          return _menhir_run25(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57, _tok$1[0]);
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "gql_parser.ml",
                    1694,
                    16
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState278 */57);
        }
        
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  1698,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
      }
      
    }
  } else {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              1707,
              10
            ]
          ];
    }
    var _tok$2 = _menhir_env[/* _menhir_token */2];
    var exit$2 = 0;
    if (typeof _tok$2 === "number" && _tok$2 === 24) {
      var _menhir_env$2 = _menhir_discard(_menhir_env);
      var _tok$3 = _menhir_env$2[/* _menhir_token */2];
      var exit$3 = 0;
      if (typeof _tok$3 === "number") {
        var switcher = _tok$3 - 13 | 0;
        if (switcher > 25 || switcher < 0) {
          if ((switcher + 11 >>> 0) > 43) {
            exit$3 = 2;
          } else {
            return _menhir_reduce213(_menhir_env$2, _menhir_stack$1, /* MenhirState384 */10);
          }
        } else if (switcher !== 7) {
          exit$3 = 2;
        } else {
          return _menhir_run240(_menhir_env$2, _menhir_stack$1, /* MenhirState384 */10);
        }
      } else {
        exit$3 = 2;
      }
      if (exit$3 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "gql_parser.ml",
                  1721,
                  16
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState384 */10);
      }
      
    } else {
      exit$2 = 1;
    }
    if (exit$2 === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "gql_parser.ml",
                1725,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    }
    
  }
}

function _menhir_goto_input_object_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* InputObjectTypeExtension */Block.__(5, [_v]);
  return _menhir_goto_type_extension(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_schema_extension(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* SchemaExtension */Block.__(0, [_v]);
  return _menhir_goto_type_system_extension(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run240(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v = /* () */0;
  return _menhir_goto_option_PIPE_(_menhir_env$1, _menhir_stack, _menhir_s, _v);
}

function _menhir_reduce213(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_option_PIPE_(_menhir_env, _menhir_stack, _menhir_s, undefined);
}

function _menhir_goto_executable_definition(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* ExecutableDefinition */Block.__(2, [_v]);
  return _menhir_goto_definition(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_operation_definition(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* OperationDefinition */Block.__(0, [_v]);
  return _menhir_goto_executable_definition(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_opt_fields_definition(_menhir_env, _menhir_stack, _menhir_s, _v) {
  switch (_menhir_s) {
    case 50 : 
        var match = _menhir_stack[0];
        var match$1 = match[0];
        var _v_000 = /* name */match[2];
        var _v_002 = /* directives */_menhir_stack[2];
        var _v_003 = /* fields */flat(_v);
        var _v$1 = /* record */[
          _v_000,
          /* implements : [] */0,
          _v_002,
          _v_003
        ];
        return _menhir_goto_object_type_extension(_menhir_env, match$1[0], match$1[1], _v$1);
    case 51 : 
        var _v_002$1 = /* directives */_menhir_stack[2];
        var _v_003$1 = /* fields */flat(_v);
        var _v$2 = /* record */[
          /* name */"",
          /* implements : [] */0,
          _v_002$1,
          _v_003$1
        ];
        return _menhir_goto_opt_dir_fields(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$2);
    case 52 : 
        var _v_003$2 = /* fields */flat(_v);
        var _v$3 = /* record */[
          /* name */"",
          /* implements : [] */0,
          /* directives : [] */0,
          _v_003$2
        ];
        return _menhir_goto_opt_dir_fields(_menhir_env, _menhir_stack, _menhir_s, _v$3);
    default:
      return _menhir_fail(/* () */0);
  }
}

function $$document(lexer, lexbuf) {
  var _menhir_env = /* record */[
    /* _menhir_lexer */lexer,
    /* _menhir_lexbuf */lexbuf,
    /* _menhir_token : () */0,
    /* _menhir_error */false
  ];
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 15 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      case 21 : 
          return _menhir_run111(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      case 22 : 
          return _menhir_run112(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      case 23 : 
          return _menhir_run113(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      case 28 : 
          return _menhir_run126(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      case 32 : 
          return _menhir_run230(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      case 34 : 
          return _menhir_run235(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      case 0 : 
      case 1 : 
      case 16 : 
      case 29 : 
      case 30 : 
      case 38 : 
      case 47 : 
          return _menhir_reduce223(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
      default:
        exit = 1;
    }
  } else {
    switch (_tok.tag | 0) {
      case 0 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState0 */121, _tok[0]);
      case 4 : 
          return _menhir_run91(_menhir_env$1, _menhir_stack, /* MenhirState0 */121, _tok[0]);
      default:
        exit = 1;
    }
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "gql_parser.ml",
              12022,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState0 */121);
  }
  
}

exports.$$Error = $$Error;
exports.$$document = $$document;
/* No side effect */
