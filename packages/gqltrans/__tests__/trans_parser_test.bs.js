// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Lexing = require("bs-platform/lib/js/lexing.js");
var $$String = require("bs-platform/lib/js/string.js");
var Trans_lexer = require("../src/trans_lexer.bs.js");
var Trans_parser = require("../src/trans_parser.bs.js");

function parse(param) {
  return Trans_parser.$$document(Trans_lexer.read, param);
}

function parseString(s) {
  return parse(Lexing.from_string(s));
}

function testName(program) {
  return "program: \"" + ($$String.escaped(program) + "\"");
}

function testProgram(program, result) {
  return Jest.test(testName(program), (function (param) {
                return Jest.Expect[/* toEqual */12](result, Jest.Expect[/* expect */0](parse(Lexing.from_string(program))));
              }));
}

function mapper(t) {
  return /* TypeTransformation */Block.__(0, [/* ObjectTypeTransformation */Block.__(1, [t])]);
}

function tts(ts) {
  return /* record */[/* transformations */List.map(mapper, ts)];
}

function tt(t) {
  return /* record */[/* transformations */List.map(mapper, /* :: */[
                t,
                /* [] */0
              ])];
}

function ts(t) {
  return /* record */[/* transformations : :: */[
            /* SchemaTransformation */Block.__(1, [t]),
            /* [] */0
          ]];
}

function stt(t) {
  return /* record */[/* transformations : :: */[
            /* TypeTransformation */Block.__(0, [/* ScalarTypeTransformation */Block.__(0, [t])]),
            /* [] */0
          ]];
}

function utt(t) {
  return /* record */[/* transformations : :: */[
            /* TypeTransformation */Block.__(0, [/* UnionTypeTransformation */Block.__(3, [t])]),
            /* [] */0
          ]];
}

function itt(t) {
  return /* record */[/* transformations : :: */[
            /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [t])]),
            /* [] */0
          ]];
}

function iott(t) {
  return /* record */[/* transformations : :: */[
            /* TypeTransformation */Block.__(0, [/* InputObjectTypeTransformation */Block.__(5, [t])]),
            /* [] */0
          ]];
}

function ett(t) {
  return /* record */[/* transformations : :: */[
            /* TypeTransformation */Block.__(0, [/* EnumTypeTransformation */Block.__(4, [t])]),
            /* [] */0
          ]];
}

describe("Trans_parser", (function () {
        describe("SchemaTransform", (function () {
                testProgram("transform schema { query }", /* record */[/* transformations : :: */[
                        /* SchemaTransformation */Block.__(1, [/* :: */[
                              /* Query */0,
                              /* [] */0
                            ]]),
                        /* [] */0
                      ]]);
                testProgram("transform schema { query mutation }", /* record */[/* transformations : :: */[
                        /* SchemaTransformation */Block.__(1, [/* :: */[
                              /* Query */0,
                              /* :: */[
                                /* Mutation */1,
                                /* [] */0
                              ]
                            ]]),
                        /* [] */0
                      ]]);
                return testProgram("transform schema { query mutation subscription}", /* record */[/* transformations : :: */[
                              /* SchemaTransformation */Block.__(1, [/* :: */[
                                    /* Query */0,
                                    /* :: */[
                                      /* Mutation */1,
                                      /* :: */[
                                        /* Subscription */2,
                                        /* [] */0
                                      ]
                                    ]
                                  ]]),
                              /* [] */0
                            ]]);
              }));
        describe("TypeTransformation", (function () {
                describe("ScalarTypeTransformation", (function () {
                        testProgram("transform scalar Foo", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* ScalarTypeTransformation */Block.__(0, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Foo",
                                            /* alias */undefined
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("\n                \"test\"\n                transform scalar Foo\n                ", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* ScalarTypeTransformation */Block.__(0, [/* record */[
                                          /* description *//* StringValue */Block.__(0, ["test"]),
                                          /* selector : record */[
                                            /* name */"Foo",
                                            /* alias */undefined
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        return testProgram("\n                \"test\"\n                transform scalar Bar: Foo\n                ", /* record */[/* transformations : :: */[
                                      /* TypeTransformation */Block.__(0, [/* ScalarTypeTransformation */Block.__(0, [/* record */[
                                                /* description *//* StringValue */Block.__(0, ["test"]),
                                                /* selector : record */[
                                                  /* name */"Foo",
                                                  /* alias */"Bar"
                                                ]
                                              ]])]),
                                      /* [] */0
                                    ]]);
                      }));
                describe("UnionTypeTransformation", (function () {
                        testProgram("transform union Foo", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* UnionTypeTransformation */Block.__(3, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Foo",
                                            /* alias */undefined
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("\n                \"test\"\n                transform union Foo\n                ", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* UnionTypeTransformation */Block.__(3, [/* record */[
                                          /* description *//* StringValue */Block.__(0, ["test"]),
                                          /* selector : record */[
                                            /* name */"Foo",
                                            /* alias */undefined
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        return testProgram("\n                \"test\"\n                transform union Bar: Foo\n                ", /* record */[/* transformations : :: */[
                                      /* TypeTransformation */Block.__(0, [/* UnionTypeTransformation */Block.__(3, [/* record */[
                                                /* description *//* StringValue */Block.__(0, ["test"]),
                                                /* selector : record */[
                                                  /* name */"Foo",
                                                  /* alias */"Bar"
                                                ]
                                              ]])]),
                                      /* [] */0
                                    ]]);
                      }));
                describe("ObjectTypeTransformation", (function () {
                        testProgram("transform type Foobar", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Foobar",
                                        /* alias */undefined
                                      ],
                                      /* fields : [] */0
                                    ],
                                    /* [] */0
                                  ])]);
                        testProgram("transform type Foobar transform type Baz", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Foobar",
                                        /* alias */undefined
                                      ],
                                      /* fields : [] */0
                                    ],
                                    /* :: */[
                                      /* record */[
                                        /* description */undefined,
                                        /* selector : record */[
                                          /* name */"Baz",
                                          /* alias */undefined
                                        ],
                                        /* fields : [] */0
                                      ],
                                      /* [] */0
                                    ]
                                  ])]);
                        testProgram("transform type Foobar: Baz", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Baz",
                                        /* alias */"Foobar"
                                      ],
                                      /* fields : [] */0
                                    ],
                                    /* [] */0
                                  ])]);
                        testProgram("\n                transform type Foobar: Baz {\n                    field1\n                    alias2: field2\n                }", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Baz",
                                        /* alias */"Foobar"
                                      ],
                                      /* fields : :: */[
                                        /* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"field1",
                                            /* alias */undefined
                                          ],
                                          /* arguments : [] */0
                                        ],
                                        /* :: */[
                                          /* record */[
                                            /* description */undefined,
                                            /* selector : record */[
                                              /* name */"field2",
                                              /* alias */"alias2"
                                            ],
                                            /* arguments : [] */0
                                          ],
                                          /* [] */0
                                        ]
                                      ]
                                    ],
                                    /* [] */0
                                  ])]);
                        testProgram("\n                \"\"\"desc\"\"\"\n                transform type Lol\n                ", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description *//* BlockStringValue */Block.__(1, ["desc"]),
                                      /* selector : record */[
                                        /* name */"Lol",
                                        /* alias */undefined
                                      ],
                                      /* fields : [] */0
                                    ],
                                    /* [] */0
                                  ])]);
                        testProgram("\n                transform type Lol {\n                    \"desc\"\n                    true\n                }\n                ", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Lol",
                                        /* alias */undefined
                                      ],
                                      /* fields : :: */[
                                        /* record */[
                                          /* description *//* StringValue */Block.__(0, ["desc"]),
                                          /* selector : record */[
                                            /* name */"true",
                                            /* alias */undefined
                                          ],
                                          /* arguments : [] */0
                                        ],
                                        /* [] */0
                                      ]
                                    ],
                                    /* [] */0
                                  ])]);
                        testProgram("\n                transform type Lol {\n                    null(arg = 123)\n                }\n                ", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Lol",
                                        /* alias */undefined
                                      ],
                                      /* fields : :: */[
                                        /* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"null",
                                            /* alias */undefined
                                          ],
                                          /* arguments : :: */[
                                            /* record */[
                                              /* description */undefined,
                                              /* name */"arg",
                                              /* value *//* IntValue */Block.__(0, [123])
                                            ],
                                            /* [] */0
                                          ]
                                        ],
                                        /* [] */0
                                      ]
                                    ],
                                    /* [] */0
                                  ])]);
                        testProgram("\n                transform type Lol {\n\n                    field(\n                        \"\"\"desc\"\"\"\n                        false = 123)\n                }\n                ", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Lol",
                                        /* alias */undefined
                                      ],
                                      /* fields : :: */[
                                        /* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"field",
                                            /* alias */undefined
                                          ],
                                          /* arguments : :: */[
                                            /* record */[
                                              /* description *//* BlockStringValue */Block.__(1, ["desc"]),
                                              /* name */"false",
                                              /* value *//* IntValue */Block.__(0, [123])
                                            ],
                                            /* [] */0
                                          ]
                                        ],
                                        /* [] */0
                                      ]
                                    ],
                                    /* [] */0
                                  ])]);
                        testProgram("\n                transform type Lol {\n\n                    field(\n                        \"\"\"desc\"\"\"\n                        false)\n                }\n                ", /* record */[/* transformations */List.map(mapper, /* :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"Lol",
                                        /* alias */undefined
                                      ],
                                      /* fields : :: */[
                                        /* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"field",
                                            /* alias */undefined
                                          ],
                                          /* arguments : :: */[
                                            /* record */[
                                              /* description *//* BlockStringValue */Block.__(1, ["desc"]),
                                              /* name */"false",
                                              /* value */undefined
                                            ],
                                            /* [] */0
                                          ]
                                        ],
                                        /* [] */0
                                      ]
                                    ],
                                    /* [] */0
                                  ])]);
                        return testProgram("\n                transform type Lol {\n                    field(arg = [123, 123, true, false, null])\n                }\n                ", /* record */[/* transformations */List.map(mapper, /* :: */[
                                          /* record */[
                                            /* description */undefined,
                                            /* selector : record */[
                                              /* name */"Lol",
                                              /* alias */undefined
                                            ],
                                            /* fields : :: */[
                                              /* record */[
                                                /* description */undefined,
                                                /* selector : record */[
                                                  /* name */"field",
                                                  /* alias */undefined
                                                ],
                                                /* arguments : :: */[
                                                  /* record */[
                                                    /* description */undefined,
                                                    /* name */"arg",
                                                    /* value *//* ListValue */Block.__(5, [/* :: */[
                                                          /* IntValue */Block.__(0, [123]),
                                                          /* :: */[
                                                            /* IntValue */Block.__(0, [123]),
                                                            /* :: */[
                                                              /* BooleanValue */Block.__(3, [true]),
                                                              /* :: */[
                                                                /* BooleanValue */Block.__(3, [false]),
                                                                /* :: */[
                                                                  /* NullValue */0,
                                                                  /* [] */0
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]])
                                                  ],
                                                  /* [] */0
                                                ]
                                              ],
                                              /* [] */0
                                            ]
                                          ],
                                          /* [] */0
                                        ])]);
                      }));
                describe("InterfaceTypeTransformation", (function () {
                        testProgram("transform interface Foobar", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Foobar",
                                            /* alias */undefined
                                          ],
                                          /* fields : [] */0
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("transform interface Foobar transform type Baz", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Foobar",
                                            /* alias */undefined
                                          ],
                                          /* fields : [] */0
                                        ]])]),
                                /* :: */[
                                  /* TypeTransformation */Block.__(0, [/* ObjectTypeTransformation */Block.__(1, [/* record */[
                                            /* description */undefined,
                                            /* selector : record */[
                                              /* name */"Baz",
                                              /* alias */undefined
                                            ],
                                            /* fields : [] */0
                                          ]])]),
                                  /* [] */0
                                ]
                              ]]);
                        testProgram("transform interface Foobar: Baz", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Baz",
                                            /* alias */"Foobar"
                                          ],
                                          /* fields : [] */0
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("\n                transform interface Foobar: Baz {\n                    field1\n                    alias2: field2\n                }", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Baz",
                                            /* alias */"Foobar"
                                          ],
                                          /* fields : :: */[
                                            /* record */[
                                              /* description */undefined,
                                              /* selector : record */[
                                                /* name */"field1",
                                                /* alias */undefined
                                              ],
                                              /* arguments : [] */0
                                            ],
                                            /* :: */[
                                              /* record */[
                                                /* description */undefined,
                                                /* selector : record */[
                                                  /* name */"field2",
                                                  /* alias */"alias2"
                                                ],
                                                /* arguments : [] */0
                                              ],
                                              /* [] */0
                                            ]
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("\n                \"\"\"desc\"\"\"\n                transform interface Lol\n                ", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [/* record */[
                                          /* description *//* BlockStringValue */Block.__(1, ["desc"]),
                                          /* selector : record */[
                                            /* name */"Lol",
                                            /* alias */undefined
                                          ],
                                          /* fields : [] */0
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("\n                transform interface Lol {\n                    \"desc\"\n                    true\n                }\n                ", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Lol",
                                            /* alias */undefined
                                          ],
                                          /* fields : :: */[
                                            /* record */[
                                              /* description *//* StringValue */Block.__(0, ["desc"]),
                                              /* selector : record */[
                                                /* name */"true",
                                                /* alias */undefined
                                              ],
                                              /* arguments : [] */0
                                            ],
                                            /* [] */0
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("\n                transform interface Lol {\n                    null(arg = 123)\n                }\n                ", itt(/* record */[
                                  /* description */undefined,
                                  /* selector : record */[
                                    /* name */"Lol",
                                    /* alias */undefined
                                  ],
                                  /* fields : :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"null",
                                        /* alias */undefined
                                      ],
                                      /* arguments : :: */[
                                        /* record */[
                                          /* description */undefined,
                                          /* name */"arg",
                                          /* value *//* IntValue */Block.__(0, [123])
                                        ],
                                        /* [] */0
                                      ]
                                    ],
                                    /* [] */0
                                  ]
                                ]));
                        testProgram("\n                transform interface Lol {\n\n                    field(\n                        \"\"\"desc\"\"\"\n                        false = 123)\n                }\n                ", itt(/* record */[
                                  /* description */undefined,
                                  /* selector : record */[
                                    /* name */"Lol",
                                    /* alias */undefined
                                  ],
                                  /* fields : :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* selector : record */[
                                        /* name */"field",
                                        /* alias */undefined
                                      ],
                                      /* arguments : :: */[
                                        /* record */[
                                          /* description *//* BlockStringValue */Block.__(1, ["desc"]),
                                          /* name */"false",
                                          /* value *//* IntValue */Block.__(0, [123])
                                        ],
                                        /* [] */0
                                      ]
                                    ],
                                    /* [] */0
                                  ]
                                ]));
                        testProgram("\n                transform interface Lol {\n\n                    field(\n                        \"\"\"desc\"\"\"\n                        false)\n                }\n                ", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* InterfaceTypeTransformation */Block.__(2, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Lol",
                                            /* alias */undefined
                                          ],
                                          /* fields : :: */[
                                            /* record */[
                                              /* description */undefined,
                                              /* selector : record */[
                                                /* name */"field",
                                                /* alias */undefined
                                              ],
                                              /* arguments : :: */[
                                                /* record */[
                                                  /* description *//* BlockStringValue */Block.__(1, ["desc"]),
                                                  /* name */"false",
                                                  /* value */undefined
                                                ],
                                                /* [] */0
                                              ]
                                            ],
                                            /* [] */0
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        return testProgram("\n                transform interface Lol {\n                    field(arg = [123, 123, true, false, null])\n                }\n                ", itt(/* record */[
                                        /* description */undefined,
                                        /* selector : record */[
                                          /* name */"Lol",
                                          /* alias */undefined
                                        ],
                                        /* fields : :: */[
                                          /* record */[
                                            /* description */undefined,
                                            /* selector : record */[
                                              /* name */"field",
                                              /* alias */undefined
                                            ],
                                            /* arguments : :: */[
                                              /* record */[
                                                /* description */undefined,
                                                /* name */"arg",
                                                /* value *//* ListValue */Block.__(5, [/* :: */[
                                                      /* IntValue */Block.__(0, [123]),
                                                      /* :: */[
                                                        /* IntValue */Block.__(0, [123]),
                                                        /* :: */[
                                                          /* BooleanValue */Block.__(3, [true]),
                                                          /* :: */[
                                                            /* BooleanValue */Block.__(3, [false]),
                                                            /* :: */[
                                                              /* NullValue */0,
                                                              /* [] */0
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]])
                                              ],
                                              /* [] */0
                                            ]
                                          ],
                                          /* [] */0
                                        ]
                                      ]));
                      }));
                describe("InputObjectTypeTransformation", (function () {
                        testProgram("\n                transform input Lol {\n                    arg = [123, 123, true, false, null]\n                }\n                ", iott(/* record */[
                                  /* description */undefined,
                                  /* selector : record */[
                                    /* name */"Lol",
                                    /* alias */undefined
                                  ],
                                  /* fields : :: */[
                                    /* record */[
                                      /* description */undefined,
                                      /* name */"arg",
                                      /* value *//* ListValue */Block.__(5, [/* :: */[
                                            /* IntValue */Block.__(0, [123]),
                                            /* :: */[
                                              /* IntValue */Block.__(0, [123]),
                                              /* :: */[
                                                /* BooleanValue */Block.__(3, [true]),
                                                /* :: */[
                                                  /* BooleanValue */Block.__(3, [false]),
                                                  /* :: */[
                                                    /* NullValue */0,
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]])
                                    ],
                                    /* [] */0
                                  ]
                                ]));
                        return testProgram("\n                transform input Lol {\n                    arg = [123, 123, true, false, null]\n                }\n                ", iott(/* record */[
                                        /* description */undefined,
                                        /* selector : record */[
                                          /* name */"Lol",
                                          /* alias */undefined
                                        ],
                                        /* fields : :: */[
                                          /* record */[
                                            /* description */undefined,
                                            /* name */"arg",
                                            /* value *//* ListValue */Block.__(5, [/* :: */[
                                                  /* IntValue */Block.__(0, [123]),
                                                  /* :: */[
                                                    /* IntValue */Block.__(0, [123]),
                                                    /* :: */[
                                                      /* BooleanValue */Block.__(3, [true]),
                                                      /* :: */[
                                                        /* BooleanValue */Block.__(3, [false]),
                                                        /* :: */[
                                                          /* NullValue */0,
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]])
                                          ],
                                          /* [] */0
                                        ]
                                      ]));
                      }));
                describe("EnumTypeTransformation", (function () {
                        testProgram("\n                transform enum Lol {\n                  VALUE\n                }\n                ", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* EnumTypeTransformation */Block.__(4, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Lol",
                                            /* alias */undefined
                                          ],
                                          /* values : :: */[
                                            /* record */[
                                              /* description */undefined,
                                              /* value */"VALUE"
                                            ],
                                            /* [] */0
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        testProgram("\n                transform enum Lol {\n                  VALUE _FOOBAR\n                }\n                ", /* record */[/* transformations : :: */[
                                /* TypeTransformation */Block.__(0, [/* EnumTypeTransformation */Block.__(4, [/* record */[
                                          /* description */undefined,
                                          /* selector : record */[
                                            /* name */"Lol",
                                            /* alias */undefined
                                          ],
                                          /* values : :: */[
                                            /* record */[
                                              /* description */undefined,
                                              /* value */"VALUE"
                                            ],
                                            /* :: */[
                                              /* record */[
                                                /* description */undefined,
                                                /* value */"_FOOBAR"
                                              ],
                                              /* [] */0
                                            ]
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        return testProgram("\n                transform enum Lol {\n                  \"test\"\n                  VALUE \n                }\n                ", /* record */[/* transformations : :: */[
                                      /* TypeTransformation */Block.__(0, [/* EnumTypeTransformation */Block.__(4, [/* record */[
                                                /* description */undefined,
                                                /* selector : record */[
                                                  /* name */"Lol",
                                                  /* alias */undefined
                                                ],
                                                /* values : :: */[
                                                  /* record */[
                                                    /* description *//* StringValue */Block.__(0, ["test"]),
                                                    /* value */"VALUE"
                                                  ],
                                                  /* [] */0
                                                ]
                                              ]])]),
                                      /* [] */0
                                    ]]);
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

exports.parse = parse;
exports.parseString = parseString;
exports.testName = testName;
exports.testProgram = testProgram;
exports.mapper = mapper;
exports.tts = tts;
exports.tt = tt;
exports.ts = ts;
exports.stt = stt;
exports.utt = utt;
exports.itt = itt;
exports.iott = iott;
exports.ett = ett;
/*  Not a pure module */
