// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Lexing = require("bs-platform/lib/js/lexing.js");
var $$String = require("bs-platform/lib/js/string.js");
var Gql_lexer = require("../src/gql_lexer.bs.js");
var Gql_parser = require("../src/gql_parser.bs.js");

function parse(param) {
  return Gql_parser.$$document(Gql_lexer.read, param);
}

function parseString(s) {
  return parse(Lexing.from_string(s));
}

function testName(program) {
  return "program: \"" + ($$String.trim($$String.escaped(program)) + "\"");
}

function testProgram(program, result) {
  return Jest.test(testName(program), (function (param) {
                return Jest.Expect[/* toEqual */12](result, Jest.Expect[/* expect */0](parse(Lexing.from_string(program))));
              }));
}

function td(t) {
  return /* record */[/* definitions : :: */[
            /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [t])]),
            /* [] */0
          ]];
}

function sd(t) {
  return /* record */[/* definitions : :: */[
            /* TypeSystemDefinition */Block.__(0, [/* SchemaDefinition */Block.__(0, [t])]),
            /* [] */0
          ]];
}

function od(t) {
  return /* record */[/* definitions : :: */[
            /* ExecutableDefinition */Block.__(2, [/* OperationDefinition */Block.__(0, [t])]),
            /* [] */0
          ]];
}

function fd(t) {
  return /* record */[/* definitions : :: */[
            /* ExecutableDefinition */Block.__(2, [/* FragmentDefinition */Block.__(1, [t])]),
            /* [] */0
          ]];
}

describe("Schema_parser", (function () {
        describe("ExecutableDefinition", (function () {
                describe("OperationDefinition", (function () {
                        testProgram("{ foo: bar }", /* record */[/* definitions : :: */[
                                /* ExecutableDefinition */Block.__(2, [/* OperationDefinition */Block.__(0, [/* record */[
                                          /* tpe : Query */0,
                                          /* name */undefined,
                                          /* variables : [] */0,
                                          /* directives : [] */0,
                                          /* selectionSet : :: */[
                                            /* Field */Block.__(0, [/* record */[
                                                  /* alias */"foo",
                                                  /* name */"bar",
                                                  /* arguments : [] */0,
                                                  /* directives : [] */0,
                                                  /* selectionSet : [] */0
                                                ]]),
                                            /* [] */0
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        return testProgram("{ ...on Lol { foo } }", /* record */[/* definitions : :: */[
                                      /* ExecutableDefinition */Block.__(2, [/* OperationDefinition */Block.__(0, [/* record */[
                                                /* tpe : Query */0,
                                                /* name */undefined,
                                                /* variables : [] */0,
                                                /* directives : [] */0,
                                                /* selectionSet : :: */[
                                                  /* InlineFragment */Block.__(2, [/* record */[
                                                        /* condition */"Lol",
                                                        /* directives : [] */0,
                                                        /* selectionSet : :: */[
                                                          /* Field */Block.__(0, [/* record */[
                                                                /* alias */undefined,
                                                                /* name */"foo",
                                                                /* arguments : [] */0,
                                                                /* directives : [] */0,
                                                                /* selectionSet : [] */0
                                                              ]]),
                                                          /* [] */0
                                                        ]
                                                      ]]),
                                                  /* [] */0
                                                ]
                                              ]])]),
                                      /* [] */0
                                    ]]);
                      }));
                describe("FragmentDefinition", (function () {
                        return testProgram("\n                fragment f on A { foo }\n                ", /* record */[/* definitions : :: */[
                                      /* ExecutableDefinition */Block.__(2, [/* FragmentDefinition */Block.__(1, [/* record */[
                                                /* name */"f",
                                                /* condition */"A",
                                                /* directives : [] */0,
                                                /* selectionSet : :: */[
                                                  /* Field */Block.__(0, [/* record */[
                                                        /* alias */undefined,
                                                        /* name */"foo",
                                                        /* arguments : [] */0,
                                                        /* directives : [] */0,
                                                        /* selectionSet : [] */0
                                                      ]]),
                                                  /* [] */0
                                                ]
                                              ]])]),
                                      /* [] */0
                                    ]]);
                      }));
                return /* () */0;
              }));
        describe("TypeSystemDefinition", (function () {
                describe("TypeDefinition", (function () {
                        describe("ScalarTypeDefinition", (function () {
                                testProgram("scalar Int", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ScalarTypeDefinition */Block.__(0, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"Int",
                                                      /* directives : [] */0
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                return testProgram("\n            \"Foobar\"\n            scalar Int\n            ", /* record */[/* definitions : :: */[
                                              /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ScalarTypeDefinition */Block.__(0, [/* record */[
                                                            /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                            /* name */"Int",
                                                            /* directives : [] */0
                                                          ]])])]),
                                              /* [] */0
                                            ]]);
                              }));
                        describe("ScalarTypeDefinition", (function () {
                                testProgram("scalar Int", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ScalarTypeDefinition */Block.__(0, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"Int",
                                                      /* directives : [] */0
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                return testProgram("\n                    \"Foobar\"\n                    scalar Int @test\n                    ", /* record */[/* definitions : :: */[
                                              /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ScalarTypeDefinition */Block.__(0, [/* record */[
                                                            /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                            /* name */"Int",
                                                            /* directives : :: */[
                                                              /* record */[
                                                                /* name */"test",
                                                                /* arguments : [] */0
                                                              ],
                                                              /* [] */0
                                                            ]
                                                          ]])])]),
                                              /* [] */0
                                            ]]);
                              }));
                        describe("EnumTypeDefinition", (function () {
                                testProgram("\n                        \"Foobar\"\n                        enum _Lol_ { VALUE }\n                        ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* EnumTypeDefinition */Block.__(4, [/* record */[
                                                      /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                      /* name */"_Lol_",
                                                      /* directives : [] */0,
                                                      /* values : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* value */"VALUE",
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n                        \"Foobar\"\n                        enum Lol  { VALUE }\n                        ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* EnumTypeDefinition */Block.__(4, [/* record */[
                                                      /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                      /* name */"Lol",
                                                      /* directives : [] */0,
                                                      /* values : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* value */"VALUE",
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n            \"Foobar\"\n            # With comment\n            enum Lol {\n              VALUE\n            }\n            ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* EnumTypeDefinition */Block.__(4, [/* record */[
                                                      /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                      /* name */"Lol",
                                                      /* directives : [] */0,
                                                      /* values : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* value */"VALUE",
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n            \"Foobar\"\n            # With comment\n            enum Lol @foobar  {\n              VALUE\n            }\n            ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* EnumTypeDefinition */Block.__(4, [/* record */[
                                                      /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                      /* name */"Lol",
                                                      /* directives : :: */[
                                                        /* record */[
                                                          /* name */"foobar",
                                                          /* arguments : [] */0
                                                        ],
                                                        /* [] */0
                                                      ],
                                                      /* values : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* value */"VALUE",
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n            \"Foobar\"\n            enum Lol {\n              HERRO\n                      \"Awesome\"\n              FOO BAR\n            }\n            ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* EnumTypeDefinition */Block.__(4, [/* record */[
                                                      /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                      /* name */"Lol",
                                                      /* directives : [] */0,
                                                      /* values : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* value */"HERRO",
                                                          /* directives : [] */0
                                                        ],
                                                        /* :: */[
                                                          /* record */[
                                                            /* description *//* StringValue */Block.__(0, ["Awesome"]),
                                                            /* value */"FOO",
                                                            /* directives : [] */0
                                                          ],
                                                          /* :: */[
                                                            /* record */[
                                                              /* description */undefined,
                                                              /* value */"BAR",
                                                              /* directives : [] */0
                                                            ],
                                                            /* [] */0
                                                          ]
                                                        ]
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                return testProgram("\n            \"Foobar\"\n            enum Lol {\n              HERRO @dir(asd: [true, false null FOOBAR])\n                      \"Awesome\"\n              FOO BAR\n            }\n            ", /* record */[/* definitions : :: */[
                                              /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* EnumTypeDefinition */Block.__(4, [/* record */[
                                                            /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                            /* name */"Lol",
                                                            /* directives : [] */0,
                                                            /* values : :: */[
                                                              /* record */[
                                                                /* description */undefined,
                                                                /* value */"HERRO",
                                                                /* directives : :: */[
                                                                  /* record */[
                                                                    /* name */"dir",
                                                                    /* arguments : :: */[
                                                                      /* record */[
                                                                        /* name */"asd",
                                                                        /* value : ListValue */Block.__(5, [/* :: */[
                                                                              /* BooleanValue */Block.__(3, [true]),
                                                                              /* :: */[
                                                                                /* BooleanValue */Block.__(3, [false]),
                                                                                /* :: */[
                                                                                  /* NullValue */0,
                                                                                  /* :: */[
                                                                                    /* EnumValue */Block.__(4, ["FOOBAR"]),
                                                                                    /* [] */0
                                                                                  ]
                                                                                ]
                                                                              ]
                                                                            ]])
                                                                      ],
                                                                      /* [] */0
                                                                    ]
                                                                  ],
                                                                  /* [] */0
                                                                ]
                                                              ],
                                                              /* :: */[
                                                                /* record */[
                                                                  /* description *//* StringValue */Block.__(0, ["Awesome"]),
                                                                  /* value */"FOO",
                                                                  /* directives : [] */0
                                                                ],
                                                                /* :: */[
                                                                  /* record */[
                                                                    /* description */undefined,
                                                                    /* value */"BAR",
                                                                    /* directives : [] */0
                                                                  ],
                                                                  /* [] */0
                                                                ]
                                                              ]
                                                            ]
                                                          ]])])]),
                                              /* [] */0
                                            ]]);
                              }));
                        describe("UnionTypeDefinition", (function () {
                                testProgram("\n            \"Foobar\"\n            union Foo\n            ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* UnionTypeDefinition */Block.__(3, [/* record */[
                                                      /* description *//* StringValue */Block.__(0, ["Foobar"]),
                                                      /* name */"Foo",
                                                      /* directives : [] */0,
                                                      /* types : [] */0
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n            union Foo = Bar\n            ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* UnionTypeDefinition */Block.__(3, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"Foo",
                                                      /* directives : [] */0,
                                                      /* types : :: */[
                                                        "Bar",
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n            union Foo = Baz | Bar\n            ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* UnionTypeDefinition */Block.__(3, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"Foo",
                                                      /* directives : [] */0,
                                                      /* types : :: */[
                                                        "Baz",
                                                        /* :: */[
                                                          "Bar",
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n            union Foo = | Baz | Bar\n            ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* UnionTypeDefinition */Block.__(3, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"Foo",
                                                      /* directives : [] */0,
                                                      /* types : :: */[
                                                        "Baz",
                                                        /* :: */[
                                                          "Bar",
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                return testProgram("\n            union Foo @test = | Baz | Bar\n            ", /* record */[/* definitions : :: */[
                                              /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* UnionTypeDefinition */Block.__(3, [/* record */[
                                                            /* description */undefined,
                                                            /* name */"Foo",
                                                            /* directives : :: */[
                                                              /* record */[
                                                                /* name */"test",
                                                                /* arguments : [] */0
                                                              ],
                                                              /* [] */0
                                                            ],
                                                            /* types : :: */[
                                                              "Baz",
                                                              /* :: */[
                                                                "Bar",
                                                                /* [] */0
                                                              ]
                                                            ]
                                                          ]])])]),
                                              /* [] */0
                                            ]]);
                              }));
                        describe("ObjectTypeDefinition", (function () {
                                testProgram("\n                type T {\n                  field:  T\n                }\n                ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ObjectTypeDefinition */Block.__(1, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"T",
                                                      /* implements : [] */0,
                                                      /* directives : [] */0,
                                                      /* fields : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* name */"field",
                                                          /* arguments : [] */0,
                                                          /* tpe : NamedType */Block.__(0, ["T"]),
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n                type T {\n                  field:  T!\n                }\n                ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ObjectTypeDefinition */Block.__(1, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"T",
                                                      /* implements : [] */0,
                                                      /* directives : [] */0,
                                                      /* fields : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* name */"field",
                                                          /* arguments : [] */0,
                                                          /* tpe : NonNullType */Block.__(2, [/* NamedType */Block.__(1, ["T"])]),
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n                type T {\n                  field:  [T]!\n                }\n                ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ObjectTypeDefinition */Block.__(1, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"T",
                                                      /* implements : [] */0,
                                                      /* directives : [] */0,
                                                      /* fields : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* name */"field",
                                                          /* arguments : [] */0,
                                                          /* tpe : NonNullType */Block.__(2, [/* ListType */Block.__(0, [/* NamedType */Block.__(0, ["T"])])]),
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n                type T {\n                  field(arg: X = []):  T\n                }\n                ", /* record */[/* definitions : :: */[
                                        /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ObjectTypeDefinition */Block.__(1, [/* record */[
                                                      /* description */undefined,
                                                      /* name */"T",
                                                      /* implements : [] */0,
                                                      /* directives : [] */0,
                                                      /* fields : :: */[
                                                        /* record */[
                                                          /* description */undefined,
                                                          /* name */"field",
                                                          /* arguments : :: */[
                                                            /* record */[
                                                              /* description */undefined,
                                                              /* name */"arg",
                                                              /* tpe : NamedType */Block.__(0, ["X"]),
                                                              /* defaultValue *//* ListValue */Block.__(5, [/* [] */0]),
                                                              /* directives : [] */0
                                                            ],
                                                            /* [] */0
                                                          ],
                                                          /* tpe : NamedType */Block.__(0, ["T"]),
                                                          /* directives : [] */0
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]])])]),
                                        /* [] */0
                                      ]]);
                                testProgram("\n                type T {\n                  field(arg: X = [123]):  T\n                }\n                ", td(/* ObjectTypeDefinition */Block.__(1, [/* record */[
                                              /* description */undefined,
                                              /* name */"T",
                                              /* implements : [] */0,
                                              /* directives : [] */0,
                                              /* fields : :: */[
                                                /* record */[
                                                  /* description */undefined,
                                                  /* name */"field",
                                                  /* arguments : :: */[
                                                    /* record */[
                                                      /* description */undefined,
                                                      /* name */"arg",
                                                      /* tpe : NamedType */Block.__(0, ["X"]),
                                                      /* defaultValue *//* ListValue */Block.__(5, [/* :: */[
                                                            /* IntValue */Block.__(0, [123]),
                                                            /* [] */0
                                                          ]]),
                                                      /* directives : [] */0
                                                    ],
                                                    /* [] */0
                                                  ],
                                                  /* tpe : NamedType */Block.__(0, ["T"]),
                                                  /* directives : [] */0
                                                ],
                                                /* [] */0
                                              ]
                                            ]])));
                                testProgram("\n                type T {\n                  field(arg: X = [123, true, null, 1.23, 1.0E10]):  T\n                }\n                ", td(/* ObjectTypeDefinition */Block.__(1, [/* record */[
                                              /* description */undefined,
                                              /* name */"T",
                                              /* implements : [] */0,
                                              /* directives : [] */0,
                                              /* fields : :: */[
                                                /* record */[
                                                  /* description */undefined,
                                                  /* name */"field",
                                                  /* arguments : :: */[
                                                    /* record */[
                                                      /* description */undefined,
                                                      /* name */"arg",
                                                      /* tpe : NamedType */Block.__(0, ["X"]),
                                                      /* defaultValue *//* ListValue */Block.__(5, [/* :: */[
                                                            /* IntValue */Block.__(0, [123]),
                                                            /* :: */[
                                                              /* BooleanValue */Block.__(3, [true]),
                                                              /* :: */[
                                                                /* NullValue */0,
                                                                /* :: */[
                                                                  /* FloatValue */Block.__(1, ["1.23"]),
                                                                  /* :: */[
                                                                    /* FloatValue */Block.__(1, ["1.0E10"]),
                                                                    /* [] */0
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]]),
                                                      /* directives : [] */0
                                                    ],
                                                    /* [] */0
                                                  ],
                                                  /* tpe : NamedType */Block.__(0, ["T"]),
                                                  /* directives : [] */0
                                                ],
                                                /* [] */0
                                              ]
                                            ]])));
                                return testProgram("\n                type T {\n                  field(arg: X = {}): T\n                }\n                ", /* record */[/* definitions : :: */[
                                              /* TypeSystemDefinition */Block.__(0, [/* TypeDefinition */Block.__(1, [/* ObjectTypeDefinition */Block.__(1, [/* record */[
                                                            /* description */undefined,
                                                            /* name */"T",
                                                            /* implements : [] */0,
                                                            /* directives : [] */0,
                                                            /* fields : :: */[
                                                              /* record */[
                                                                /* description */undefined,
                                                                /* name */"field",
                                                                /* arguments : :: */[
                                                                  /* record */[
                                                                    /* description */undefined,
                                                                    /* name */"arg",
                                                                    /* tpe : NamedType */Block.__(0, ["X"]),
                                                                    /* defaultValue *//* ObjectValue */Block.__(6, [/* [] */0]),
                                                                    /* directives : [] */0
                                                                  ],
                                                                  /* [] */0
                                                                ],
                                                                /* tpe : NamedType */Block.__(0, ["T"]),
                                                                /* directives : [] */0
                                                              ],
                                                              /* [] */0
                                                            ]
                                                          ]])])]),
                                              /* [] */0
                                            ]]);
                              }));
                        return /* () */0;
                      }));
                describe("SchemaDefinition", (function () {
                        testProgram("\n\n            schema @test {\n              query: Test\n            }\n            ", /* record */[/* definitions : :: */[
                                /* TypeSystemDefinition */Block.__(0, [/* SchemaDefinition */Block.__(0, [/* record */[
                                          /* directives : :: */[
                                            /* record */[
                                              /* name */"test",
                                              /* arguments : [] */0
                                            ],
                                            /* [] */0
                                          ],
                                          /* operations : :: */[
                                            /* record */[
                                              /* operation : Query */0,
                                              /* tpe */"Test"
                                            ],
                                            /* [] */0
                                          ]
                                        ]])]),
                                /* [] */0
                              ]]);
                        return testProgram("\n\n            schema @test {\n              query: true subscription: Foo mutation: Bar\n            }\n            ", /* record */[/* definitions : :: */[
                                      /* TypeSystemDefinition */Block.__(0, [/* SchemaDefinition */Block.__(0, [/* record */[
                                                /* directives : :: */[
                                                  /* record */[
                                                    /* name */"test",
                                                    /* arguments : [] */0
                                                  ],
                                                  /* [] */0
                                                ],
                                                /* operations : :: */[
                                                  /* record */[
                                                    /* operation : Query */0,
                                                    /* tpe */"true"
                                                  ],
                                                  /* :: */[
                                                    /* record */[
                                                      /* operation : Subscription */2,
                                                      /* tpe */"Foo"
                                                    ],
                                                    /* :: */[
                                                      /* record */[
                                                        /* operation : Mutation */1,
                                                        /* tpe */"Bar"
                                                      ],
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ]
                                              ]])]),
                                      /* [] */0
                                    ]]);
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

exports.parse = parse;
exports.parseString = parseString;
exports.testName = testName;
exports.testProgram = testProgram;
exports.td = td;
exports.sd = sd;
exports.od = od;
exports.fd = fd;
/*  Not a pure module */
